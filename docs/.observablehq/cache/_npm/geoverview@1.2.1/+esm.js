/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/geoverview@1.2.1/src/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import t from"../@turf/bbox@6.5.0/+esm.js";import e from"../@turf/area@6.5.0/+esm.js";import n from"../@turf/length@6.5.0/+esm.js";import o from"../maplibre-gl@2.4.0/+esm.js";import*as r from"../topojson-server@3.0.1/+esm.js";import*as i from"../topojson-client@3.1.0/+esm.js";function s(t){let e=["z","l","p"],n=t.features.map((t=>t.geometry.type));n=Array.from(new Set(n));let o=(-1!==n.indexOf("Polygon")||-1!==n.indexOf("MultiPolygon")?e[0]:"")+(-1!==n.indexOf("LineString")||-1!==n.indexOf("MultiLineString")?e[1]:"")+(-1!==n.indexOf("Point")||-1!==n.indexOf("MultiPoint")?e[2]:"");return[1==o.length?o:"c",n.sort().join(", ")]}const l=Object.assign({},r,i);function a(t){return"Topology"==t.type?l.feature(t,Object.keys(t.objects)[0]):t}function*d(r,i={}){if(r){const l=r;r=a(r);const d=null!=i.width?i.width:1e3,c=null!=i.col?i.col:"#be82c2",u=null!=i.height?i.height:550,p=null!=i.radius?i.radius:5,g=null!=i.fillOpacity?i.fillOpacity:.5,f=null==i.renderWorldCopies||i.renderWorldCopies,m=null!=i.colOver?i.colOver:"#ffd505",b=i.lineWidth,h=null!=i.style?i.style:"voyager",y=new Map([["night","https://geoserveis.icgc.cat/contextmaps/night.json"],["fulldark","https://geoserveis.icgc.cat/contextmaps/fulldark.json"],["voyager","https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json"],["positron","https://geoserveis.icgc.cat/contextmaps/positron.json"],["icgc","https://geoserveis.icgc.cat/contextmaps/icgc.json"],["osmbright","https://geoserveis.icgc.cat/contextmaps/osm-bright.json"],["hibrid","https://geoserveis.icgc.cat/contextmaps/hibrid.json"]]),x=Math.floor(281474976710656*(1+Math.random())).toString(16).substring(1),v="https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css";document.head.innerHTML+=`<link type="text/css" rel="stylesheet" href=${v}>`;const j=`\n\n<style>\n\n.mapboxgl-popup-content{\noverflow-y:scroll;\nmax-height:250px;\nmax-width:300px;\npadding:10px;\nborder:black;\nfont-family:Arial,Helvetica,sans-serif;\nfont-size:15px;\ncolor:gray;\n}\n\n.mapboxgl-popup-content td{\npadding:3px;\nfont-size:11px;\nfont-family:Arial,Helvetica,sans-serif;\ncolor:#85817e;\nvertical-align:middle;\n}\n\n.rounded-rect {\nbackground: white;\nborder-radius: 10px;\nbox-shadow: 0 0 50px -25px black;\n}\n\n.flex-center {\nposition: absolute;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\n\n.flex-center.left {\nleft: 0px;\n}\n\n.sidebar-content${x}{\nposition:absolute;\nwidth:95%;\nheight:${u-15}px;\nfont-family:Arial,Helvetica,sans-serif;\nfont-size:17px;\ncolor:gray;\n}\n\n.tt${x}{\nheight:${u-240}px;\ndisplay:block;\noverflow-y:scroll;\n}\n\n.sidebar-toggle {\nposition: absolute;\nwidth: 2em;\nheight: 2.3em;\noverflow: visible;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\n\n.sidebar-toggle.left {\nright: -1.5em;\n}\n\n.sidebar-toggle:hover {\ncolor: #0aa1cf;\ncursor: pointer;\n}\n\n.sidebar {\ntransition: transform 1s;\nz-index: 1;\nwidth: 300px;\nheight: 100%;\n}\n\n.left.collapsed${x} {\ntransform: translateX(-295px);\n}\n\n</style>\n`;document.head.innerHTML+=j,r.features.map(((t,e)=>t.id=e+1));let w=null;const M=s(r),O=t(r),k=[[O[0],O[1]],[O[2],O[3]]];let L=[];const $=r.features.map((t=>t.properties));$.forEach((t=>L.push(Object.keys(t).length)));const C=Object.keys($[L.indexOf(Math.max(...L))]);let S=document.createElement("div");S.setAttribute("style",`width:${d}px;height:${u}px`),S.innerHTML=`<div id="slidebar${x}" class="sidebar flex-center left collapsed${x}">\n    <div class="sidebar-content${x} rounded-rect flex-center">\n    ${function(e,n){const o=e.type;e=a(e);let r=[];const i=e.features.map((t=>t.properties));i.forEach((t=>r.push(Object.keys(t).length)));const l=Object.keys(i[r.indexOf(Math.max(...r))]);let d=[];l.forEach((t=>d.push([t,e.features.map((e=>e.properties[t])).filter((t=>NaN!=t)).filter((t=>""!=t)).filter((t=>null!=t)).filter((t=>null!=t)).length]))),d=new Map(d);const c=e.features.length,u=s(e)[1];let p="<div class= 'leftable'>";return p+="Geometries in brief",p+="<table>",p+="<tr><td><b>Type</b></td><td>"+o+"</td></tr>",p+="<tr><td><b>Features</b></td><td>"+u+"</td></tr>",p+="<tr><td width='100' ><b>Count</b></td><td width='140' >"+c+"</td></tr>",p+="<tr><td><b>Bounding box</b></td><td>"+t(e).map((t=>Math.round(100*t)/100)).join(", ")+"</td></tr>",p+="</table>",p+="Attribute data (completeness)",p+=`<table class = "tt${n}">`,l.forEach((t=>p+="<tr><td width='100'><b>"+t+"</b></td><td width='140'><div style = 'background:#F1F1F1;  white-space: nowrap; width:"+130*d.get(t)/e.features.length+"px'>"+d.get(t)+"<span style='font-size:70%'> /"+e.features.length+"</span></div></td></tr>")),p+="</table></div> ",p}(l,x)}\n    <div id = "toogle${x}" class="sidebar-toggle rounded-rect left">&rarr;</div> \n    </div></div></div>`,yield S;const P=S.value=new o.Map({container:S,style:y.get(h),scrollZoom:!0,bounds:k,attributionControl:!1,renderWorldCopies:f});P.on("load",(function(){P.addSource("mygeojson",{type:"geojson",data:r}),"z"==M[0]&&(P.addLayer({id:"mygeojson",type:"fill",source:"mygeojson",paint:{"fill-color":["case",["boolean",["feature-state","hover"],!1],m,c],"fill-opacity":g}}),P.addLayer({id:"mygeojson-stroke",type:"line",source:"mygeojson",layout:{"line-join":"round","line-cap":"round"},paint:{"line-color":c,"line-width":null!=b?b:1}})),"l"==M[0]&&P.addLayer({id:"mygeojson",type:"line",source:"mygeojson",layout:{"line-join":"round","line-cap":"round"},paint:{"line-color":["case",["boolean",["feature-state","hover"],!1],m,c],"line-width":null!=b?b:3}}),"p"==M[0]&&P.addLayer({id:"mygeojson",type:"circle",source:"mygeojson",paint:{"circle-color":["case",["boolean",["feature-state","hover"],!1],m,c],"circle-stroke-color":c,"circle-opacity":g,"circle-stroke-width":null!=b?b:1,"circle-radius":p}}),P.on("click","mygeojson",(function(r){let i=r.features[0].geometry.type,s="";if(s+="Geometries",s+="<table>",s+="<tr><td><b>Type</b></td><td>"+i+"</td></tr>","Point"==i&&(s+="<tr><td><b>Latitude</b></td><td>"+r.features[0].geometry.coordinates[1]+"</td></tr>",s+="<tr><td><b>Longitude</b></td><td>"+r.features[0].geometry.coordinates[0]+"</td></tr>"),"MultiPolygon"==i&&(s+="<tr><td><b>Nb of polygons</b></td><td>"+r.features[0].geometry.coordinates.length+"</td></tr>"),"MultiLineString"==i&&(s+="<tr><td><b>Nb of lines</b></td><td>"+r.features[0].geometry.coordinates.length+"</td></tr>"),"MultiPoint"==i&&(s+="<tr><td><b>Nb of points</b></td><td>"+r.features[0].geometry.coordinates.length+"</td></tr>"),"Point"!=i){const e=t(r.features[0]);s+="<tr><td><b>Longitude min</b></td><td>"+Math.round(100*e[0])/100+"</td></tr>",s+="<tr><td><b>Longitude max</b></td><td>"+Math.round(100*e[2])/100+"</td></tr>",s+="<tr><td><b>Latitude min</b></td><td>"+Math.round(100*e[1])/100+"</td></tr>",s+="<tr><td><b>Latitude max</b></td><td>"+Math.round(100*e[3])/100+"</td></tr>"}-1!=i.indexOf("Polygon")&&(s+="<tr><td><b>Computed area</b></td><td>"+Math.round(e(r.features[0].geometry)/1e4)/100+" kmÂ²</td></tr>"),-1!=i.indexOf("LineString")&&(s+="<tr><td><b>Computed length</b></td><td>"+Math.round(100*n(r.features[0].geometry))/100+" km</td></tr>"),s+="</table>",s+="Attribute data",s+="<table>",C.forEach((t=>s+="<tr><td><b>"+t+"</b></td><td>"+r.features[0].properties[t]+"</td></tr>")),s+="</table>",new o.Popup({closeOnClick:!0,closeOnMove:!0}).setLngLat(r.lngLat).setHTML(s).addTo(P)})),P.on("mouseenter","mygeojson",(function(){P.getCanvas().style.cursor="pointer"})),P.on("mouseleave","mygeojson",(function(){P.getCanvas().style.cursor=""})),P.fitBounds(k,{padding:{top:15,bottom:15,left:15,right:15}})})),P.on("mousemove","mygeojson",(function(t){t.features.length>0&&(w&&P.setFeatureState({source:"mygeojson",id:w},{hover:!1}),w=t.features[0].id,P.setFeatureState({source:"mygeojson",id:w},{hover:!0}))})),P.on("mouseleave","mygeojson",(function(){w&&P.setFeatureState({source:"mygeojson",id:w},{hover:!1}),w=null})),document.querySelector(`#toogle${x}, #slidebar${x}`).addEventListener("click",(function(){var t,e,n,o;t=`slidebar${x}`,e=document.getElementById(t),n=e.className.split(" "),o={},-1!==n.indexOf(`collapsed${x}`)?(n.splice(n.indexOf(`collapsed${x}`),1),o[t]=300,P.easeTo({padding:o,duration:1e3})):(o[t]=0,n.push(`collapsed${x}`),P.easeTo({padding:o,duration:1e3})),e.className=n.join(" ")})),console.log(x),P.addControl(new o.FullscreenControl),P.addControl(new o.NavigationControl,"top-right"),P.addControl(new o.AttributionControl({customAttribution:'Made with <a href ="https://github.com/neocarto/geoverview" target="_blank">geoverview.js</a>',compact:!1}))}}export{d as view};export default null;
