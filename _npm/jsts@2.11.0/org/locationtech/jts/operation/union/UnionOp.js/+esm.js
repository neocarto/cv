/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/jsts@2.11.0/org/locationtech/jts/operation/union/UnionOp.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
class t extends Error{constructor(e){super(e),this.name=Object.keys({Exception:t})[0]}toString(){return this.message}}class e extends t{constructor(t){super(t),this.name=Object.keys({IllegalArgumentException:e})[0]}}class s{filter(t){}}function i(){}function n(){}function r(){}class o{static equalsWithTolerance(t,e,s){return Math.abs(t-e)<=s}}class a{constructor(t,e){this.low=e||0,this.high=t||0}static toBinaryString(t){let e,s="";for(e=2147483648;e>0;e>>>=1)s+=(t.high&e)===e?"1":"0";for(e=2147483648;e>0;e>>>=1)s+=(t.low&e)===e?"1":"0";return s}}function l(){}l.NaN=NaN,l.isNaN=t=>Number.isNaN(t),l.isInfinite=t=>!Number.isFinite(t),l.MAX_VALUE=Number.MAX_VALUE,l.POSITIVE_INFINITY=Number.POSITIVE_INFINITY,l.NEGATIVE_INFINITY=Number.NEGATIVE_INFINITY,"function"==typeof Float64Array&&"function"==typeof Int32Array?function(){const t=2146435072,e=new Float64Array(1),s=new Int32Array(e.buffer);l.doubleToLongBits=function(i){e[0]=i;let n=0|s[0],r=0|s[1];return(r&t)===t&&0!=(1048575&r)&&0!==n&&(n=0,r=2146959360),new a(r,n)},l.longBitsToDouble=function(t){return s[0]=t.low,s[1]=t.high,e[0]}}():function(){const t=1023,e=Math.log2,s=Math.floor,i=Math.pow,n=function(){for(let t=53;t>0;t--){const n=i(2,t)-1;if(s(e(n))+1===t)return n}return 0}();l.doubleToLongBits=function(r){let o,l,h,c,u,g,d,_,p;if(r<0||1/r===Number.NEGATIVE_INFINITY?(g=1<<31,r=-r):g=0,0===r)return p=0,_=g,new a(_,p);if(r===1/0)return p=0,_=2146435072|g,new a(_,p);if(r!=r)return p=0,_=2146959360,new a(_,p);if(c=0,p=0,o=s(r),o>1)if(o<=n)c=s(e(o)),c<=20?(p=0,_=o<<20-c&1048575):(h=c-20,l=i(2,h),p=o%l<<32-h,_=o/l&1048575);else for(h=o,p=0;l=h/2,h=s(l),0!==h;)c++,p>>>=1,p|=(1&_)<<31,_>>>=1,l!==h&&(_|=524288);if(d=c+t,u=0===o,o=r-o,c<52&&0!==o)for(h=0;;){if(l=2*o,l>=1?(o=l-1,u?(d--,u=!1):(h<<=1,h|=1,c++)):(o=l,u?0==--d&&(c++,u=!1):(h<<=1,c++)),20===c)_|=h,h=0;else if(52===c){p|=h;break}if(1===l){c<20?_|=h<<20-c:c<52&&(p|=h<<52-c);break}}return _|=d<<20,_|=g,new a(_,p)},l.longBitsToDouble=function(e){let s,n,r,o;const a=e.high,l=e.low,h=a&1<<31?-1:1;for(r=((2146435072&a)>>20)-t,o=0,n=1<<19,s=1;s<=20;s++)a&n&&(o+=i(2,-s)),n>>>=1;for(n=1<<31,s=21;s<=52;s++)l&n&&(o+=i(2,-s)),n>>>=1;if(-1023===r){if(0===o)return 0*h;r=-1022}else{if(1024===r)return 0===o?h/0:NaN;o+=1}return h*o*i(2,r)}}();class h extends t{constructor(t){super(t),this.name=Object.keys({RuntimeException:h})[0]}}class c extends h{constructor(){super(),c.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)h.constructor_.call(this);else if(1===arguments.length){const t=arguments[0];h.constructor_.call(this,t)}}}class u{static isTrue(){if(1===arguments.length){const t=arguments[0];u.isTrue(t,null)}else if(2===arguments.length){const t=arguments[1];if(!arguments[0])throw null===t?new c:new c(t)}}static shouldNeverReachHere(){if(0===arguments.length)u.shouldNeverReachHere(null);else if(1===arguments.length){const t=arguments[0];throw new c("Should never reach here"+(null!==t?": "+t:""))}}static equals(){if(2===arguments.length){const t=arguments[0],e=arguments[1];u.equals(t,e,null)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(!e.equals(t))throw new c("Expected "+t+" but encountered "+e+(null!==s?": "+s:""))}}}function g(){}const d=new ArrayBuffer(8),_=new Float64Array(d),p=new Int32Array(d);class f{constructor(){f.constructor_.apply(this,arguments)}static constructor_(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)f.constructor_.call(this,0,0);else if(1===arguments.length){const t=arguments[0];f.constructor_.call(this,t.x,t.y,t.getZ())}else if(2===arguments.length){const t=arguments[0],e=arguments[1];f.constructor_.call(this,t,e,f.NULL_ORDINATE)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.x=t,this.y=e,this.z=s}}static hashCode(t){return _[0]=t,p[0]^p[1]}equals2D(){if(1===arguments.length){const t=arguments[0];return this.x===t.x&&this.y===t.y}if(2===arguments.length){const t=arguments[0],e=arguments[1];return!!o.equalsWithTolerance(this.x,t.x,e)&&!!o.equalsWithTolerance(this.y,t.y,e)}}setM(t){throw new e("Invalid ordinate index: "+f.M)}equals3D(t){return this.x===t.x&&this.y===t.y&&(this.getZ()===t.getZ()||l.isNaN(this.getZ())&&l.isNaN(t.getZ()))}setX(t){this.x=t}compareTo(t){const e=t;return this.x<e.x?-1:this.x>e.x?1:this.y<e.y?-1:this.y>e.y?1:0}getX(){return this.x}copy(){return new f(this)}toString(){return"("+this.x+", "+this.y+", "+this.getZ()+")"}distance3D(t){const e=this.x-t.x,s=this.y-t.y,i=this.getZ()-t.getZ();return Math.sqrt(e*e+s*s+i*i)}getY(){return this.y}getM(){return l.NaN}setOrdinate(t,s){switch(t){case f.X:this.x=s;break;case f.Y:this.y=s;break;case f.Z:this.setZ(s);break;default:throw new e("Invalid ordinate index: "+t)}}getZ(){return this.z}getOrdinate(t){switch(t){case f.X:return this.x;case f.Y:return this.y;case f.Z:return this.getZ()}throw new e("Invalid ordinate index: "+t)}equals(t){return t instanceof f&&this.equals2D(t)}equalInZ(t,e){return o.equalsWithTolerance(this.getZ(),t.getZ(),e)}setZ(t){this.z=t}clone(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return u.shouldNeverReachHere("this shouldn't happen because this class is Cloneable"),null;throw t}}setY(t){this.y=t}distance(t){const e=this.x-t.x,s=this.y-t.y;return Math.sqrt(e*e+s*s)}hashCode(){let t=17;return t=37*t+f.hashCode(this.x),t=37*t+f.hashCode(this.y),t}setCoordinate(t){this.x=t.x,this.y=t.y,this.z=t.getZ()}get interfaces_(){return[i,n,r]}}class m{constructor(){m.constructor_.apply(this,arguments)}static constructor_(){if(this._dimensionsToTest=2,0===arguments.length)m.constructor_.call(this,2);else if(1===arguments.length){const t=arguments[0];if(2!==t&&3!==t)throw new e("only 2 or 3 dimensions may be specified");this._dimensionsToTest=t}}static compare(t,e){return t<e?-1:t>e?1:l.isNaN(t)?l.isNaN(e)?0:-1:l.isNaN(e)?1:0}compare(t,e){const s=m.compare(t.x,e.x);if(0!==s)return s;const i=m.compare(t.y,e.y);if(0!==i)return i;if(this._dimensionsToTest<=2)return 0;return m.compare(t.getZ(),e.getZ())}get interfaces_(){return[g]}}f.DimensionalComparator=m,f.NULL_ORDINATE=l.NaN,f.X=0,f.Y=1,f.Z=2,f.M=3;class y{constructor(){y.constructor_.apply(this,arguments)}static constructor_(){if(this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof f){const t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof y){const t=arguments[0];this.init(t)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.init(t.x,e.x,t.y,e.y)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this.init(t,e,s,i)}}static intersects(){if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];return s.x>=(t.x<e.x?t.x:e.x)&&s.x<=(t.x>e.x?t.x:e.x)&&s.y>=(t.y<e.y?t.y:e.y)&&s.y<=(t.y>e.y?t.y:e.y)}if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];let n=Math.min(s.x,i.x),r=Math.max(s.x,i.x),o=Math.min(t.x,e.x),a=Math.max(t.x,e.x);return!(o>r)&&(!(a<n)&&(n=Math.min(s.y,i.y),r=Math.max(s.y,i.y),o=Math.min(t.y,e.y),a=Math.max(t.y,e.y),!(o>r)&&!(a<n)))}}getArea(){return this.getWidth()*this.getHeight()}getMinX(){return this._minx}expandToInclude(){if(1===arguments.length){if(arguments[0]instanceof f){const t=arguments[0];this.expandToInclude(t.x,t.y)}else if(arguments[0]instanceof y){const t=arguments[0];if(t.isNull())return null;this.isNull()?(this._minx=t.getMinX(),this._maxx=t.getMaxX(),this._miny=t.getMinY(),this._maxy=t.getMaxY()):(t._minx<this._minx&&(this._minx=t._minx),t._maxx>this._maxx&&(this._maxx=t._maxx),t._miny<this._miny&&(this._miny=t._miny),t._maxy>this._maxy&&(this._maxy=t._maxy))}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.isNull()?(this._minx=t,this._maxx=t,this._miny=e,this._maxy=e):(t<this._minx&&(this._minx=t),t>this._maxx&&(this._maxx=t),e<this._miny&&(this._miny=e),e>this._maxy&&(this._maxy=e))}}compareTo(t){const e=t;return this.isNull()?e.isNull()?0:-1:e.isNull()?1:this._minx<e._minx?-1:this._minx>e._minx?1:this._miny<e._miny?-1:this._miny>e._miny?1:this._maxx<e._maxx?-1:this._maxx>e._maxx?1:this._maxy<e._maxy?-1:this._maxy>e._maxy?1:0}translate(t,e){if(this.isNull())return null;this.init(this.getMinX()+t,this.getMaxX()+t,this.getMinY()+e,this.getMaxY()+e)}copy(){return new y(this)}expandBy(){if(1===arguments.length){const t=arguments[0];this.expandBy(t,t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];if(this.isNull())return null;this._minx-=t,this._maxx+=t,this._miny-=e,this._maxy+=e,(this._minx>this._maxx||this._miny>this._maxy)&&this.setToNull()}}contains(){if(1===arguments.length){if(arguments[0]instanceof y){const t=arguments[0];return this.covers(t)}if(arguments[0]instanceof f){const t=arguments[0];return this.covers(t)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.covers(t,e)}}hashCode(){let t=17;return t=37*t+f.hashCode(this._minx),t=37*t+f.hashCode(this._maxx),t=37*t+f.hashCode(this._miny),t=37*t+f.hashCode(this._maxy),t}equals(t){if(!(t instanceof y))return!1;const e=t;return this.isNull()?e.isNull():this._maxx===e.getMaxX()&&this._maxy===e.getMaxY()&&this._minx===e.getMinX()&&this._miny===e.getMinY()}intersection(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new y;const e=this._minx>t._minx?this._minx:t._minx,s=this._miny>t._miny?this._miny:t._miny,i=this._maxx<t._maxx?this._maxx:t._maxx,n=this._maxy<t._maxy?this._maxy:t._maxy;return new y(e,i,s,n)}isNull(){return this._maxx<this._minx}getMaxX(){return this._maxx}covers(){if(1===arguments.length){if(arguments[0]instanceof f){const t=arguments[0];return this.covers(t.x,t.y)}if(arguments[0]instanceof y){const t=arguments[0];return!this.isNull()&&!t.isNull()&&(t.getMinX()>=this._minx&&t.getMaxX()<=this._maxx&&t.getMinY()>=this._miny&&t.getMaxY()<=this._maxy)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];return!this.isNull()&&(t>=this._minx&&t<=this._maxx&&e>=this._miny&&e<=this._maxy)}}intersects(){if(1===arguments.length){if(arguments[0]instanceof y){const t=arguments[0];return!this.isNull()&&!t.isNull()&&!(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}if(arguments[0]instanceof f){const t=arguments[0];return this.intersects(t.x,t.y)}}else if(2===arguments.length){if(arguments[0]instanceof f&&arguments[1]instanceof f){const t=arguments[0],e=arguments[1];if(this.isNull())return!1;if((t.x<e.x?t.x:e.x)>this._maxx)return!1;if((t.x>e.x?t.x:e.x)<this._minx)return!1;if((t.y<e.y?t.y:e.y)>this._maxy)return!1;return!((t.y>e.y?t.y:e.y)<this._miny)}if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1];return!this.isNull()&&!(t>this._maxx||t<this._minx||e>this._maxy||e<this._miny)}}}getMinY(){return this._miny}getDiameter(){if(this.isNull())return 0;const t=this.getWidth(),e=this.getHeight();return Math.sqrt(t*t+e*e)}minExtent(){if(this.isNull())return 0;const t=this.getWidth(),e=this.getHeight();return t<e?t:e}getWidth(){return this.isNull()?0:this._maxx-this._minx}toString(){return"Env["+this._minx+" : "+this._maxx+", "+this._miny+" : "+this._maxy+"]"}setToNull(){this._minx=0,this._maxx=-1,this._miny=0,this._maxy=-1}disjoint(t){return!(!this.isNull()&&!t.isNull())||(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}getHeight(){return this.isNull()?0:this._maxy-this._miny}maxExtent(){if(this.isNull())return 0;const t=this.getWidth(),e=this.getHeight();return t>e?t:e}centre(){return this.isNull()?null:new f((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)}init(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof f){const t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof y){const t=arguments[0];this._minx=t._minx,this._maxx=t._maxx,this._miny=t._miny,this._maxy=t._maxy}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.init(t.x,e.x,t.y,e.y)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];t<e?(this._minx=t,this._maxx=e):(this._minx=e,this._maxx=t),s<i?(this._miny=s,this._maxy=i):(this._miny=i,this._maxy=s)}}getMaxY(){return this._maxy}distance(t){if(this.intersects(t))return 0;let e=0;this._maxx<t._minx?e=t._minx-this._maxx:this._minx>t._maxx&&(e=this._minx-t._maxx);let s=0;return this._maxy<t._miny?s=t._miny-this._maxy:this._miny>t._maxy&&(s=this._miny-t._maxy),0===e?s:0===s?e:Math.sqrt(e*e+s*s)}get interfaces_(){return[i,r]}}class I{constructor(){I.constructor_.apply(this,arguments)}isGeometryCollection(){return this.getTypeCode()===I.TYPECODE_GEOMETRYCOLLECTION}getFactory(){return this._factory}getGeometryN(t){return this}getArea(){return 0}isRectangle(){return!1}equalsExact(t){return this===t||this.equalsExact(t,0)}geometryChanged(){this.apply(I.geometryChangedFilter)}geometryChangedAction(){this._envelope=null}equalsNorm(t){return null!==t&&this.norm().equalsExact(t.norm())}getLength(){return 0}getNumGeometries(){return 1}compareTo(){let t;if(1===arguments.length){const e=arguments[0];return t=e,this.getTypeCode()!==t.getTypeCode()?this.getTypeCode()-t.getTypeCode():this.isEmpty()&&t.isEmpty()?0:this.isEmpty()?-1:t.isEmpty()?1:this.compareToSameClass(e)}if(2===arguments.length){const e=arguments[0],s=arguments[1];return t=e,this.getTypeCode()!==t.getTypeCode()?this.getTypeCode()-t.getTypeCode():this.isEmpty()&&t.isEmpty()?0:this.isEmpty()?-1:t.isEmpty()?1:this.compareToSameClass(e,s)}}getUserData(){return this._userData}getSRID(){return this._SRID}getEnvelope(){return this.getFactory().toGeometry(this.getEnvelopeInternal())}static checkNotGeometryCollection(t){if(t.getTypeCode()===I.TYPECODE_GEOMETRYCOLLECTION)throw new e("This method does not support GeometryCollection arguments")}equal(t,e,s){return 0===s?t.equals(e):t.distance(e)<=s}norm(){const t=this.copy();return t.normalize(),t}reverse(){const t=this.reverseInternal();return null!=this.envelope&&(t.envelope=this.envelope.copy()),t.setSRID(this.getSRID()),t}copy(){const t=this.copyInternal();return t.envelope=null==this._envelope?null:this._envelope.copy(),t._SRID=this._SRID,t._userData=this._userData,t}getPrecisionModel(){return this._factory.getPrecisionModel()}getEnvelopeInternal(){return null===this._envelope&&(this._envelope=this.computeEnvelopeInternal()),new y(this._envelope)}setSRID(t){this._SRID=t}setUserData(t){this._userData=t}compare(t,e){const s=t.iterator(),i=e.iterator();for(;s.hasNext()&&i.hasNext();){const t=s.next(),e=i.next(),n=t.compareTo(e);if(0!==n)return n}return s.hasNext()?1:i.hasNext()?-1:0}hashCode(){return this.getEnvelopeInternal().hashCode()}isEquivalentClass(t){return this.getTypeCode()==t.getTypeCode()}get interfaces_(){return[n,i,r]}getClass(){return I}static hasNonEmptyElements(t){for(let e=0;e<t.length;e++)if(!t[e].isEmpty())return!0;return!1}static hasNullElements(t){for(let e=0;e<t.length;e++)if(null===t[e])return!0;return!1}}I.constructor_=function(t){t&&(this._envelope=null,this._userData=null,this._factory=t,this._SRID=t.getSRID())},I.TYPECODE_POINT=0,I.TYPECODE_MULTIPOINT=1,I.TYPECODE_LINESTRING=2,I.TYPECODE_LINEARRING=3,I.TYPECODE_MULTILINESTRING=4,I.TYPECODE_POLYGON=5,I.TYPECODE_MULTIPOLYGON=6,I.TYPECODE_GEOMETRYCOLLECTION=7,I.TYPENAME_POINT="Point",I.TYPENAME_MULTIPOINT="MultiPoint",I.TYPENAME_LINESTRING="LineString",I.TYPENAME_LINEARRING="LinearRing",I.TYPENAME_MULTILINESTRING="MultiLineString",I.TYPENAME_POLYGON="Polygon",I.TYPENAME_MULTIPOLYGON="MultiPolygon",I.TYPENAME_GEOMETRYCOLLECTION="GeometryCollection",I.geometryChangedFilter={get interfaces_(){return[s]},filter(t){t.geometryChangedAction()}};class E{add(){}addAll(){}isEmpty(){}iterator(){}size(){}toArray(){}remove(){}}class x extends t{constructor(t){super(t),this.name=Object.keys({NoSuchElementException:x})[0]}}class N extends t{constructor(t){super(t),this.name=Object.keys({UnsupportedOperationException:N})[0]}}class T extends E{contains(){}}class R extends T{}class L extends R{constructor(t){super(),this.array=[],t instanceof E&&this.addAll(t)}contains(t){for(const e of this.array)if(0===e.compareTo(t))return!0;return!1}add(t){if(this.contains(t))return!1;for(let e=0,s=this.array.length;e<s;e++){if(1===this.array[e].compareTo(t))return!!this.array.splice(e,0,t)}return this.array.push(t),!0}addAll(t){for(const e of t)this.add(e);return!0}remove(){throw new N}size(){return this.array.length}isEmpty(){return 0===this.array.length}toArray(){return this.array.slice()}iterator(){return new C(this.array)}}class C{constructor(t){this.array=t,this.position=0}next(){if(this.position===this.array.length)throw new x;return this.array[this.position++]}hasNext(){return this.position<this.array.length}remove(){throw new N}}class S{constructor(){S.constructor_.apply(this,arguments)}static constructor_(){if(this._quadrantSegments=S.DEFAULT_QUADRANT_SEGMENTS,this._endCapStyle=S.CAP_ROUND,this._joinStyle=S.JOIN_ROUND,this._mitreLimit=S.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this._simplifyFactor=S.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){const t=arguments[0];this.setQuadrantSegments(t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.setQuadrantSegments(t),this.setEndCapStyle(e)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this.setQuadrantSegments(t),this.setEndCapStyle(e),this.setJoinStyle(s),this.setMitreLimit(i)}}static bufferDistanceError(t){const e=Math.PI/2/t;return 1-Math.cos(e/2)}getEndCapStyle(){return this._endCapStyle}isSingleSided(){return this._isSingleSided}setQuadrantSegments(t){this._quadrantSegments=t,0===this._quadrantSegments&&(this._joinStyle=S.JOIN_BEVEL),this._quadrantSegments<0&&(this._joinStyle=S.JOIN_MITRE,this._mitreLimit=Math.abs(this._quadrantSegments)),t<=0&&(this._quadrantSegments=1),this._joinStyle!==S.JOIN_ROUND&&(this._quadrantSegments=S.DEFAULT_QUADRANT_SEGMENTS)}getJoinStyle(){return this._joinStyle}setJoinStyle(t){this._joinStyle=t}setSimplifyFactor(t){this._simplifyFactor=t<0?0:t}getSimplifyFactor(){return this._simplifyFactor}getQuadrantSegments(){return this._quadrantSegments}setEndCapStyle(t){this._endCapStyle=t}getMitreLimit(){return this._mitreLimit}setMitreLimit(t){this._mitreLimit=t}setSingleSided(t){this._isSingleSided=t}}function w(t,e){return t.interfaces_&&t.interfaces_.indexOf(e)>-1}S.CAP_ROUND=1,S.CAP_FLAT=2,S.CAP_SQUARE=3,S.JOIN_ROUND=1,S.JOIN_MITRE=2,S.JOIN_BEVEL=3,S.DEFAULT_QUADRANT_SEGMENTS=8,S.DEFAULT_MITRE_LIMIT=5,S.DEFAULT_SIMPLIFY_FACTOR=.01;class O extends t{constructor(t){super(t),this.name=Object.keys({IndexOutOfBoundsException:O})[0]}}class b extends E{get(){}set(){}isEmpty(){}}class P extends b{constructor(t){super(),this.array=[],t instanceof E&&this.addAll(t)}get interfaces_(){return[b,E]}ensureCapacity(){}add(t){return 1===arguments.length?this.array.push(t):this.array.splice(arguments[0],0,arguments[1]),!0}clear(){this.array=[]}addAll(t){for(const e of t)this.array.push(e)}set(t,e){const s=this.array[t];return this.array[t]=e,s}iterator(){return new A(this)}get(t){if(t<0||t>=this.size())throw new O;return this.array[t]}isEmpty(){return 0===this.array.length}sort(t){t?this.array.sort(((e,s)=>t.compare(e,s))):this.array.sort()}size(){return this.array.length}toArray(){return this.array.slice()}remove(t){for(let e=0,s=this.array.length;e<s;e++)if(this.array[e]===t)return!!this.array.splice(e,1);return!1}[Symbol.iterator](){return this.array.values()}}class A{constructor(t){this.arrayList=t,this.position=0}next(){if(this.position===this.arrayList.size())throw new x;return this.arrayList.get(this.position++)}hasNext(){return this.position<this.arrayList.size()}set(t){return this.arrayList.set(this.position-1,t)}remove(){this.arrayList.remove(this.arrayList.get(this.position))}}class M extends P{constructor(){super(),M.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length);else if(1===arguments.length){const t=arguments[0];this.ensureCapacity(t.length),this.add(t,!0)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.ensureCapacity(t.length),this.add(t,e)}}getCoordinate(t){return this.get(t)}addAll(){if(2===arguments.length&&"boolean"==typeof arguments[1]&&w(arguments[0],E)){const t=arguments[1];let e=!1;for(let s=arguments[0].iterator();s.hasNext();)this.add(s.next(),t),e=!0;return e}return super.addAll.apply(this,arguments)}clone(){const t=super.clone.call(this);for(let e=0;e<this.size();e++)t.add(e,this.get(e).clone());return t}closeRing(){if(this.size()>0){const t=this.get(0).copy();this.add(t,!1)}}toCoordinateArray(){if(0===arguments.length)return this.toArray(M.coordArrayType);if(1===arguments.length){if(arguments[0])return this.toArray(M.coordArrayType);const t=this.size(),e=new Array(t).fill(null);for(let s=0;s<t;s++)e[s]=this.get(t-s-1);return e}}add(){if(1===arguments.length){const t=arguments[0];return super.add.call(this,t)}if(2===arguments.length){if(arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){const t=arguments[0],e=arguments[1];return this.add(t,e,!0),!0}if(arguments[0]instanceof f&&"boolean"==typeof arguments[1]){const t=arguments[0];if(!arguments[1]&&this.size()>=1){if(this.get(this.size()-1).equals2D(t))return null}super.add.call(this,t)}else if(arguments[0]instanceof Object&&"boolean"==typeof arguments[1]){const t=arguments[0],e=arguments[1];return this.add(t,e),!0}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){const t=arguments[0],e=arguments[1];if(arguments[2])for(let s=0;s<t.length;s++)this.add(t[s],e);else for(let s=t.length-1;s>=0;s--)this.add(t[s],e);return!0}if("boolean"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof f){const t=arguments[0],e=arguments[1];if(!arguments[2]){const s=this.size();if(s>0){if(t>0){if(this.get(t-1).equals2D(e))return null}if(t<s){if(this.get(t).equals2D(e))return null}}}super.add.call(this,t,e)}}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];let n=1;s>i&&(n=-1);for(let r=s;r!==i;r+=n)this.add(t[r],e);return!0}}}M.coordArrayType=new Array(0).fill(null);class D{static relativeSign(t,e){return t<e?-1:t>e?1:0}static compareValue(t,e){return t<0?-1:t>0?1:e<0?-1:e>0?1:0}static compare(t,e,s){if(e.equals2D(s))return 0;const i=D.relativeSign(e.x,s.x),n=D.relativeSign(e.y,s.y);switch(t){case 0:return D.compareValue(i,n);case 1:return D.compareValue(n,i);case 2:return D.compareValue(n,-i);case 3:return D.compareValue(-i,n);case 4:return D.compareValue(-i,-n);case 5:return D.compareValue(-n,-i);case 6:return D.compareValue(-n,i);case 7:return D.compareValue(i,-n)}return u.shouldNeverReachHere("invalid octant value"),0}}class v{constructor(){v.constructor_.apply(this,arguments)}static constructor_(){this._segString=null,this.coord=null,this.segmentIndex=null,this._segmentOctant=null,this._isInterior=null;const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this._segString=t,this.coord=new f(e),this.segmentIndex=s,this._segmentOctant=i,this._isInterior=!e.equals2D(t.getCoordinate(s))}getCoordinate(){return this.coord}print(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex)}compareTo(t){const e=t;return this.segmentIndex<e.segmentIndex?-1:this.segmentIndex>e.segmentIndex?1:this.coord.equals2D(e.coord)?0:this._isInterior?e._isInterior?D.compare(this._segmentOctant,this.coord,e.coord):1:-1}isEndPoint(t){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===t}toString(){return this.segmentIndex+":"+this.coord.toString()}isInterior(){return this._isInterior}get interfaces_(){return[i]}}class F{hasNext(){}next(){}remove(){}}class G{constructor(t){this.value=t}intValue(){return this.value}compareTo(t){return this.value<t?-1:this.value>t?1:0}static compare(t,e){return t<e?-1:t>e?1:0}static isNan(t){return Number.isNaN(t)}static valueOf(t){return new G(t)}}class q{get(){}put(){}size(){}values(){}entrySet(){}}class B extends q{}class Y extends T{constructor(t){super(),this.map=new Map,t instanceof E&&this.addAll(t)}contains(t){const e=t.hashCode?t.hashCode():t;return!!this.map.has(e)}add(t){const e=t.hashCode?t.hashCode():t;return!this.map.has(e)&&!!this.map.set(e,t)}addAll(t){for(const e of t)this.add(e);return!0}remove(){throw new N}size(){return this.map.size}isEmpty(){return 0===this.map.size}toArray(){return Array.from(this.map.values())}iterator(){return new z(this.map)}[Symbol.iterator](){return this.map}}class z{constructor(t){this.iterator=t.values();const{done:e,value:s}=this.iterator.next();this.done=e,this.value=s}next(){if(this.done)throw new x;const t=this.value,{done:e,value:s}=this.iterator.next();return this.done=e,this.value=s,t}hasNext(){return!this.done}remove(){throw new N}}function U(t){return null==t?0:t.color}function X(t){return null==t?null:t.parent}function V(t,e){null!==t&&(t.color=e)}function k(t){return null==t?null:t.left}function H(t){return null==t?null:t.right}class Z extends B{constructor(){super(),this.root_=null,this.size_=0}get(t){let e=this.root_;for(;null!==e;){const s=t.compareTo(e.key);if(s<0)e=e.left;else{if(!(s>0))return e.value;e=e.right}}return null}put(t,e){if(null===this.root_)return this.root_={key:t,value:e,left:null,right:null,parent:null,color:0,getValue(){return this.value},getKey(){return this.key}},this.size_=1,null;let s,i,n=this.root_;do{if(s=n,i=t.compareTo(n.key),i<0)n=n.left;else{if(!(i>0)){const t=n.value;return n.value=e,t}n=n.right}}while(null!==n);const r={key:t,left:null,right:null,value:e,parent:s,color:0,getValue(){return this.value},getKey(){return this.key}};return i<0?s.left=r:s.right=r,this.fixAfterInsertion(r),this.size_++,null}fixAfterInsertion(t){let e;for(t.color=1;null!=t&&t!==this.root_&&1===t.parent.color;)X(t)===k(X(X(t)))?(e=H(X(X(t))),1===U(e)?(V(X(t),0),V(e,0),V(X(X(t)),1),t=X(X(t))):(t===H(X(t))&&(t=X(t),this.rotateLeft(t)),V(X(t),0),V(X(X(t)),1),this.rotateRight(X(X(t))))):(e=k(X(X(t))),1===U(e)?(V(X(t),0),V(e,0),V(X(X(t)),1),t=X(X(t))):(t===k(X(t))&&(t=X(t),this.rotateRight(t)),V(X(t),0),V(X(X(t)),1),this.rotateLeft(X(X(t)))));this.root_.color=0}values(){const t=new P;let e=this.getFirstEntry();if(null!==e)for(t.add(e.value);null!==(e=Z.successor(e));)t.add(e.value);return t}entrySet(){const t=new Y;let e=this.getFirstEntry();if(null!==e)for(t.add(e);null!==(e=Z.successor(e));)t.add(e);return t}rotateLeft(t){if(null!=t){const e=t.right;t.right=e.left,null!=e.left&&(e.left.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.left===t?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e}}rotateRight(t){if(null!=t){const e=t.left;t.left=e.right,null!=e.right&&(e.right.parent=t),e.parent=t.parent,null==t.parent?this.root_=e:t.parent.right===t?t.parent.right=e:t.parent.left=e,e.right=t,t.parent=e}}getFirstEntry(){let t=this.root_;if(null!=t)for(;null!=t.left;)t=t.left;return t}static successor(t){let e;if(null===t)return null;if(null!==t.right){for(e=t.right;null!==e.left;)e=e.left;return e}{e=t.parent;let s=t;for(;null!==e&&s===e.right;)s=e,e=e.parent;return e}}size(){return this.size_}containsKey(t){let e=this.root_;for(;null!==e;){const s=t.compareTo(e.key);if(s<0)e=e.left;else{if(!(s>0))return!0;e=e.right}}return!1}}class W{constructor(){W.constructor_.apply(this,arguments)}static constructor_(){this._nodeMap=new Z,this._edge=null;const t=arguments[0];this._edge=t}getSplitCoordinates(){const t=new M;this.addEndpoints();const e=this.iterator();let s=e.next();for(;e.hasNext();){const i=e.next();this.addEdgeCoordinates(s,i,t),s=i}return t.toCoordinateArray()}print(t){t.println("Intersections:");for(let e=this.iterator();e.hasNext();){e.next().print(t)}}findCollapsesFromExistingVertices(t){for(let e=0;e<this._edge.size()-2;e++){const s=this._edge.getCoordinate(e);this._edge.getCoordinate(e+1);const i=this._edge.getCoordinate(e+2);s.equals2D(i)&&t.add(G.valueOf(e+1))}}addEdgeCoordinates(t,e,s){const i=this.createSplitEdgePts(t,e);s.add(i,!1)}findCollapseIndex(t,e,s){if(!t.coord.equals2D(e.coord))return!1;let i=e.segmentIndex-t.segmentIndex;return e.isInterior()||i--,1===i&&(s[0]=t.segmentIndex+1,!0)}findCollapsesFromInsertedNodes(t){const e=new Array(1).fill(null),s=this.iterator();let i=s.next();for(;s.hasNext();){const n=s.next();this.findCollapseIndex(i,n,e)&&t.add(G.valueOf(e[0])),i=n}}getEdge(){return this._edge}addEndpoints(){const t=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0),this.add(this._edge.getCoordinate(t),t)}createSplitEdge(t,e){const s=this.createSplitEdgePts(t,e);return new le(s,this._edge.getData())}add(t,e){const s=new v(this._edge,t,e,this._edge.getSegmentOctant(e)),i=this._nodeMap.get(s);return null!==i?(u.isTrue(i.coord.equals2D(t),"Found equal nodes with different coordinates"),i):(this._nodeMap.put(s,s),s)}checkSplitEdgesCorrectness(t){const e=this._edge.getCoordinates(),s=t.get(0).getCoordinate(0);if(!s.equals2D(e[0]))throw new h("bad split edge start point at "+s);const i=t.get(t.size()-1).getCoordinates(),n=i[i.length-1];if(!n.equals2D(e[e.length-1]))throw new h("bad split edge end point at "+n)}addCollapsedNodes(){const t=new P;this.findCollapsesFromInsertedNodes(t),this.findCollapsesFromExistingVertices(t);for(let e=t.iterator();e.hasNext();){const t=e.next().intValue();this.add(this._edge.getCoordinate(t),t)}}createSplitEdgePts(t,e){let s=e.segmentIndex-t.segmentIndex+2;if(2===s)return[new f(t.coord),new f(e.coord)];const i=this._edge.getCoordinate(e.segmentIndex),n=e.isInterior()||!e.coord.equals2D(i);n||s--;const r=new Array(s).fill(null);let o=0;r[o++]=new f(t.coord);for(let s=t.segmentIndex+1;s<=e.segmentIndex;s++)r[o++]=this._edge.getCoordinate(s);return n&&(r[o]=new f(e.coord)),r}iterator(){return this._nodeMap.values().iterator()}addSplitEdges(t){this.addEndpoints(),this.addCollapsedNodes();const e=this.iterator();let s=e.next();for(;e.hasNext();){const i=e.next(),n=this.createSplitEdge(s,i);t.add(n),s=i}}}class j{static ofLine(t){const e=t.size();if(e<=1)return 0;let s=0;const i=new f;t.getCoordinate(0,i);let n=i.x,r=i.y;for(let o=1;o<e;o++){t.getCoordinate(o,i);const e=i.x,a=i.y,l=e-n,h=a-r;s+=Math.sqrt(l*l+h*h),n=e,r=a}return s}}class K extends f{constructor(){super(),K.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)f.constructor_.call(this);else if(1===arguments.length){if(arguments[0]instanceof K){const t=arguments[0];f.constructor_.call(this,t.x,t.y)}else if(arguments[0]instanceof f){const t=arguments[0];f.constructor_.call(this,t.x,t.y)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];f.constructor_.call(this,t,e,f.NULL_ORDINATE)}}setOrdinate(t,s){switch(t){case K.X:this.x=s;break;case K.Y:this.y=s;break;default:throw new e("Invalid ordinate index: "+t)}}setZ(t){throw new e("CoordinateXY dimension 2 does not support z-ordinate")}copy(){return new K(this)}toString(){return"("+this.x+", "+this.y+")"}setCoordinate(t){this.x=t.x,this.y=t.y,this.z=t.getZ()}getZ(){return f.NULL_ORDINATE}getOrdinate(t){switch(t){case K.X:return this.x;case K.Y:return this.y}throw new e("Invalid ordinate index: "+t)}}K.X=0,K.Y=1,K.Z=-1,K.M=-1;class Q extends f{constructor(){super(),Q.constructor_.apply(this,arguments)}static constructor_(){if(this._m=null,0===arguments.length)f.constructor_.call(this),this._m=0;else if(1===arguments.length){if(arguments[0]instanceof Q){const t=arguments[0];f.constructor_.call(this,t.x,t.y),this._m=t._m}else if(arguments[0]instanceof f){const t=arguments[0];f.constructor_.call(this,t.x,t.y),this._m=this.getM()}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];f.constructor_.call(this,t,e,f.NULL_ORDINATE),this._m=s}}setM(t){this._m=t}setZ(t){throw new e("CoordinateXY dimension 2 does not support z-ordinate")}copy(){return new Q(this)}toString(){return"("+this.x+", "+this.y+" m="+this.getM()+")"}setCoordinate(t){this.x=t.x,this.y=t.y,this.z=t.getZ(),this._m=t.getM()}getM(){return this._m}setOrdinate(t,s){switch(t){case Q.X:this.x=s;break;case Q.Y:this.y=s;break;case Q.M:this._m=s;break;default:throw new e("Invalid ordinate index: "+t)}}getZ(){return f.NULL_ORDINATE}getOrdinate(t){switch(t){case Q.X:return this.x;case Q.Y:return this.y;case Q.M:return this._m}throw new e("Invalid ordinate index: "+t)}}Q.X=0,Q.Y=1,Q.Z=-1,Q.M=2;class J extends f{constructor(){super(),J.constructor_.apply(this,arguments)}static constructor_(){if(this._m=null,0===arguments.length)f.constructor_.call(this),this._m=0;else if(1===arguments.length){if(arguments[0]instanceof J){const t=arguments[0];f.constructor_.call(this,t),this._m=t._m}else if(arguments[0]instanceof f){const t=arguments[0];f.constructor_.call(this,t),this._m=this.getM()}}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];f.constructor_.call(this,t,e,s),this._m=i}}setM(t){this._m=t}getOrdinate(t){switch(t){case f.X:return this.x;case f.Y:return this.y;case f.Z:return this.getZ();case f.M:return this.getM()}throw new e("Invalid ordinate index: "+t)}copy(){return new J(this)}toString(){return"("+this.x+", "+this.y+", "+this.getZ()+" m="+this.getM()+")"}setCoordinate(t){this.x=t.x,this.y=t.y,this.z=t.getZ(),this._m=t.getM()}getM(){return this._m}setOrdinate(t,s){switch(t){case f.X:this.x=s;break;case f.Y:this.y=s;break;case f.Z:this.z=s;break;case f.M:this._m=s;break;default:throw new e("Invalid ordinate index: "+t)}}}class ${static measures(t){return t instanceof K?0:t instanceof Q||t instanceof J?1:0}static create(){if(1===arguments.length){const t=arguments[0];return $.create(t,0)}if(2===arguments.length){const t=arguments[0],e=arguments[1];return 2===t?new K:3===t&&0===e?new f:3===t&&1===e?new Q:4===t&&1===e?new J:new f}}static dimension(t){return t instanceof K?2:t instanceof Q?3:t instanceof J?4:3}}class tt{static log10(t){const e=Math.log(t);return l.isInfinite(e)||l.isNaN(e)?e:e/tt.LOG_10}static min(t,e,s,i){let n=t;return e<n&&(n=e),s<n&&(n=s),i<n&&(n=i),n}static clamp(){if("number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1],s=arguments[2];return t<e?e:t>s?s:t}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1],s=arguments[2];return t<e?e:t>s?s:t}}static average(t,e){return(t+e)/2}static wrap(t,e){return t<0?e- -t%e:t%e}static max(){if(3===arguments.length){const t=arguments[1],e=arguments[2];let s=arguments[0];return t>s&&(s=t),e>s&&(s=e),s}if(4===arguments.length){const t=arguments[1],e=arguments[2],s=arguments[3];let i=arguments[0];return t>i&&(i=t),e>i&&(i=e),s>i&&(i=s),i}}}tt.LOG_10=Math.log(10);class et{static arraycopy(t,e,s,i,n){let r=0;for(let o=e;o<e+n;o++)s[i+r]=t[o],r++}static getProperty(t){return{"line.separator":"\n"}[t]}}class st{static scroll(t,e){const s=st.indexOf(e,t);if(s<0)return null;const i=new Array(t.length).fill(null);et.arraycopy(t,s,i,0,t.length-s),et.arraycopy(t,0,i,t.length-s,s),et.arraycopy(i,0,t,0,t.length)}static removeRepeatedPoints(t){if(!st.hasRepeatedPoints(t))return t;return new M(t,!1).toCoordinateArray()}static reverse(t){const e=t.length-1,s=Math.trunc(e/2);for(let i=0;i<=s;i++){const s=t[i];t[i]=t[e-i],t[e-i]=s}}static removeNull(t){let e=0;for(let s=0;s<t.length;s++)null!==t[s]&&e++;const s=new Array(e).fill(null);if(0===e)return s;let i=0;for(let e=0;e<t.length;e++)null!==t[e]&&(s[i++]=t[e]);return s}static copyDeep(){if(1===arguments.length){const t=arguments[0],e=new Array(t.length).fill(null);for(let s=0;s<t.length;s++)e[s]=t[s].copy();return e}if(5===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=arguments[4];for(let r=0;r<n;r++)s[i+r]=t[e+r].copy()}}static isEqualReversed(t,e){for(let s=0;s<t.length;s++){const i=t[s],n=e[t.length-s-1];if(0!==i.compareTo(n))return!1}return!0}static envelope(t){const e=new y;for(let s=0;s<t.length;s++)e.expandToInclude(t[s]);return e}static extract(t,e,s){e=tt.clamp(e,0,t.length);let i=(s=tt.clamp(s,-1,t.length))-e+1;s<0&&(i=0),e>=t.length&&(i=0),s<e&&(i=0);const n=new Array(i).fill(null);if(0===i)return n;let r=0;for(let i=e;i<=s;i++)n[r++]=t[i];return n}static isRing(t){return!(t.length<4)&&!!t[0].equals2D(t[t.length-1])}static ptNotInList(t,e){for(let s=0;s<t.length;s++){const i=t[s];if(st.indexOf(i,e)<0)return i}return null}static equals(){if(2===arguments.length){const t=arguments[0],e=arguments[1];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(let s=0;s<t.length;s++)if(!t[s].equals(e[s]))return!1;return!0}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(let i=0;i<t.length;i++)if(0!==s.compare(t[i],e[i]))return!1;return!0}}static intersection(t,e){const s=new M;for(let i=0;i<t.length;i++)e.intersects(t[i])&&s.add(t[i],!0);return s.toCoordinateArray()}static measures(t){if(null===t||0===t.length)return 0;let e=0;for(const s of t)e=Math.max(e,$.measures(s));return e}static hasRepeatedPoints(t){for(let e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return!0;return!1}static toCoordinateArray(t){return t.toArray(st.coordArrayType)}static dimension(t){if(null===t||0===t.length)return 3;let e=0;for(const s of t)e=Math.max(e,$.dimension(s));return e}static atLeastNCoordinatesOrNothing(t,e){return e.length>=t?e:[]}static indexOf(t,e){for(let s=0;s<e.length;s++)if(t.equals(e[s]))return s;return-1}static increasingDirection(t){for(let e=0;e<Math.trunc(t.length/2);e++){const s=t.length-1-e,i=t[e].compareTo(t[s]);if(0!==i)return i}return 1}static compare(t,e){let s=0;for(;s<t.length&&s<e.length;){const i=t[s].compareTo(e[s]);if(0!==i)return i;s++}return s<e.length?-1:s<t.length?1:0}static minCoordinate(t){let e=null;for(let s=0;s<t.length;s++)(null===e||e.compareTo(t[s])>0)&&(e=t[s]);return e}}st.ForwardComparator=class{compare(t,e){const s=t,i=e;return st.compare(s,i)}get interfaces_(){return[g]}},st.BidirectionalComparator=class{compare(t,e){const s=t,i=e;if(s.length<i.length)return-1;if(s.length>i.length)return 1;if(0===s.length)return 0;const n=st.compare(s,i);return st.isEqualReversed(s,i)?0:n}OLDcompare(t,e){const s=t,i=e;if(s.length<i.length)return-1;if(s.length>i.length)return 1;if(0===s.length)return 0;const n=st.increasingDirection(s),r=st.increasingDirection(i);let o=n>0?0:s.length-1,a=r>0?0:s.length-1;for(let t=0;t<s.length;t++){const t=s[o].compareTo(i[a]);if(0!==t)return t;o+=n,a+=r}return 0}get interfaces_(){return[g]}},st.coordArrayType=new Array(0).fill(null);class it{static isWhitespace(t){return t<=32&&t>=0||127===t}static toUpperCase(t){return t.toUpperCase()}}class nt{static toDimensionSymbol(t){switch(t){case nt.FALSE:return nt.SYM_FALSE;case nt.TRUE:return nt.SYM_TRUE;case nt.DONTCARE:return nt.SYM_DONTCARE;case nt.P:return nt.SYM_P;case nt.L:return nt.SYM_L;case nt.A:return nt.SYM_A}throw new e("Unknown dimension value: "+t)}static toDimensionValue(t){switch(it.toUpperCase(t)){case nt.SYM_FALSE:return nt.FALSE;case nt.SYM_TRUE:return nt.TRUE;case nt.SYM_DONTCARE:return nt.DONTCARE;case nt.SYM_P:return nt.P;case nt.SYM_L:return nt.L;case nt.SYM_A:return nt.A}throw new e("Unknown dimension symbol: "+t)}}nt.P=0,nt.L=1,nt.A=2,nt.FALSE=-1,nt.TRUE=-2,nt.DONTCARE=-3,nt.SYM_FALSE="F",nt.SYM_TRUE="T",nt.SYM_DONTCARE="*",nt.SYM_P="0",nt.SYM_L="1",nt.SYM_A="2";class rt{filter(t){}}class ot{}class at{getCoordinate(){}getCoordinateCopy(t){}createCoordinate(){}getDimension(){}hasM(){return this.getMeasures()>0}getX(t){}hasZ(){return this.getDimension()-this.getMeasures()>2}getMeasures(){return 0}expandEnvelope(t){}copy(){}getY(t){}toCoordinateArray(){}getM(t){if(this.hasM()){const e=this.getDimension()-this.getMeasures();return this.getOrdinate(t,e)}return l.NaN}setOrdinate(t,e,s){}getZ(t){return this.hasZ()?this.getOrdinate(t,2):l.NaN}size(){}getOrdinate(t,e){}get interfaces_(){return[n]}}at.X=0,at.Y=1,at.Z=2,at.M=3;class lt{static scroll(){if(2===arguments.length){if(w(arguments[0],at)&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1];lt.scroll(t,e,lt.isRing(t))}else if(w(arguments[0],at)&&arguments[1]instanceof f){const t=arguments[0],e=arguments[1],s=lt.indexOf(e,t);if(s<=0)return null;lt.scroll(t,s)}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(e<=0)return null;const i=t.copy(),n=s?t.size()-1:t.size();for(let s=0;s<n;s++)for(let r=0;r<t.getDimension();r++)t.setOrdinate(s,r,i.getOrdinate((e+s)%n,r));if(s)for(let e=0;e<t.getDimension();e++)t.setOrdinate(n,e,t.getOrdinate(0,e))}}static isEqual(t,e){const s=t.size();if(s!==e.size())return!1;const i=Math.min(t.getDimension(),e.getDimension());for(let n=0;n<s;n++)for(let s=0;s<i;s++){const i=t.getOrdinate(n,s),r=e.getOrdinate(n,s);if(t.getOrdinate(n,s)!==e.getOrdinate(n,s)&&(!l.isNaN(i)||!l.isNaN(r)))return!1}return!0}static minCoordinateIndex(){if(1===arguments.length){const t=arguments[0];return lt.minCoordinateIndex(t,0,t.size()-1)}if(3===arguments.length){const t=arguments[0],e=arguments[2];let s=-1,i=null;for(let n=arguments[1];n<=e;n++){const e=t.getCoordinate(n);(null===i||i.compareTo(e)>0)&&(i=e,s=n)}return s}}static extend(t,e,s){const i=t.create(s,e.getDimension()),n=e.size();if(lt.copy(e,0,i,0,n),n>0)for(let t=n;t<s;t++)lt.copy(e,n-1,i,t,1);return i}static reverse(t){const e=t.size()-1,s=Math.trunc(e/2);for(let i=0;i<=s;i++)lt.swap(t,i,e-i)}static ensureValidRing(t,e){const s=e.size();if(0===s)return e;if(s<=3)return lt.createClosedRing(t,e,4);return e.getOrdinate(0,at.X)===e.getOrdinate(s-1,at.X)&&e.getOrdinate(0,at.Y)===e.getOrdinate(s-1,at.Y)?e:lt.createClosedRing(t,e,s+1)}static minCoordinate(t){let e=null;for(let s=0;s<t.size();s++){const i=t.getCoordinate(s);(null===e||e.compareTo(i)>0)&&(e=i)}return e}static copyCoord(t,e,s,i){const n=Math.min(t.getDimension(),s.getDimension());for(let r=0;r<n;r++)s.setOrdinate(i,r,t.getOrdinate(e,r))}static isRing(t){const e=t.size();return 0===e||!(e<=3)&&(t.getOrdinate(0,at.X)===t.getOrdinate(e-1,at.X)&&t.getOrdinate(0,at.Y)===t.getOrdinate(e-1,at.Y))}static swap(t,e,s){if(e===s)return null;for(let i=0;i<t.getDimension();i++){const n=t.getOrdinate(e,i);t.setOrdinate(e,i,t.getOrdinate(s,i)),t.setOrdinate(s,i,n)}}static copy(t,e,s,i,n){for(let r=0;r<n;r++)lt.copyCoord(t,e+r,s,i+r)}static indexOf(t,e){for(let s=0;s<e.size();s++)if(t.x===e.getOrdinate(s,at.X)&&t.y===e.getOrdinate(s,at.Y))return s;return-1}static createClosedRing(t,e,s){const i=t.create(s,e.getDimension()),n=e.size();lt.copy(e,0,i,0,n);for(let t=n;t<s;t++)lt.copy(e,0,i,t,1);return i}}class ht{filter(t){}}class ct{filter(t,e){}isGeometryChanged(){}isDone(){}}class ut extends I{constructor(){super(),ut.constructor_.apply(this,arguments)}static constructor_(){if(this._points=null,0===arguments.length);else if(2===arguments.length){const t=arguments[0],e=arguments[1];I.constructor_.call(this,e),this.init(t)}}computeEnvelopeInternal(){return this.isEmpty()?new y:this._points.expandEnvelope(new y)}isRing(){return this.isClosed()&&st.isRing(this.getCoordinates())}getCoordinates(){return this._points.toCoordinateArray()}copyInternal(){return new ut(this._points.copy(),this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof I){const t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;const s=t;if(this._points.size()!==s._points.size())return!1;for(let t=0;t<this._points.size();t++)if(!this.equal(this._points.getCoordinate(t),s._points.getCoordinate(t),e))return!1;return!0}return super.equalsExact.apply(this,arguments)}isClosed(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))}reverseInternal(){const t=this._points.copy();return lt.reverse(t),this.getFactory().createLineString(t)}getEndPoint(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)}getTypeCode(){return I.TYPECODE_LINESTRING}getDimension(){return 1}getBoundary(){throw new N}isEquivalentClass(t){return t instanceof ut}getCoordinateSequence(){return this._points}getPointN(t){return this.getFactory().createPoint(this._points.getCoordinate(t))}normalize(){for(let t=0;t<Math.trunc(this._points.size()/2);t++){const e=this._points.size()-1-t;if(!this._points.getCoordinate(t).equals(this._points.getCoordinate(e))){if(this._points.getCoordinate(t).compareTo(this._points.getCoordinate(e))>0){const t=this._points.copy();lt.reverse(t),this._points=t}return null}}}getCoordinate(){return this.isEmpty()?null:this._points.getCoordinate(0)}getBoundaryDimension(){return this.isClosed()?nt.FALSE:0}getLength(){return j.ofLine(this._points)}getNumPoints(){return this._points.size()}compareToSameClass(){if(1===arguments.length){const t=arguments[0];let e=0,s=0;for(;e<this._points.size()&&s<t._points.size();){const i=this._points.getCoordinate(e).compareTo(t._points.getCoordinate(s));if(0!==i)return i;e++,s++}return e<this._points.size()?1:s<t._points.size()?-1:0}if(2===arguments.length){const t=arguments[0];return arguments[1].compare(this._points,t._points)}}apply(){if(w(arguments[0],rt)){const t=arguments[0];for(let e=0;e<this._points.size();e++)t.filter(this._points.getCoordinate(e))}else if(w(arguments[0],ct)){const t=arguments[0];if(0===this._points.size())return null;for(let e=0;e<this._points.size()&&(t.filter(this._points,e),!t.isDone());e++);t.isGeometryChanged()&&this.geometryChanged()}else if(w(arguments[0],ht)){arguments[0].filter(this)}else if(w(arguments[0],s)){arguments[0].filter(this)}}getCoordinateN(t){return this._points.getCoordinate(t)}getGeometryType(){return I.TYPENAME_LINESTRING}isEmpty(){return 0===this._points.size()}init(t){if(null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),1===t.size())throw new e("Invalid number of points in LineString (found "+t.size()+" - must be 0 or >= 2)");this._points=t}isCoordinate(t){for(let e=0;e<this._points.size();e++)if(this._points.getCoordinate(e).equals(t))return!0;return!1}getStartPoint(){return this.isEmpty()?null:this.getPointN(0)}get interfaces_(){return[ot]}}class gt extends ut{constructor(){super(),gt.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];ut.constructor_.call(this,t,e),this.validateConstruction()}copyInternal(){return new gt(this._points.copy(),this._factory)}getBoundaryDimension(){return nt.FALSE}isClosed(){return!!this.isEmpty()||super.isClosed.call(this)}reverseInternal(){const t=this._points.copy();return lt.reverse(t),this.getFactory().createLinearRing(t)}getTypeCode(){return I.TYPECODE_LINEARRING}validateConstruction(){if(!this.isEmpty()&&!super.isClosed.call(this))throw new e("Points of LinearRing do not form a closed linestring");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<gt.MINIMUM_VALID_SIZE)throw new e("Invalid number of points in LinearRing (found "+this.getCoordinateSequence().size()+" - must be 0 or >= 4)")}getGeometryType(){return I.TYPENAME_LINEARRING}}gt.MINIMUM_VALID_SIZE=4;class dt{create(){if(1===arguments.length)arguments[0]instanceof Array||w(arguments[0],at);else if(2===arguments.length);else if(3===arguments.length){const t=arguments[0],e=arguments[1];return this.create(t,e)}}}class _t{constructor(t){this.str=t}append(t){this.str+=t}setCharAt(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)}toString(){return this.str}}class pt{constructor(){pt.constructor_.apply(this,arguments)}static constructor_(){if(this._dimension=3,this._measures=0,this._coordinates=null,1===arguments.length){if(arguments[0]instanceof Array){const t=arguments[0];pt.constructor_.call(this,t,st.dimension(t),st.measures(t))}else if(Number.isInteger(arguments[0])){const t=arguments[0];this._coordinates=new Array(t).fill(null);for(let e=0;e<t;e++)this._coordinates[e]=new f}else if(w(arguments[0],at)){const t=arguments[0];if(null===t)return this._coordinates=new Array(0).fill(null),null;this._dimension=t.getDimension(),this._measures=t.getMeasures(),this._coordinates=new Array(t.size()).fill(null);for(let e=0;e<this._coordinates.length;e++)this._coordinates[e]=t.getCoordinateCopy(e)}}else if(2===arguments.length){if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1];pt.constructor_.call(this,t,e,st.measures(t))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1];this._coordinates=new Array(t).fill(null),this._dimension=e;for(let s=0;s<t;s++)this._coordinates[s]=$.create(e)}}else if(3===arguments.length)if(Number.isInteger(arguments[2])&&arguments[0]instanceof Array&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1],s=arguments[2];this._dimension=e,this._measures=s,this._coordinates=null===t?new Array(0).fill(null):t}else if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){const t=arguments[0],e=arguments[1],s=arguments[2];this._coordinates=new Array(t).fill(null),this._dimension=e,this._measures=s;for(let e=0;e<t;e++)this._coordinates[e]=this.createCoordinate()}}getCoordinate(){if(1===arguments.length){const t=arguments[0];return this._coordinates[t]}if(2===arguments.length){const t=arguments[0];arguments[1].setCoordinate(this._coordinates[t])}}getCoordinateCopy(t){const e=this.createCoordinate();return e.setCoordinate(this._coordinates[t]),e}createCoordinate(){return $.create(this.getDimension(),this.getMeasures())}getDimension(){return this._dimension}getX(t){return this._coordinates[t].x}getMeasures(){return this._measures}expandEnvelope(t){for(let e=0;e<this._coordinates.length;e++)t.expandToInclude(this._coordinates[e]);return t}copy(){const t=new Array(this.size()).fill(null);for(let e=0;e<this._coordinates.length;e++){const s=this.createCoordinate();s.setCoordinate(this._coordinates[e]),t[e]=s}return new pt(t,this._dimension,this._measures)}toString(){if(this._coordinates.length>0){const t=new _t(17*this._coordinates.length);t.append("("),t.append(this._coordinates[0]);for(let e=1;e<this._coordinates.length;e++)t.append(", "),t.append(this._coordinates[e]);return t.append(")"),t.toString()}return"()"}getY(t){return this._coordinates[t].y}toCoordinateArray(){return this._coordinates}getM(t){return this.hasM()?this._coordinates[t].getM():l.NaN}setOrdinate(t,e,s){switch(e){case at.X:this._coordinates[t].x=s;break;case at.Y:this._coordinates[t].y=s;break;default:this._coordinates[t].setOrdinate(e,s)}}getZ(t){return this.hasZ()?this._coordinates[t].getZ():l.NaN}size(){return this._coordinates.length}getOrdinate(t,e){switch(e){case at.X:return this._coordinates[t].x;case at.Y:return this._coordinates[t].y;default:return this._coordinates[t].getOrdinate(e)}}get interfaces_(){return[at,r]}}class ft{static instance(){return ft.instanceObject}readResolve(){return ft.instance()}create(){if(1===arguments.length){if(arguments[0]instanceof Array){return new pt(arguments[0])}if(w(arguments[0],at)){return new pt(arguments[0])}}else{if(2===arguments.length){let t=arguments[1];return t>3&&(t=3),t<2&&(t=2),new pt(arguments[0],t)}if(3===arguments.length){let t=arguments[2],e=arguments[1]-t;return t>1&&(t=1),e>3&&(e=3),e<2&&(e=2),new pt(arguments[0],e+t,t)}}}get interfaces_(){return[dt,r]}}ft.instanceObject=new ft;class mt{static sort(){const t=arguments[0];if(1===arguments.length)t.sort(((t,e)=>t.compareTo(e)));else if(2===arguments.length)t.sort(((t,e)=>arguments[1].compare(t,e)));else if(3===arguments.length){const e=t.slice(arguments[1],arguments[2]);e.sort();const s=t.slice(0,arguments[1]).concat(e,t.slice(arguments[2],t.length));t.splice(0,t.length);for(const e of s)t.push(e)}else if(4===arguments.length){const e=t.slice(arguments[1],arguments[2]);e.sort(((t,e)=>arguments[3].compare(t,e)));const s=t.slice(0,arguments[1]).concat(e,t.slice(arguments[2],t.length));t.splice(0,t.length);for(const e of s)t.push(e)}}static asList(t){const e=new P;for(const s of t)e.add(s);return e}static copyOf(t,e){return t.slice(0,e)}}class yt extends I{constructor(){super(),yt.constructor_.apply(this,arguments)}static constructor_(){if(this._geometries=null,0===arguments.length);else if(2===arguments.length){let t=arguments[0],s=arguments[1];if(I.constructor_.call(this,s),null===t&&(t=[]),I.hasNullElements(t))throw new e("geometries must not contain null elements");this._geometries=t}}computeEnvelopeInternal(){const t=new y;for(let e=0;e<this._geometries.length;e++)t.expandToInclude(this._geometries[e].getEnvelopeInternal());return t}getGeometryN(t){return this._geometries[t]}getCoordinates(){const t=new Array(this.getNumPoints()).fill(null);let e=-1;for(let s=0;s<this._geometries.length;s++){const i=this._geometries[s].getCoordinates();for(let s=0;s<i.length;s++)e++,t[e]=i[s]}return t}getArea(){let t=0;for(let e=0;e<this._geometries.length;e++)t+=this._geometries[e].getArea();return t}copyInternal(){const t=new Array(this._geometries.length).fill(null);for(let e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new yt(t,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof I){const t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;const s=t;if(this._geometries.length!==s._geometries.length)return!1;for(let t=0;t<this._geometries.length;t++)if(!this._geometries[t].equalsExact(s._geometries[t],e))return!1;return!0}return super.equalsExact.apply(this,arguments)}reverseInternal(){const t=this._geometries.length,e=new P(t);for(let s=0;s<t;s++)e.add(this._geometries[s].reverse());return this.getFactory().buildGeometry(e)}getTypeCode(){return I.TYPECODE_GEOMETRYCOLLECTION}getDimension(){let t=nt.FALSE;for(let e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getDimension());return t}getNumGeometries(){return this._geometries.length}getBoundary(){return I.checkNotGeometryCollection(this),u.shouldNeverReachHere(),null}getGeometryType(){return I.TYPENAME_GEOMETRYCOLLECTION}isEmpty(){for(let t=0;t<this._geometries.length;t++)if(!this._geometries[t].isEmpty())return!1;return!0}normalize(){for(let t=0;t<this._geometries.length;t++)this._geometries[t].normalize();mt.sort(this._geometries)}getCoordinate(){return this.isEmpty()?null:this._geometries[0].getCoordinate()}getBoundaryDimension(){let t=nt.FALSE;for(let e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getBoundaryDimension());return t}getLength(){let t=0;for(let e=0;e<this._geometries.length;e++)t+=this._geometries[e].getLength();return t}getNumPoints(){let t=0;for(let e=0;e<this._geometries.length;e++)t+=this._geometries[e].getNumPoints();return t}compareToSameClass(){if(1===arguments.length){const t=arguments[0],e=new L(mt.asList(this._geometries)),s=new L(mt.asList(t._geometries));return this.compare(e,s)}if(2===arguments.length){const t=arguments[1],e=arguments[0],s=this.getNumGeometries(),i=e.getNumGeometries();let n=0;for(;n<s&&n<i;){const s=this.getGeometryN(n),i=e.getGeometryN(n),r=s.compareToSameClass(i,t);if(0!==r)return r;n++}return n<s?1:n<i?-1:0}}apply(){if(w(arguments[0],rt)){const t=arguments[0];for(let e=0;e<this._geometries.length;e++)this._geometries[e].apply(t)}else if(w(arguments[0],ct)){const t=arguments[0];if(0===this._geometries.length)return null;for(let e=0;e<this._geometries.length&&(this._geometries[e].apply(t),!t.isDone());e++);t.isGeometryChanged()&&this.geometryChanged()}else if(w(arguments[0],ht)){const t=arguments[0];t.filter(this);for(let e=0;e<this._geometries.length;e++)this._geometries[e].apply(t)}else if(w(arguments[0],s)){const t=arguments[0];t.filter(this);for(let e=0;e<this._geometries.length;e++)this._geometries[e].apply(t)}}}class It{}class Et extends yt{constructor(){super(),Et.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];yt.constructor_.call(this,t,e)}copyInternal(){const t=new Array(this._geometries.length).fill(null);for(let e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new Et(t,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof I){const t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&super.equalsExact.call(this,t,e)}return super.equalsExact.apply(this,arguments)}getBoundaryDimension(){return 1}getTypeCode(){return I.TYPECODE_MULTIPOLYGON}getDimension(){return 2}getBoundary(){if(this.isEmpty())return this.getFactory().createMultiLineString();const t=new P;for(let e=0;e<this._geometries.length;e++){const s=this._geometries[e].getBoundary();for(let e=0;e<s.getNumGeometries();e++)t.add(s.getGeometryN(e))}const e=new Array(t.size()).fill(null);return this.getFactory().createMultiLineString(t.toArray(e))}getGeometryType(){return I.TYPENAME_MULTIPOLYGON}get interfaces_(){return[It]}}class xt extends q{constructor(){super(),this.map=new Map}get(t){return this.map.get(t)||null}put(t,e){return this.map.set(t,e),e}values(){const t=new P,e=this.map.values();let s=e.next();for(;!s.done;)t.add(s.value),s=e.next();return t}entrySet(){const t=new Y;return this.map.entries().forEach((e=>t.add(e))),t}size(){return this.map.size()}}class Nt{constructor(){Nt.constructor_.apply(this,arguments)}static constructor_(){if(this._modelType=null,this._scale=null,0===arguments.length)this._modelType=Nt.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof Tt){const t=arguments[0];this._modelType=t,t===Nt.FIXED&&this.setScale(1)}else if("number"==typeof arguments[0]){const t=arguments[0];this._modelType=Nt.FIXED,this.setScale(t)}else if(arguments[0]instanceof Nt){const t=arguments[0];this._modelType=t._modelType,this._scale=t._scale}}static mostPrecise(t,e){return t.compareTo(e)>=0?t:e}equals(t){if(!(t instanceof Nt))return!1;const e=t;return this._modelType===e._modelType&&this._scale===e._scale}compareTo(t){const e=t,s=this.getMaximumSignificantDigits(),i=e.getMaximumSignificantDigits();return G.compare(s,i)}getType(){return this._modelType}toString(){let t="UNKNOWN";return this._modelType===Nt.FLOATING?t="Floating":this._modelType===Nt.FLOATING_SINGLE?t="Floating-Single":this._modelType===Nt.FIXED&&(t="Fixed (Scale="+this.getScale()+")"),t}makePrecise(){if("number"==typeof arguments[0]){const t=arguments[0];if(l.isNaN(t))return t;if(this._modelType===Nt.FLOATING_SINGLE){return t}return this._modelType===Nt.FIXED?Math.round(t*this._scale)/this._scale:t}if(arguments[0]instanceof f){const t=arguments[0];if(this._modelType===Nt.FLOATING)return null;t.x=this.makePrecise(t.x),t.y=this.makePrecise(t.y)}}getMaximumSignificantDigits(){let t=16;return this._modelType===Nt.FLOATING?t=16:this._modelType===Nt.FLOATING_SINGLE?t=6:this._modelType===Nt.FIXED&&(t=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),t}setScale(t){this._scale=Math.abs(t)}getScale(){return this._scale}isFloating(){return this._modelType===Nt.FLOATING||this._modelType===Nt.FLOATING_SINGLE}get interfaces_(){return[r,i]}}class Tt{constructor(){Tt.constructor_.apply(this,arguments)}static constructor_(){this._name=null;const t=arguments[0];this._name=t,Tt.nameToTypeMap.put(t,this)}readResolve(){return Tt.nameToTypeMap.get(this._name)}toString(){return this._name}get interfaces_(){return[r]}}Tt.nameToTypeMap=new xt,Nt.Type=Tt,Nt.FIXED=new Tt("FIXED"),Nt.FLOATING=new Tt("FLOATING"),Nt.FLOATING_SINGLE=new Tt("FLOATING SINGLE"),Nt.maximumPreciseValue=9007199254740992;class Rt extends yt{constructor(){super(),Rt.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];yt.constructor_.call(this,t,e)}copyInternal(){const t=new Array(this._geometries.length).fill(null);for(let e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new Rt(t,this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof I){const t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&super.equalsExact.call(this,t,e)}return super.equalsExact.apply(this,arguments)}getBoundaryDimension(){return this.isClosed()?nt.FALSE:0}isClosed(){if(this.isEmpty())return!1;for(let t=0;t<this._geometries.length;t++)if(!this._geometries[t].isClosed())return!1;return!0}getTypeCode(){return I.TYPECODE_MULTILINESTRING}getDimension(){return 1}getBoundary(){throw new N}getGeometryType(){return I.TYPENAME_MULTILINESTRING}get interfaces_(){return[ot]}}class Lt{}class Ct extends t{constructor(t){super(t),this.name=Object.keys({IllegalStateException:Ct})[0]}}class St extends I{constructor(){super(),St.constructor_.apply(this,arguments)}static constructor_(){this._coordinates=null;const t=arguments[0],e=arguments[1];I.constructor_.call(this,e),this.init(t)}computeEnvelopeInternal(){if(this.isEmpty())return new y;const t=new y;return t.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0)),t}getCoordinates(){return this.isEmpty()?[]:[this.getCoordinate()]}copyInternal(){return new St(this._coordinates.copy(),this._factory)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof I){const t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&(!(!this.isEmpty()||!t.isEmpty())||this.isEmpty()===t.isEmpty()&&this.equal(t.getCoordinate(),this.getCoordinate(),e))}return super.equalsExact.apply(this,arguments)}reverseInternal(){return this.getFactory().createPoint(this._coordinates.copy())}getTypeCode(){return I.TYPECODE_POINT}getDimension(){return 0}getNumPoints(){return this.isEmpty()?0:1}getX(){if(null===this.getCoordinate())throw new Ct("getX called on empty Point");return this.getCoordinate().x}getBoundary(){return this.getFactory().createGeometryCollection()}getGeometryType(){return I.TYPENAME_POINT}getCoordinateSequence(){return this._coordinates}getY(){if(null===this.getCoordinate())throw new Ct("getY called on empty Point");return this.getCoordinate().y}isSimple(){return!0}normalize(){}getCoordinate(){return 0!==this._coordinates.size()?this._coordinates.getCoordinate(0):null}getBoundaryDimension(){return nt.FALSE}compareToSameClass(){if(1===arguments.length){const t=arguments[0];return this.getCoordinate().compareTo(t.getCoordinate())}if(2===arguments.length){const t=arguments[0];return arguments[1].compare(this._coordinates,t._coordinates)}}apply(){if(w(arguments[0],rt)){const t=arguments[0];if(this.isEmpty())return null;t.filter(this.getCoordinate())}else if(w(arguments[0],ct)){const t=arguments[0];if(this.isEmpty())return null;t.filter(this._coordinates,0),t.isGeometryChanged()&&this.geometryChanged()}else if(w(arguments[0],ht)){arguments[0].filter(this)}else if(w(arguments[0],s)){arguments[0].filter(this)}}isEmpty(){return 0===this._coordinates.size()}init(t){null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),u.isTrue(t.size()<=1),this._coordinates=t}get interfaces_(){return[Lt]}}class wt{static ofRingSigned(){if(arguments[0]instanceof Array){const t=arguments[0];if(t.length<3)return 0;let e=0;const s=t[0].x;for(let i=1;i<t.length-1;i++){const n=t[i].x-s,r=t[i+1].y;e+=n*(t[i-1].y-r)}return e/2}if(w(arguments[0],at)){const t=arguments[0],e=t.size();if(e<3)return 0;const s=new f,i=new f,n=new f;t.getCoordinate(0,i),t.getCoordinate(1,n);const r=i.x;n.x-=r;let o=0;for(let a=1;a<e-1;a++)s.y=i.y,i.x=n.x,i.y=n.y,t.getCoordinate(a+1,n),n.x-=r,o+=i.x*(s.y-n.y);return o/2}}static ofRing(){if(arguments[0]instanceof Array){const t=arguments[0];return Math.abs(wt.ofRingSigned(t))}if(w(arguments[0],at)){const t=arguments[0];return Math.abs(wt.ofRingSigned(t))}}}class Ot{constructor(t){this.str=t}append(t){this.str+=t}setCharAt(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)}toString(){return this.str}}class bt{constructor(){bt.constructor_.apply(this,arguments)}static constructor_(){if(this._hi=0,this._lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if("number"==typeof arguments[0]){const t=arguments[0];this.init(t)}else if(arguments[0]instanceof bt){const t=arguments[0];this.init(t)}else if("string"==typeof arguments[0]){const t=arguments[0];bt.constructor_.call(this,bt.parse(t))}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.init(t,e)}}static determinant(){if("number"==typeof arguments[3]&&"number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];return bt.determinant(bt.valueOf(t),bt.valueOf(e),bt.valueOf(s),bt.valueOf(i))}if(arguments[3]instanceof bt&&arguments[2]instanceof bt&&arguments[0]instanceof bt&&arguments[1]instanceof bt){const t=arguments[1],e=arguments[2],s=arguments[3];return arguments[0].multiply(s).selfSubtract(t.multiply(e))}}static sqr(t){return bt.valueOf(t).selfMultiply(t)}static valueOf(){if("string"==typeof arguments[0]){const t=arguments[0];return bt.parse(t)}if("number"==typeof arguments[0]){return new bt(arguments[0])}}static sqrt(t){return bt.valueOf(t).sqrt()}static parse(t){let e=0;const s=t.length;for(;it.isWhitespace(t.charAt(e));)e++;let i=!1;if(e<s){const s=t.charAt(e);"-"!==s&&"+"!==s||(e++,"-"===s&&(i=!0))}const n=new bt;let r=0,o=0,a=0,l=!1;for(;!(e>=s);){const s=t.charAt(e);if(e++,it.isDigit(s)){const t=s-"0";n.selfMultiply(bt.TEN),n.selfAdd(t),r++}else{if("."!==s){if("e"===s||"E"===s){const s=t.substring(e);try{a=G.parseInt(s)}catch(e){throw e instanceof NumberFormatException?new NumberFormatException("Invalid exponent "+s+" in string "+t):e}break}throw new NumberFormatException("Unexpected character '"+s+"' at position "+e+" in string "+t)}o=r,l=!0}}let h=n;l||(o=r);const c=r-o-a;if(0===c)h=n;else if(c>0){const t=bt.TEN.pow(c);h=n.divide(t)}else if(c<0){const t=bt.TEN.pow(-c);h=n.multiply(t)}return i?h.negate():h}static createNaN(){return new bt(l.NaN,l.NaN)}static copy(t){return new bt(t)}static magnitude(t){const e=Math.abs(t),s=Math.log(e)/Math.log(10);let i=Math.trunc(Math.floor(s));return 10*Math.pow(10,i)<=e&&(i+=1),i}static stringOfChar(t,e){const s=new Ot;for(let i=0;i<e;i++)s.append(t);return s.toString()}le(t){return this._hi<t._hi||this._hi===t._hi&&this._lo<=t._lo}extractSignificantDigits(t,e){let s=this.abs(),i=bt.magnitude(s._hi);const n=bt.TEN.pow(i);s=s.divide(n),s.gt(bt.TEN)?(s=s.divide(bt.TEN),i+=1):s.lt(bt.ONE)&&(s=s.multiply(bt.TEN),i-=1);const r=i+1,o=new Ot,a=bt.MAX_PRINT_DIGITS-1;for(let e=0;e<=a;e++){t&&e===r&&o.append(".");const i=Math.trunc(s._hi);if(i<0)break;let n=!1,l=0;i>9?(n=!0,l="9"):l="0"+i,o.append(l),s=s.subtract(bt.valueOf(i)).multiply(bt.TEN),n&&s.selfAdd(bt.TEN);let h=!0;const c=bt.magnitude(s._hi);if(c<0&&Math.abs(c)>=a-e&&(h=!1),!h)break}return e[0]=i,o.toString()}sqr(){return this.multiply(this)}getSpecialNumberString(){return this.isZero()?"0.0":this.isNaN()?"NaN ":null}setValue(){if(arguments[0]instanceof bt){const t=arguments[0];return this.init(t),this}if("number"==typeof arguments[0]){const t=arguments[0];return this.init(t),this}}multiply(){if(arguments[0]instanceof bt){const t=arguments[0];return t.isNaN()?bt.createNaN():bt.copy(this).selfMultiply(t)}if("number"==typeof arguments[0]){const t=arguments[0];return l.isNaN(t)?bt.createNaN():bt.copy(this).selfMultiply(t,0)}}isNaN(){return l.isNaN(this._hi)}reciprocal(){let t=null,e=null,s=null,i=null,n=null,r=null,o=null,a=null;n=1/this._hi,r=bt.SPLIT*n,t=r-n,a=bt.SPLIT*this._hi,t=r-t,e=n-t,s=a-this._hi,o=n*this._hi,s=a-s,i=this._hi-s,a=t*s-o+t*i+e*s+e*i,r=(1-o-a-n*this._lo)/this._hi;const l=n+r;return new bt(l,n-l+r)}doubleValue(){return this._hi+this._lo}subtract(){if(arguments[0]instanceof bt){const t=arguments[0];return this.add(t.negate())}if("number"==typeof arguments[0]){const t=arguments[0];return this.add(-t)}}equals(){if(1===arguments.length&&arguments[0]instanceof bt){const t=arguments[0];return this._hi===t._hi&&this._lo===t._lo}}isZero(){return 0===this._hi&&0===this._lo}selfSubtract(){if(arguments[0]instanceof bt){const t=arguments[0];return this.isNaN()?this:this.selfAdd(-t._hi,-t._lo)}if("number"==typeof arguments[0]){const t=arguments[0];return this.isNaN()?this:this.selfAdd(-t,0)}}min(t){return this.le(t)?this:t}selfDivide(){if(1===arguments.length){if(arguments[0]instanceof bt){const t=arguments[0];return this.selfDivide(t._hi,t._lo)}if("number"==typeof arguments[0]){const t=arguments[0];return this.selfDivide(t,0)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];let s=null,i=null,n=null,r=null,o=null,a=null,l=null,h=null;return o=this._hi/t,a=bt.SPLIT*o,s=a-o,h=bt.SPLIT*t,s=a-s,i=o-s,n=h-t,l=o*t,n=h-n,r=t-n,h=s*n-l+s*r+i*n+i*r,a=(this._hi-l-h+this._lo-o*e)/t,h=o+a,this._hi=h,this._lo=o-h+a,this}}dump(){return"DD<"+this._hi+", "+this._lo+">"}divide(){if(arguments[0]instanceof bt){const t=arguments[0];let e=null,s=null,i=null,n=null,r=null,o=null,a=null,l=null;r=this._hi/t._hi,o=bt.SPLIT*r,e=o-r,l=bt.SPLIT*t._hi,e=o-e,s=r-e,i=l-t._hi,a=r*t._hi,i=l-i,n=t._hi-i,l=e*i-a+e*n+s*i+s*n,o=(this._hi-a-l+this._lo-r*t._lo)/t._hi,l=r+o;return new bt(l,r-l+o)}if("number"==typeof arguments[0]){const t=arguments[0];return l.isNaN(t)?bt.createNaN():bt.copy(this).selfDivide(t,0)}}ge(t){return this._hi>t._hi||this._hi===t._hi&&this._lo>=t._lo}pow(t){if(0===t)return bt.valueOf(1);let e=new bt(this),s=bt.valueOf(1),i=Math.abs(t);if(i>1)for(;i>0;)i%2==1&&s.selfMultiply(e),i/=2,i>0&&(e=e.sqr());else s=e;return t<0?s.reciprocal():s}ceil(){if(this.isNaN())return bt.NaN;const t=Math.ceil(this._hi);let e=0;return t===this._hi&&(e=Math.ceil(this._lo)),new bt(t,e)}compareTo(t){const e=t;return this._hi<e._hi?-1:this._hi>e._hi?1:this._lo<e._lo?-1:this._lo>e._lo?1:0}rint(){if(this.isNaN())return this;return this.add(.5).floor()}max(t){return this.ge(t)?this:t}sqrt(){if(this.isZero())return bt.valueOf(0);if(this.isNegative())return bt.NaN;const t=1/Math.sqrt(this._hi),e=this._hi*t,s=bt.valueOf(e),i=this.subtract(s.sqr())._hi*(.5*t);return s.add(i)}selfAdd(){if(1===arguments.length){if(arguments[0]instanceof bt){const t=arguments[0];return this.selfAdd(t._hi,t._lo)}if("number"==typeof arguments[0]){const t=arguments[0];let e=null,s=null,i=null,n=null,r=null,o=null;return i=this._hi+t,r=i-this._hi,n=i-r,n=t-r+(this._hi-n),o=n+this._lo,e=i+o,s=o+(i-e),this._hi=e+s,this._lo=s+(e-this._hi),this}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];let s=null,i=null,n=null,r=null,o=null,a=null,l=null,h=null;o=this._hi+t,n=this._lo+e,l=o-this._hi,h=n-this._lo,a=o-l,r=n-h,a=t-l+(this._hi-a),r=e-h+(this._lo-r),l=a+n,s=o+l,i=l+(o-s),l=r+i;const c=s+l,u=l+(s-c);return this._hi=c,this._lo=u,this}}selfMultiply(){if(1===arguments.length){if(arguments[0]instanceof bt){const t=arguments[0];return this.selfMultiply(t._hi,t._lo)}if("number"==typeof arguments[0]){const t=arguments[0];return this.selfMultiply(t,0)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];let s=null,i=null,n=null,r=null,o=null,a=null;o=bt.SPLIT*this._hi,s=o-this._hi,a=bt.SPLIT*t,s=o-s,i=this._hi-s,n=a-t,o=this._hi*t,n=a-n,r=t-n,a=s*n-o+s*r+i*n+i*r+(this._hi*e+this._lo*t);const l=o+a;s=o-l;const h=a+s;return this._hi=l,this._lo=h,this}}selfSqr(){return this.selfMultiply(this)}floor(){if(this.isNaN())return bt.NaN;const t=Math.floor(this._hi);let e=0;return t===this._hi&&(e=Math.floor(this._lo)),new bt(t,e)}negate(){return this.isNaN()?this:new bt(-this._hi,-this._lo)}clone(){try{return null}catch(t){if(t instanceof CloneNotSupportedException)return null;throw t}}intValue(){return Math.trunc(this._hi)}toString(){const t=bt.magnitude(this._hi);return t>=-3&&t<=20?this.toStandardNotation():this.toSciNotation()}toStandardNotation(){const t=this.getSpecialNumberString();if(null!==t)return t;const e=new Array(1).fill(null),s=this.extractSignificantDigits(!0,e),i=e[0]+1;let n=s;if("."===s.charAt(0))n="0"+s;else if(i<0)n="0."+bt.stringOfChar("0",-i)+s;else if(-1===s.indexOf(".")){const t=i-s.length;n=s+bt.stringOfChar("0",t)+".0"}return this.isNegative()?"-"+n:n}toSciNotation(){if(this.isZero())return bt.SCI_NOT_ZERO;const t=this.getSpecialNumberString();if(null!==t)return t;const e=new Array(1).fill(null),s=this.extractSignificantDigits(!1,e),i=bt.SCI_NOT_EXPONENT_CHAR+e[0];if("0"===s.charAt(0))throw new Ct("Found leading zero: "+s);let n="";s.length>1&&(n=s.substring(1));const r=s.charAt(0)+"."+n;return this.isNegative()?"-"+r+i:r+i}abs(){return this.isNaN()?bt.NaN:this.isNegative()?this.negate():new bt(this)}isPositive(){return this._hi>0||0===this._hi&&this._lo>0}lt(t){return this._hi<t._hi||this._hi===t._hi&&this._lo<t._lo}add(){if(arguments[0]instanceof bt){const t=arguments[0];return bt.copy(this).selfAdd(t)}if("number"==typeof arguments[0]){const t=arguments[0];return bt.copy(this).selfAdd(t)}}init(){if(1===arguments.length){if("number"==typeof arguments[0]){const t=arguments[0];this._hi=t,this._lo=0}else if(arguments[0]instanceof bt){const t=arguments[0];this._hi=t._hi,this._lo=t._lo}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this._hi=t,this._lo=e}}gt(t){return this._hi>t._hi||this._hi===t._hi&&this._lo>t._lo}isNegative(){return this._hi<0||0===this._hi&&this._lo<0}trunc(){return this.isNaN()?bt.NaN:this.isPositive()?this.floor():this.ceil()}signum(){return this._hi>0?1:this._hi<0?-1:this._lo>0?1:this._lo<0?-1:0}get interfaces_(){return[r,i,n]}}bt.PI=new bt(3.141592653589793,12246467991473532e-32),bt.TWO_PI=new bt(6.283185307179586,24492935982947064e-32),bt.PI_2=new bt(1.5707963267948966,6123233995736766e-32),bt.E=new bt(2.718281828459045,14456468917292502e-32),bt.NaN=new bt(l.NaN,l.NaN),bt.EPS=123259516440783e-46,bt.SPLIT=134217729,bt.MAX_PRINT_DIGITS=32,bt.TEN=bt.valueOf(10),bt.ONE=bt.valueOf(1),bt.SCI_NOT_EXPONENT_CHAR="E",bt.SCI_NOT_ZERO="0.0E0";class Pt{static orientationIndex(t,e,s){const i=Pt.orientationIndexFilter(t,e,s);if(i<=1)return i;const n=bt.valueOf(e.x).selfAdd(-t.x),r=bt.valueOf(e.y).selfAdd(-t.y),o=bt.valueOf(s.x).selfAdd(-e.x),a=bt.valueOf(s.y).selfAdd(-e.y);return n.selfMultiply(a).selfSubtract(r.selfMultiply(o)).signum()}static signOfDet2x2(){if(arguments[3]instanceof bt&&arguments[2]instanceof bt&&arguments[0]instanceof bt&&arguments[1]instanceof bt){const t=arguments[1],e=arguments[2],s=arguments[3];return arguments[0].multiply(s).selfSubtract(t.multiply(e)).signum()}if("number"==typeof arguments[3]&&"number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=bt.valueOf(t),r=bt.valueOf(e),o=bt.valueOf(s),a=bt.valueOf(i);return n.multiply(a).selfSubtract(r.multiply(o)).signum()}}static intersection(t,e,s,i){const n=new bt(t.y).selfSubtract(e.y),r=new bt(e.x).selfSubtract(t.x),o=new bt(t.x).selfMultiply(e.y).selfSubtract(new bt(e.x).selfMultiply(t.y)),a=new bt(s.y).selfSubtract(i.y),h=new bt(i.x).selfSubtract(s.x),c=new bt(s.x).selfMultiply(i.y).selfSubtract(new bt(i.x).selfMultiply(s.y)),u=r.multiply(c).selfSubtract(h.multiply(o)),g=a.multiply(o).selfSubtract(n.multiply(c)),d=n.multiply(h).selfSubtract(a.multiply(r)),_=u.selfDivide(d).doubleValue(),p=g.selfDivide(d).doubleValue();return l.isNaN(_)||l.isInfinite(_)||l.isNaN(p)||l.isInfinite(p)?null:new f(_,p)}static orientationIndexFilter(t,e,s){let i=null;const n=(t.x-s.x)*(e.y-s.y),r=(t.y-s.y)*(e.x-s.x),o=n-r;if(n>0){if(r<=0)return Pt.signum(o);i=n+r}else{if(!(n<0))return Pt.signum(o);if(r>=0)return Pt.signum(o);i=-n-r}const a=Pt.DP_SAFE_EPSILON*i;return o>=a||-o>=a?Pt.signum(o):2}static signum(t){return t>0?1:t<0?-1:0}}Pt.DP_SAFE_EPSILON=1e-15;class At{static isCCW(){if(arguments[0]instanceof Array){const t=arguments[0],s=t.length-1;if(s<3)throw new e("Ring has fewer than 4 points, so orientation cannot be determined");let i=t[0],n=0;for(let e=1;e<=s;e++){const s=t[e];s.y>i.y&&(i=s,n=e)}let r=n;do{r-=1,r<0&&(r=s)}while(t[r].equals2D(i)&&r!==n);let o=n;do{o=(o+1)%s}while(t[o].equals2D(i)&&o!==n);const a=t[r],l=t[o];if(a.equals2D(i)||l.equals2D(i)||a.equals2D(l))return!1;const h=At.index(a,i,l);let c=null;return c=0===h?a.x>l.x:h>0,c}if(w(arguments[0],at)){const t=arguments[0],s=t.size()-1;if(s<3)throw new e("Ring has fewer than 4 points, so orientation cannot be determined");let i=t.getCoordinate(0),n=0;for(let e=1;e<=s;e++){const s=t.getCoordinate(e);s.y>i.y&&(i=s,n=e)}let r=null,o=n;do{o-=1,o<0&&(o=s),r=t.getCoordinate(o)}while(r.equals2D(i)&&o!==n);let a=null,l=n;do{l=(l+1)%s,a=t.getCoordinate(l)}while(a.equals2D(i)&&l!==n);if(r.equals2D(i)||a.equals2D(i)||r.equals2D(a))return!1;const h=At.index(r,i,a);let c=null;return c=0===h?r.x>a.x:h>0,c}}static index(t,e,s){return Pt.orientationIndex(t,e,s)}}At.CLOCKWISE=-1,At.RIGHT=At.CLOCKWISE,At.COUNTERCLOCKWISE=1,At.LEFT=At.COUNTERCLOCKWISE,At.COLLINEAR=0,At.STRAIGHT=At.COLLINEAR;class Mt extends I{constructor(){super(),Mt.constructor_.apply(this,arguments)}static constructor_(){this._shell=null,this._holes=null;let t=arguments[0],s=arguments[1],i=arguments[2];if(I.constructor_.call(this,i),null===t&&(t=this.getFactory().createLinearRing()),null===s&&(s=[]),I.hasNullElements(s))throw new e("holes must not contain null elements");if(t.isEmpty()&&I.hasNonEmptyElements(s))throw new e("shell is empty but holes are not");this._shell=t,this._holes=s}computeEnvelopeInternal(){return this._shell.getEnvelopeInternal()}getCoordinates(){if(this.isEmpty())return[];const t=new Array(this.getNumPoints()).fill(null);let e=-1;const s=this._shell.getCoordinates();for(let i=0;i<s.length;i++)e++,t[e]=s[i];for(let s=0;s<this._holes.length;s++){const i=this._holes[s].getCoordinates();for(let s=0;s<i.length;s++)e++,t[e]=i[s]}return t}getArea(){let t=0;t+=wt.ofRing(this._shell.getCoordinateSequence());for(let e=0;e<this._holes.length;e++)t-=wt.ofRing(this._holes[e].getCoordinateSequence());return t}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof I){const t=arguments[0],e=arguments[1];if(!this.isEquivalentClass(t))return!1;const s=t,i=this._shell,n=s._shell;if(!i.equalsExact(n,e))return!1;if(this._holes.length!==s._holes.length)return!1;for(let t=0;t<this._holes.length;t++)if(!this._holes[t].equalsExact(s._holes[t],e))return!1;return!0}return super.equalsExact.apply(this,arguments)}reverseInternal(){const t=this.getExteriorRing().reverse(),e=new Array(this.getNumInteriorRing()).fill(null);for(let t=0;t<e.length;t++)e[t]=this.getInteriorRingN(t).reverse();return this.getFactory().createPolygon(t,e)}getTypeCode(){return I.TYPECODE_POLYGON}getDimension(){return 2}getBoundary(){if(this.isEmpty())return this.getFactory().createMultiLineString();const t=new Array(this._holes.length+1).fill(null);t[0]=this._shell;for(let e=0;e<this._holes.length;e++)t[e+1]=this._holes[e];return t.length<=1?this.getFactory().createLinearRing(t[0].getCoordinateSequence()):this.getFactory().createMultiLineString(t)}getGeometryType(){return I.TYPENAME_POLYGON}getExteriorRing(){return this._shell}copyInternal(){const t=this._shell.copy(),e=new Array(this._holes.length).fill(null);for(let t=0;t<this._holes.length;t++)e[t]=this._holes[t].copy();return new Mt(t,e,this._factory)}isRectangle(){if(0!==this.getNumInteriorRing())return!1;if(null===this._shell)return!1;if(5!==this._shell.getNumPoints())return!1;const t=this._shell.getCoordinateSequence(),e=this.getEnvelopeInternal();for(let s=0;s<5;s++){const i=t.getX(s);if(i!==e.getMinX()&&i!==e.getMaxX())return!1;const n=t.getY(s);if(n!==e.getMinY()&&n!==e.getMaxY())return!1}let s=t.getX(0),i=t.getY(0);for(let e=1;e<=4;e++){const n=t.getX(e),r=t.getY(e);if(n!==s===(r!==i))return!1;s=n,i=r}return!0}normalize(){if(0===arguments.length){this._shell=this.normalized(this._shell,!0);for(let t=0;t<this._holes.length;t++)this._holes[t]=this.normalized(this._holes[t],!1);mt.sort(this._holes)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];if(t.isEmpty())return null;const s=t.getCoordinateSequence(),i=lt.minCoordinateIndex(s,0,s.size()-2);lt.scroll(s,i,!0),At.isCCW(s)===e&&lt.reverse(s)}}getCoordinate(){return this._shell.getCoordinate()}getNumInteriorRing(){return this._holes.length}getBoundaryDimension(){return 1}getLength(){let t=0;t+=this._shell.getLength();for(let e=0;e<this._holes.length;e++)t+=this._holes[e].getLength();return t}getNumPoints(){let t=this._shell.getNumPoints();for(let e=0;e<this._holes.length;e++)t+=this._holes[e].getNumPoints();return t}convexHull(){return this.getExteriorRing().convexHull()}normalized(t,e){const s=t.copy();return this.normalize(s,e),s}compareToSameClass(){if(1===arguments.length){const t=arguments[0],e=this._shell,s=t._shell;return e.compareToSameClass(s)}if(2===arguments.length){const t=arguments[1],e=arguments[0],s=this._shell,i=e._shell,n=s.compareToSameClass(i,t);if(0!==n)return n;const r=this.getNumInteriorRing(),o=e.getNumInteriorRing();let a=0;for(;a<r&&a<o;){const s=this.getInteriorRingN(a),i=e.getInteriorRingN(a),n=s.compareToSameClass(i,t);if(0!==n)return n;a++}return a<r?1:a<o?-1:0}}apply(){if(w(arguments[0],rt)){const t=arguments[0];this._shell.apply(t);for(let e=0;e<this._holes.length;e++)this._holes[e].apply(t)}else if(w(arguments[0],ct)){const t=arguments[0];if(this._shell.apply(t),!t.isDone())for(let e=0;e<this._holes.length&&(this._holes[e].apply(t),!t.isDone());e++);t.isGeometryChanged()&&this.geometryChanged()}else if(w(arguments[0],ht)){arguments[0].filter(this)}else if(w(arguments[0],s)){const t=arguments[0];t.filter(this),this._shell.apply(t);for(let e=0;e<this._holes.length;e++)this._holes[e].apply(t)}}isEmpty(){return this._shell.isEmpty()}getInteriorRingN(t){return this._holes[t]}get interfaces_(){return[It]}}class Dt extends yt{constructor(){super(),Dt.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];yt.constructor_.call(this,t,e)}equalsExact(){if(2===arguments.length&&"number"==typeof arguments[1]&&arguments[0]instanceof I){const t=arguments[0],e=arguments[1];return!!this.isEquivalentClass(t)&&super.equalsExact.call(this,t,e)}return super.equalsExact.apply(this,arguments)}getTypeCode(){return I.TYPECODE_MULTIPOINT}getDimension(){return 0}getBoundary(){return this.getFactory().createGeometryCollection()}getGeometryType(){return I.TYPENAME_MULTIPOINT}copyInternal(){const t=new Array(this._geometries.length).fill(null);for(let e=0;e<t.length;e++)t[e]=this._geometries[e].copy();return new Dt(t,this._factory)}isValid(){return!0}getCoordinate(){if(1===arguments.length&&Number.isInteger(arguments[0])){const t=arguments[0];return this._geometries[t].getCoordinate()}return super.getCoordinate.apply(this,arguments)}getBoundaryDimension(){return nt.FALSE}get interfaces_(){return[Lt]}}class vt{constructor(){vt.constructor_.apply(this,arguments)}static constructor_(){if(this._precisionModel=null,this._coordinateSequenceFactory=null,this._SRID=null,0===arguments.length)vt.constructor_.call(this,new Nt,0);else if(1===arguments.length){if(w(arguments[0],dt)){const t=arguments[0];vt.constructor_.call(this,new Nt,0,t)}else if(arguments[0]instanceof Nt){const t=arguments[0];vt.constructor_.call(this,t,0,vt.getDefaultCoordinateSequenceFactory())}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];vt.constructor_.call(this,t,e,vt.getDefaultCoordinateSequenceFactory())}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._precisionModel=t,this._coordinateSequenceFactory=s,this._SRID=e}}static toMultiPolygonArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toGeometryArray(t){if(null===t)return null;const e=new Array(t.size()).fill(null);return t.toArray(e)}static getDefaultCoordinateSequenceFactory(){return ft.instance()}static toMultiLineStringArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toLineStringArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toMultiPointArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toLinearRingArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toPointArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static toPolygonArray(t){const e=new Array(t.size()).fill(null);return t.toArray(e)}static createPointFromInternalCoord(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)}createEmpty(t){switch(t){case-1:return this.createGeometryCollection();case 0:return this.createPoint();case 1:return this.createLineString();case 2:return this.createPolygon();default:throw new e("Invalid dimension: "+t)}}toGeometry(t){return t.isNull()?this.createPoint():t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new f(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new f(t.getMinX(),t.getMinY()),new f(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new f(t.getMinX(),t.getMinY()),new f(t.getMinX(),t.getMaxY()),new f(t.getMaxX(),t.getMaxY()),new f(t.getMaxX(),t.getMinY()),new f(t.getMinX(),t.getMinY())]),null)}createLineString(){if(0===arguments.length)return this.createLineString(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){const t=arguments[0];return this.createLineString(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(w(arguments[0],at)){return new ut(arguments[0],this)}}}createMultiLineString(){if(0===arguments.length)return new Rt(null,this);if(1===arguments.length){return new Rt(arguments[0],this)}}createPolygon(){if(0===arguments.length)return this.createPolygon(null,null);if(1===arguments.length){if(w(arguments[0],at)){const t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Array){const t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof gt){const t=arguments[0];return this.createPolygon(t,null)}}else if(2===arguments.length){return new Mt(arguments[0],arguments[1],this)}}getSRID(){return this._SRID}createGeometryCollection(){if(0===arguments.length)return new yt(null,this);if(1===arguments.length){return new yt(arguments[0],this)}}getPrecisionModel(){return this._precisionModel}createLinearRing(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){const t=arguments[0];return this.createLinearRing(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(w(arguments[0],at)){return new gt(arguments[0],this)}}}createMultiPolygon(){if(0===arguments.length)return new Et(null,this);if(1===arguments.length){return new Et(arguments[0],this)}}createMultiPoint(){if(0===arguments.length)return new Dt(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){return new Dt(arguments[0],this)}if(w(arguments[0],at)){const t=arguments[0];if(null===t)return this.createMultiPoint(new Array(0).fill(null));const e=new Array(t.size()).fill(null);for(let s=0;s<t.size();s++){const i=this.getCoordinateSequenceFactory().create(1,t.getDimension(),t.getMeasures());lt.copy(t,s,i,0,1),e[s]=this.createPoint(i)}return this.createMultiPoint(e)}}}buildGeometry(t){let e=null,s=!1,i=!1;for(let n=t.iterator();n.hasNext();){const t=n.next(),r=t.getTypeCode();null===e&&(e=r),r!==e&&(s=!0),t instanceof yt&&(i=!0)}if(null===e)return this.createGeometryCollection();if(s||i)return this.createGeometryCollection(vt.toGeometryArray(t));const n=t.iterator().next();if(t.size()>1){if(n instanceof Mt)return this.createMultiPolygon(vt.toPolygonArray(t));if(n instanceof ut)return this.createMultiLineString(vt.toLineStringArray(t));if(n instanceof St)return this.createMultiPoint(vt.toPointArray(t));u.shouldNeverReachHere("Unhandled geometry type: "+n.getGeometryType())}return n}createMultiPointFromCoords(t){return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)}createPoint(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof f){const t=arguments[0];return this.createPoint(null!==t?this.getCoordinateSequenceFactory().create([t]):null)}if(w(arguments[0],at)){return new St(arguments[0],this)}}}getCoordinateSequenceFactory(){return this._coordinateSequenceFactory}get interfaces_(){return[r]}}const Ft="XY",Gt="XYZ",qt="XYM",Bt="XYZM",Yt={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"},zt="EMPTY",Ut="Z",Xt="M",Vt=1,kt=2,Ht=3,Zt=4,Wt=5,jt=6;for(const t in Yt)Yt[t].toUpperCase();class Kt{constructor(t){this.wkt=t,this.index_=-1}isAlpha_(t){return t>="a"&&t<="z"||t>="A"&&t<="Z"}isNumeric_(t,e){return t>="0"&&t<="9"||"."==t&&!(void 0!==e&&e)}isWhiteSpace_(t){return" "==t||"\t"==t||"\r"==t||"\n"==t}nextChar_(){return this.wkt.charAt(++this.index_)}nextToken(){const t=this.nextChar_(),e=this.index_;let s,i=t;if("("==t)s=kt;else if(","==t)s=Wt;else if(")"==t)s=Ht;else if(this.isNumeric_(t)||"-"==t)s=Zt,i=this.readNumber_();else if(this.isAlpha_(t))s=Vt,i=this.readText_();else{if(this.isWhiteSpace_(t))return this.nextToken();if(""!==t)throw new Error("Unexpected character: "+t);s=jt}return{position:e,value:i,type:s}}readNumber_(){let t;const e=this.index_;let s=!1,i=!1;do{"."==t?s=!0:"e"!=t&&"E"!=t||(i=!0),t=this.nextChar_()}while(this.isNumeric_(t,s)||!i&&("e"==t||"E"==t)||i&&("-"==t||"+"==t));return parseFloat(this.wkt.substring(e,this.index_--))}readText_(){let t;const e=this.index_;do{t=this.nextChar_()}while(this.isAlpha_(t));return this.wkt.substring(e,this.index_--).toUpperCase()}}class Qt{constructor(t,e){this.lexer_=t,this.token_,this.layout_=Ft,this.factory=e}consume_(){this.token_=this.lexer_.nextToken()}isTokenType(t){return this.token_.type==t}match(t){const e=this.isTokenType(t);return e&&this.consume_(),e}parse(){this.consume_();return this.parseGeometry_()}parseGeometryLayout_(){let t=Ft;const e=this.token_;if(this.isTokenType(Vt)){const s=e.value;s===Ut?t=Gt:s===Xt?t=qt:"ZM"===s&&(t=Bt),t!==Ft&&this.consume_()}return t}parseGeometryCollectionText_(){if(this.match(kt)){const t=[];do{t.push(this.parseGeometry_())}while(this.match(Wt));if(this.match(Ht))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePointText_(){if(this.match(kt)){const t=this.parsePoint_();if(this.match(Ht))return t}else if(this.isEmptyGeometry_())return null;throw new Error(this.formatErrorMessage_())}parseLineStringText_(){if(this.match(kt)){const t=this.parsePointList_();if(this.match(Ht))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePolygonText_(){if(this.match(kt)){const t=this.parseLineStringTextList_();if(this.match(Ht))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiPointText_(){if(this.match(kt)){let t;if(t=this.token_.type==kt?this.parsePointTextList_():this.parsePointList_(),this.match(Ht))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiLineStringText_(){if(this.match(kt)){const t=this.parseLineStringTextList_();if(this.match(Ht))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parseMultiPolygonText_(){if(this.match(kt)){const t=this.parsePolygonTextList_();if(this.match(Ht))return t}else if(this.isEmptyGeometry_())return[];throw new Error(this.formatErrorMessage_())}parsePoint_(){const t=[],e=this.layout_.length;for(let s=0;s<e;++s){const e=this.token_;if(!this.match(Zt))break;t.push(e.value)}if(t.length==e)return t;throw new Error(this.formatErrorMessage_())}parsePointList_(){const t=[this.parsePoint_()];for(;this.match(Wt);)t.push(this.parsePoint_());return t}parsePointTextList_(){const t=[this.parsePointText_()];for(;this.match(Wt);)t.push(this.parsePointText_());return t}parseLineStringTextList_(){const t=[this.parseLineStringText_()];for(;this.match(Wt);)t.push(this.parseLineStringText_());return t}parsePolygonTextList_(){const t=[this.parsePolygonText_()];for(;this.match(Wt);)t.push(this.parsePolygonText_());return t}isEmptyGeometry_(){const t=this.isTokenType(Vt)&&this.token_.value==zt;return t&&this.consume_(),t}formatErrorMessage_(){return"Unexpected `"+this.token_.value+"` at position "+this.token_.position+" in `"+this.lexer_.wkt+"`"}parseGeometry_(){const t=this.factory,e=t=>t?new f(...t):new f,s=s=>{const i=s.map((s=>t.createLinearRing(s.map(e))));return i.length>1?t.createPolygon(i[0],i.slice(1)):1===i.length?t.createPolygon(i[0]):t.createPolygon()},i=this.token_;if(this.match(Vt)){const n=i.value;if(this.layout_=this.parseGeometryLayout_(),"GEOMETRYCOLLECTION"==n){const e=this.parseGeometryCollectionText_();return t.createGeometryCollection(e)}switch(n){case"POINT":{const e=this.parsePointText_();return e?t.createPoint(new f(...e)):t.createPoint()}case"LINESTRING":{const s=this.parseLineStringText_().map(e);return t.createLineString(s)}case"LINEARRING":{const s=this.parseLineStringText_().map(e);return t.createLinearRing(s)}case"POLYGON":{const e=this.parsePolygonText_();return e&&0!==e.length?s(e):t.createPolygon()}case"MULTIPOINT":{const s=this.parseMultiPointText_();if(!s||0===s.length)return t.createMultiPoint();const i=s.map(e).map((e=>t.createPoint(e)));return t.createMultiPoint(i)}case"MULTILINESTRING":{const s=this.parseMultiLineStringText_().map((s=>t.createLineString(s.map(e))));return t.createMultiLineString(s)}case"MULTIPOLYGON":{const e=this.parseMultiPolygonText_();if(!e||0===e.length)return t.createMultiPolygon();const i=e.map(s);return t.createMultiPolygon(i)}default:throw new Error("Invalid geometry type: "+n)}}throw new Error(this.formatErrorMessage_())}}function Jt(t){if(t.isEmpty())return"";const e=t.getCoordinate(),s=[e.x,e.y];return void 0===e.z||Number.isNaN(e.z)||s.push(e.z),void 0===e.m||Number.isNaN(e.m)||s.push(e.m),s.join(" ")}function $t(t){const e=t.getCoordinates().map((t=>{const e=[t.x,t.y];return void 0===t.z||Number.isNaN(t.z)||e.push(t.z),void 0===t.m||Number.isNaN(t.m)||e.push(t.m),e})),s=[];for(let t=0,i=e.length;t<i;++t)s.push(e[t].join(" "));return s.join(", ")}function te(t){const e=[];e.push("("+$t(t.getExteriorRing())+")");for(let s=0,i=t.getNumInteriorRing();s<i;++s)e.push("("+$t(t.getInteriorRingN(s))+")");return e.join(", ")}const ee={Point:Jt,LineString:$t,LinearRing:$t,Polygon:te,MultiPoint:function(t){const e=[];for(let s=0,i=t.getNumGeometries();s<i;++s)e.push("("+Jt(t.getGeometryN(s))+")");return e.join(", ")},MultiLineString:function(t){const e=[];for(let s=0,i=t.getNumGeometries();s<i;++s)e.push("("+$t(t.getGeometryN(s))+")");return e.join(", ")},MultiPolygon:function(t){const e=[];for(let s=0,i=t.getNumGeometries();s<i;++s)e.push("("+te(t.getGeometryN(s))+")");return e.join(", ")},GeometryCollection:function(t){const e=[];for(let s=0,i=t.getNumGeometries();s<i;++s)e.push(se(t.getGeometryN(s)));return e.join(", ")}};function se(t){let e=t.getGeometryType();const s=ee[e];e=e.toUpperCase();const i=function(t){let e="";if(t.isEmpty())return e;const s=t.getCoordinate();return void 0===s.z||Number.isNaN(s.z)||(e+=Ut),void 0===s.m||Number.isNaN(s.m)||(e+=Xt),e}(t);if(i.length>0&&(e+=" "+i),t.isEmpty())return e+" "+zt;return e+" ("+s(t)+")"}class ie{constructor(t){this.geometryFactory=t||new vt,this.precisionModel=this.geometryFactory.getPrecisionModel()}read(t){const e=new Kt(t);return new Qt(e,this.geometryFactory).parse()}write(t){return se(t)}}class ne{constructor(t){this.parser=new ie(t)}write(t){return this.parser.write(t)}static toLineString(t,e){if(2!==arguments.length)throw new Error("Not implemented");return"LINESTRING ( "+t.x+" "+t.y+", "+e.x+" "+e.y+" )"}}class re{static octant(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],s=arguments[1];if(0===t&&0===s)throw new e("Cannot compute the octant for point ( "+t+", "+s+" )");const i=Math.abs(t),n=Math.abs(s);return t>=0?s>=0?i>=n?0:1:i>=n?7:6:s>=0?i>=n?3:2:i>=n?4:5}if(arguments[0]instanceof f&&arguments[1]instanceof f){const t=arguments[0],s=arguments[1],i=s.x-t.x,n=s.y-t.y;if(0===i&&0===n)throw new e("Cannot compute the octant for two identical points "+t);return re.octant(i,n)}}}class oe{getCoordinates(){}size(){}getCoordinate(t){}isClosed(){}setData(t){}getData(){}}class ae{addIntersection(t,e){}get interfaces_(){return[oe]}}class le{constructor(){le.constructor_.apply(this,arguments)}static constructor_(){this._nodeList=new W(this),this._pts=null,this._data=null;const t=arguments[0],e=arguments[1];this._pts=t,this._data=e}static getNodedSubstrings(){if(1===arguments.length){const t=arguments[0],e=new P;return le.getNodedSubstrings(t,e),e}if(2===arguments.length){const t=arguments[1];for(let e=arguments[0].iterator();e.hasNext();){e.next().getNodeList().addSplitEdges(t)}}}getCoordinates(){return this._pts}size(){return this._pts.length}getCoordinate(t){return this._pts[t]}isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1])}getSegmentOctant(t){return t===this._pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))}toString(){return ne.toLineString(new pt(this._pts))}getNodeList(){return this._nodeList}addIntersectionNode(t,e){let s=e;const i=s+1;if(i<this._pts.length){const e=this._pts[i];t.equals2D(e)&&(s=i)}return this._nodeList.add(t,s)}addIntersections(t,e,s){for(let i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,s,i)}setData(t){this._data=t}safeOctant(t,e){return t.equals2D(e)?0:re.octant(t,e)}getData(){return this._data}addIntersection(){if(2===arguments.length){const t=arguments[0],e=arguments[1];this.addIntersectionNode(t,e)}else if(4===arguments.length){const t=arguments[1],e=arguments[3],s=new f(arguments[0].getIntersection(e));this.addIntersection(s,t)}}get interfaces_(){return[ae]}}class he{getNodedSubstrings(){}computeNodes(t){}}class ce{constructor(){ce.constructor_.apply(this,arguments)}static constructor_(){if(this._noder=null,this._scaleFactor=null,this._offsetX=null,this._offsetY=null,this._isScaled=!1,2===arguments.length){const t=arguments[0],e=arguments[1];ce.constructor_.call(this,t,e,0,0)}else if(4===arguments.length){const t=arguments[0],e=arguments[1];this._noder=t,this._scaleFactor=e,this._isScaled=!this.isIntegerPrecision()}}rescale(){if(w(arguments[0],E)){for(let t=arguments[0].iterator();t.hasNext();){const e=t.next();this.rescale(e.getCoordinates())}}else if(arguments[0]instanceof Array){const t=arguments[0];for(let e=0;e<t.length;e++)t[e].x=t[e].x/this._scaleFactor+this._offsetX,t[e].y=t[e].y/this._scaleFactor+this._offsetY;2===t.length&&t[0].equals2D(t[1])&&et.out.println(t)}}scale(){if(w(arguments[0],E)){const t=arguments[0],e=new P(t.size());for(let s=t.iterator();s.hasNext();){const t=s.next();e.add(new le(this.scale(t.getCoordinates()),t.getData()))}return e}if(arguments[0]instanceof Array){const t=arguments[0],e=new Array(t.length).fill(null);for(let s=0;s<t.length;s++)e[s]=new f(Math.round((t[s].x-this._offsetX)*this._scaleFactor),Math.round((t[s].y-this._offsetY)*this._scaleFactor),t[s].getZ());return st.removeRepeatedPoints(e)}}isIntegerPrecision(){return 1===this._scaleFactor}getNodedSubstrings(){const t=this._noder.getNodedSubstrings();return this._isScaled&&this.rescale(t),t}computeNodes(t){let e=t;this._isScaled&&(e=this.scale(t)),this._noder.computeNodes(e)}get interfaces_(){return[he]}}class ue extends h{constructor(t,e){super(e?t+" [ "+e+" ]":t),this.pt=e?new f(e):void 0,this.name=Object.keys({TopologyException:ue})[0]}getCoordinate(){return this.pt}}class ge{static intersection(t,e,s,i){const n=t.x<e.x?t.x:e.x,r=t.y<e.y?t.y:e.y,o=t.x>e.x?t.x:e.x,a=t.y>e.y?t.y:e.y,h=s.x<i.x?s.x:i.x,c=s.y<i.y?s.y:i.y,u=s.x>i.x?s.x:i.x,g=s.y>i.y?s.y:i.y,d=((n>h?n:h)+(o<u?o:u))/2,_=((r>c?r:c)+(a<g?a:g))/2,p=t.x-d,m=t.y-_,y=e.x-d,I=e.y-_,E=s.x-d,x=s.y-_,N=i.x-d,T=i.y-_,R=m-I,L=y-p,C=p*I-y*m,S=x-T,w=N-E,O=E*T-N*x,b=R*w-S*L,P=(L*O-w*C)/b,A=(S*C-R*O)/b;return l.isNaN(P)||l.isInfinite(P)||l.isNaN(A)||l.isInfinite(A)?null:new f(P+d,A+_)}}class de{static pointToSegmentString(t,s){if(0===s.length)throw new e("Line array must contain at least one vertex");let i=t.distance(s[0]);for(let e=0;e<s.length-1;e++){const n=de.pointToSegment(t,s[e],s[e+1]);n<i&&(i=n)}return i}static segmentToSegment(t,e,s,i){if(t.equals(e))return de.pointToSegment(t,s,i);if(s.equals(i))return de.pointToSegment(i,t,e);let n=!1;if(y.intersects(t,e,s,i)){const r=(e.x-t.x)*(i.y-s.y)-(e.y-t.y)*(i.x-s.x);if(0===r)n=!0;else{const o=(t.y-s.y)*(i.x-s.x)-(t.x-s.x)*(i.y-s.y),a=((t.y-s.y)*(e.x-t.x)-(t.x-s.x)*(e.y-t.y))/r,l=o/r;(l<0||l>1||a<0||a>1)&&(n=!0)}}else n=!0;return n?tt.min(de.pointToSegment(t,s,i),de.pointToSegment(e,s,i),de.pointToSegment(s,t,e),de.pointToSegment(i,t,e)):0}static pointToLinePerpendicular(t,e,s){const i=(s.x-e.x)*(s.x-e.x)+(s.y-e.y)*(s.y-e.y),n=((e.y-t.y)*(s.x-e.x)-(e.x-t.x)*(s.y-e.y))/i;return Math.abs(n)*Math.sqrt(i)}static pointToSegment(t,e,s){if(e.x===s.x&&e.y===s.y)return t.distance(e);const i=(s.x-e.x)*(s.x-e.x)+(s.y-e.y)*(s.y-e.y),n=((t.x-e.x)*(s.x-e.x)+(t.y-e.y)*(s.y-e.y))/i;if(n<=0)return t.distance(e);if(n>=1)return t.distance(s);const r=((e.y-t.y)*(s.x-e.x)-(e.x-t.x)*(s.y-e.y))/i;return Math.abs(r)*Math.sqrt(i)}}class _e{constructor(){_e.constructor_.apply(this,arguments)}static constructor_(){this._result=null,this._inputLines=Array(2).fill().map((()=>Array(2))),this._intPt=new Array(2).fill(null),this._intLineIndex=null,this._isProper=null,this._pa=null,this._pb=null,this._precisionModel=null,this._intPt[0]=new f,this._intPt[1]=new f,this._pa=this._intPt[0],this._pb=this._intPt[1],this._result=0}static nonRobustComputeEdgeDistance(t,e,s){const i=t.x-e.x,n=t.y-e.y,r=Math.sqrt(i*i+n*n);return u.isTrue(!(0===r&&!t.equals(e)),"Invalid distance calculation"),r}static computeEdgeDistance(t,e,s){const i=Math.abs(s.x-e.x),n=Math.abs(s.y-e.y);let r=-1;if(t.equals(e))r=0;else if(t.equals(s))r=i>n?i:n;else{const s=Math.abs(t.x-e.x),o=Math.abs(t.y-e.y);r=i>n?s:o,0!==r||t.equals(e)||(r=Math.max(s,o))}return u.isTrue(!(0===r&&!t.equals(e)),"Bad distance calculation"),r}computeIntersection(t,e,s,i){this._inputLines[0][0]=t,this._inputLines[0][1]=e,this._inputLines[1][0]=s,this._inputLines[1][1]=i,this._result=this.computeIntersect(t,e,s,i)}getIntersectionNum(){return this._result}computeIntLineIndex(){if(0===arguments.length)null===this._intLineIndex&&(this._intLineIndex=Array(2).fill().map((()=>Array(2))),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){const t=arguments[0];this.getEdgeDistance(t,0)>this.getEdgeDistance(t,1)?(this._intLineIndex[t][0]=0,this._intLineIndex[t][1]=1):(this._intLineIndex[t][0]=1,this._intLineIndex[t][1]=0)}}isInteriorIntersection(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){const t=arguments[0];for(let e=0;e<this._result;e++)if(!this._intPt[e].equals2D(this._inputLines[t][0])&&!this._intPt[e].equals2D(this._inputLines[t][1]))return!0;return!1}}getIntersection(t){return this._intPt[t]}getEdgeDistance(t,e){return _e.computeEdgeDistance(this._intPt[e],this._inputLines[t][0],this._inputLines[t][1])}isCollinear(){return this._result===_e.COLLINEAR_INTERSECTION}toString(){return ne.toLineString(this._inputLines[0][0],this._inputLines[0][1])+" - "+ne.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary()}getEndpoint(t,e){return this._inputLines[t][e]}getIndexAlongSegment(t,e){return this.computeIntLineIndex(),this._intLineIndex[t][e]}getTopologySummary(){const t=new _t;return this.isEndPoint()&&t.append(" endpoint"),this._isProper&&t.append(" proper"),this.isCollinear()&&t.append(" collinear"),t.toString()}isProper(){return this.hasIntersection()&&this._isProper}setPrecisionModel(t){this._precisionModel=t}isEndPoint(){return this.hasIntersection()&&!this._isProper}hasIntersection(){return this._result!==_e.NO_INTERSECTION}isIntersection(t){for(let e=0;e<this._result;e++)if(this._intPt[e].equals2D(t))return!0;return!1}getIntersectionAlongSegment(t,e){return this.computeIntLineIndex(),this._intPt[this._intLineIndex[t][e]]}}_e.DONT_INTERSECT=0,_e.DO_INTERSECT=1,_e.COLLINEAR=2,_e.NO_INTERSECTION=0,_e.POINT_INTERSECTION=1,_e.COLLINEAR_INTERSECTION=2;class pe extends _e{constructor(){super()}static nearestEndpoint(t,e,s,i){let n=t,r=de.pointToSegment(t,s,i),o=de.pointToSegment(e,s,i);return o<r&&(r=o,n=e),o=de.pointToSegment(s,t,e),o<r&&(r=o,n=s),o=de.pointToSegment(i,t,e),o<r&&(r=o,n=i),n}isInSegmentEnvelopes(t){const e=new y(this._inputLines[0][0],this._inputLines[0][1]),s=new y(this._inputLines[1][0],this._inputLines[1][1]);return e.contains(t)&&s.contains(t)}computeIntersection(){if(3!==arguments.length)return super.computeIntersection.apply(this,arguments);{const t=arguments[0],e=arguments[1],s=arguments[2];if(this._isProper=!1,y.intersects(e,s,t)&&0===At.index(e,s,t)&&0===At.index(s,e,t))return this._isProper=!0,(t.equals(e)||t.equals(s))&&(this._isProper=!1),this._result=_e.POINT_INTERSECTION,null;this._result=_e.NO_INTERSECTION}}intersection(t,e,s,i){let n=this.intersectionSafe(t,e,s,i);return this.isInSegmentEnvelopes(n)||(n=new f(pe.nearestEndpoint(t,e,s,i))),null!==this._precisionModel&&this._precisionModel.makePrecise(n),n}checkDD(t,e,s,i,n){const r=Pt.intersection(t,e,s,i),o=this.isInSegmentEnvelopes(r);et.out.println("DD in env = "+o+"  --------------------- "+r),n.distance(r)>1e-4&&et.out.println("Distance = "+n.distance(r))}intersectionSafe(t,e,s,i){let n=ge.intersection(t,e,s,i);return null===n&&(n=pe.nearestEndpoint(t,e,s,i)),n}computeCollinearIntersection(t,e,s,i){const n=y.intersects(t,e,s),r=y.intersects(t,e,i),o=y.intersects(s,i,t),a=y.intersects(s,i,e);return n&&r?(this._intPt[0]=s,this._intPt[1]=i,_e.COLLINEAR_INTERSECTION):o&&a?(this._intPt[0]=t,this._intPt[1]=e,_e.COLLINEAR_INTERSECTION):n&&o?(this._intPt[0]=s,this._intPt[1]=t,!s.equals(t)||r||a?_e.COLLINEAR_INTERSECTION:_e.POINT_INTERSECTION):n&&a?(this._intPt[0]=s,this._intPt[1]=e,!s.equals(e)||r||o?_e.COLLINEAR_INTERSECTION:_e.POINT_INTERSECTION):r&&o?(this._intPt[0]=i,this._intPt[1]=t,!i.equals(t)||n||a?_e.COLLINEAR_INTERSECTION:_e.POINT_INTERSECTION):r&&a?(this._intPt[0]=i,this._intPt[1]=e,!i.equals(e)||n||o?_e.COLLINEAR_INTERSECTION:_e.POINT_INTERSECTION):_e.NO_INTERSECTION}computeIntersect(t,e,s,i){if(this._isProper=!1,!y.intersects(t,e,s,i))return _e.NO_INTERSECTION;const n=At.index(t,e,s),r=At.index(t,e,i);if(n>0&&r>0||n<0&&r<0)return _e.NO_INTERSECTION;const o=At.index(s,i,t),a=At.index(s,i,e);if(o>0&&a>0||o<0&&a<0)return _e.NO_INTERSECTION;return 0===n&&0===r&&0===o&&0===a?this.computeCollinearIntersection(t,e,s,i):(0===n||0===r||0===o||0===a?(this._isProper=!1,t.equals2D(s)||t.equals2D(i)?this._intPt[0]=t:e.equals2D(s)||e.equals2D(i)?this._intPt[0]=e:0===n?this._intPt[0]=new f(s):0===r?this._intPt[0]=new f(i):0===o?this._intPt[0]=new f(t):0===a&&(this._intPt[0]=new f(e))):(this._isProper=!0,this._intPt[0]=this.intersection(t,e,s,i)),_e.POINT_INTERSECTION)}}class fe{constructor(){fe.constructor_.apply(this,arguments)}static constructor_(){this._li=new pe,this._segStrings=null;const t=arguments[0];this._segStrings=t}checkEndPtVertexIntersections(){if(0===arguments.length)for(let t=this._segStrings.iterator();t.hasNext();){const e=t.next().getCoordinates();this.checkEndPtVertexIntersections(e[0],this._segStrings),this.checkEndPtVertexIntersections(e[e.length-1],this._segStrings)}else if(2===arguments.length){const t=arguments[0];for(let e=arguments[1].iterator();e.hasNext();){const s=e.next().getCoordinates();for(let e=1;e<s.length-1;e++)if(s[e].equals(t))throw new h("found endpt/interior pt intersection at index "+e+" :pt "+t)}}}checkInteriorIntersections(){if(0===arguments.length)for(let t=this._segStrings.iterator();t.hasNext();){const e=t.next();for(let t=this._segStrings.iterator();t.hasNext();){const s=t.next();this.checkInteriorIntersections(e,s)}}else if(2===arguments.length){const t=arguments[0],e=arguments[1],s=t.getCoordinates(),i=e.getCoordinates();for(let n=0;n<s.length-1;n++)for(let s=0;s<i.length-1;s++)this.checkInteriorIntersections(t,n,e,s)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];if(t===s&&e===i)return null;const n=t.getCoordinates()[e],r=t.getCoordinates()[e+1],o=s.getCoordinates()[i],a=s.getCoordinates()[i+1];if(this._li.computeIntersection(n,r,o,a),this._li.hasIntersection()&&(this._li.isProper()||this.hasInteriorIntersection(this._li,n,r)||this.hasInteriorIntersection(this._li,o,a)))throw new h("found non-noded intersection at "+n+"-"+r+" and "+o+"-"+a)}}checkValid(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()}checkCollapses(){if(0===arguments.length)for(let t=this._segStrings.iterator();t.hasNext();){const e=t.next();this.checkCollapses(e)}else if(1===arguments.length){const t=arguments[0].getCoordinates();for(let e=0;e<t.length-2;e++)this.checkCollapse(t[e],t[e+1],t[e+2])}}hasInteriorIntersection(t,e,s){for(let i=0;i<t.getIntersectionNum();i++){const n=t.getIntersection(i);if(!n.equals(e)&&!n.equals(s))return!0}return!1}checkCollapse(t,e,s){if(t.equals(s))throw new h("found non-noded collapse at "+fe.fact.createLineString([t,e,s]))}}fe.fact=new vt;class me{getBounds(){}}class ye{constructor(){ye.constructor_.apply(this,arguments)}static constructor_(){this._bounds=null,this._item=null;const t=arguments[0],e=arguments[1];this._bounds=t,this._item=e}getItem(){return this._item}getBounds(){return this._bounds}get interfaces_(){return[me,r]}}class Ie{constructor(){Ie.constructor_.apply(this,arguments)}static constructor_(){this._size=null,this._items=null,this._size=0,this._items=new P,this._items.add(null)}poll(){if(this.isEmpty())return null;const t=this._items.get(1);return this._items.set(1,this._items.get(this._size)),this._size-=1,this.reorder(1),t}size(){return this._size}reorder(t){let e=null;const s=this._items.get(t);for(;2*t<=this._size&&(e=2*t,e!==this._size&&this._items.get(e+1).compareTo(this._items.get(e))<0&&e++,this._items.get(e).compareTo(s)<0);t=e)this._items.set(t,this._items.get(e));this._items.set(t,s)}clear(){this._size=0,this._items.clear()}peek(){if(this.isEmpty())return null;return this._items.get(1)}isEmpty(){return 0===this._size}add(t){this._items.add(null),this._size+=1;let e=this._size;for(this._items.set(0,t);t.compareTo(this._items.get(Math.trunc(e/2)))<0;e/=2)this._items.set(e,this._items.get(Math.trunc(e/2)));this._items.set(e,t)}}class Ee{query(){}insert(t,e){}remove(t,e){}}class xe{constructor(){xe.constructor_.apply(this,arguments)}static constructor_(){if(this._childBoundables=new P,this._bounds=null,this._level=null,0===arguments.length);else if(1===arguments.length){const t=arguments[0];this._level=t}}getLevel(){return this._level}addChildBoundable(t){u.isTrue(null===this._bounds),this._childBoundables.add(t)}isEmpty(){return this._childBoundables.isEmpty()}getBounds(){return null===this._bounds&&(this._bounds=this.computeBounds()),this._bounds}size(){return this._childBoundables.size()}getChildBoundables(){return this._childBoundables}get interfaces_(){return[me,r]}}const Ne={reverseOrder:function(){return{compare:(t,e)=>e.compareTo(t)}},min:function(t){return Ne.sort(t),t.get(0)},sort:function(t,e){const s=t.toArray();e?mt.sort(s,e):mt.sort(s);const i=t.iterator();for(let t=0,e=s.length;t<e;t++)i.next(),i.set(s[t])},singletonList:function(t){const e=new P;return e.add(t),e}};class Te{static distance(t,e,s,i){const n=s-t,r=i-e;return Math.sqrt(n*n+r*r)}static maximumDistance(t,e){const s=Math.min(t.getMinX(),e.getMinX()),i=Math.min(t.getMinY(),e.getMinY()),n=Math.max(t.getMaxX(),e.getMaxX()),r=Math.max(t.getMaxY(),e.getMaxY());return Te.distance(s,i,n,r)}static minMaxDistance(t,e){const s=t.getMinX(),i=t.getMinY(),n=t.getMaxX(),r=t.getMaxY(),o=e.getMinX(),a=e.getMinY(),l=e.getMaxX(),h=e.getMaxY();let c=Te.maxDistance(s,i,s,r,o,a,o,h);return c=Math.min(c,Te.maxDistance(s,i,s,r,o,a,l,a)),c=Math.min(c,Te.maxDistance(s,i,s,r,l,h,o,h)),c=Math.min(c,Te.maxDistance(s,i,s,r,l,h,l,a)),c=Math.min(c,Te.maxDistance(s,i,n,i,o,a,o,h)),c=Math.min(c,Te.maxDistance(s,i,n,i,o,a,l,a)),c=Math.min(c,Te.maxDistance(s,i,n,i,l,h,o,h)),c=Math.min(c,Te.maxDistance(s,i,n,i,l,h,l,a)),c=Math.min(c,Te.maxDistance(n,r,s,r,o,a,o,h)),c=Math.min(c,Te.maxDistance(n,r,s,r,o,a,l,a)),c=Math.min(c,Te.maxDistance(n,r,s,r,l,h,o,h)),c=Math.min(c,Te.maxDistance(n,r,s,r,l,h,l,a)),c=Math.min(c,Te.maxDistance(n,r,n,i,o,a,o,h)),c=Math.min(c,Te.maxDistance(n,r,n,i,o,a,l,a)),c=Math.min(c,Te.maxDistance(n,r,n,i,l,h,o,h)),c=Math.min(c,Te.maxDistance(n,r,n,i,l,h,l,a)),c}static maxDistance(t,e,s,i,n,r,o,a){let l=Te.distance(t,e,n,r);return l=Math.max(l,Te.distance(t,e,o,a)),l=Math.max(l,Te.distance(s,i,n,r)),l=Math.max(l,Te.distance(s,i,o,a)),l}}class Re{constructor(){Re.constructor_.apply(this,arguments)}static constructor_(){this._boundable1=null,this._boundable2=null,this._distance=null,this._itemDistance=null;const t=arguments[0],e=arguments[1],s=arguments[2];this._boundable1=t,this._boundable2=e,this._itemDistance=s,this._distance=this.distance()}static area(t){return t.getBounds().getArea()}static isComposite(t){return t instanceof xe}maximumDistance(){return Te.maximumDistance(this._boundable1.getBounds(),this._boundable2.getBounds())}expandToQueue(t,s){const i=Re.isComposite(this._boundable1),n=Re.isComposite(this._boundable2);if(i&&n)return Re.area(this._boundable1)>Re.area(this._boundable2)?(this.expand(this._boundable1,this._boundable2,!1,t,s),null):(this.expand(this._boundable2,this._boundable1,!0,t,s),null);if(i)return this.expand(this._boundable1,this._boundable2,!1,t,s),null;if(n)return this.expand(this._boundable2,this._boundable1,!0,t,s),null;throw new e("neither boundable is composite")}isLeaves(){return!(Re.isComposite(this._boundable1)||Re.isComposite(this._boundable2))}getBoundable(t){return 0===t?this._boundable1:this._boundable2}getDistance(){return this._distance}distance(){return this.isLeaves()?this._itemDistance.distance(this._boundable1,this._boundable2):this._boundable1.getBounds().distance(this._boundable2.getBounds())}compareTo(t){const e=t;return this._distance<e._distance?-1:this._distance>e._distance?1:0}expand(t,e,s,i,n){for(let r=t.getChildBoundables().iterator();r.hasNext();){const t=r.next();let o=null;o=s?new Re(e,t,this._itemDistance):new Re(t,e,this._itemDistance),o.getDistance()<n&&i.add(o)}}get interfaces_(){return[i]}}class Le{visitItem(t){}}class Ce{constructor(){Ce.constructor_.apply(this,arguments)}static constructor_(){if(this._root=null,this._built=!1,this._itemBoundables=new P,this._nodeCapacity=null,0===arguments.length)Ce.constructor_.call(this,Ce.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){const t=arguments[0];u.isTrue(t>1,"Node capacity must be greater than 1"),this._nodeCapacity=t}}static compareDoubles(t,e){return t>e?1:t<e?-1:0}queryInternal(){if(w(arguments[2],Le)&&arguments[0]instanceof Object&&arguments[1]instanceof xe){const t=arguments[0],e=arguments[2],s=arguments[1].getChildBoundables();for(let i=0;i<s.size();i++){const n=s.get(i);this.getIntersectsOp().intersects(n.getBounds(),t)&&(n instanceof xe?this.queryInternal(t,n,e):n instanceof ye?e.visitItem(n.getItem()):u.shouldNeverReachHere())}}else if(w(arguments[2],b)&&arguments[0]instanceof Object&&arguments[1]instanceof xe){const t=arguments[0],e=arguments[2],s=arguments[1].getChildBoundables();for(let i=0;i<s.size();i++){const n=s.get(i);this.getIntersectsOp().intersects(n.getBounds(),t)&&(n instanceof xe?this.queryInternal(t,n,e):n instanceof ye?e.add(n.getItem()):u.shouldNeverReachHere())}}}insert(t,e){u.isTrue(!this._built,"Cannot insert items into an STR packed R-tree after it has been built."),this._itemBoundables.add(new ye(t,e))}boundablesAtLevel(){if(1===arguments.length){const t=arguments[0],e=new P;return this.boundablesAtLevel(t,this._root,e),e}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(u.isTrue(t>-2),e.getLevel()===t)return s.add(e),null;for(let i=e.getChildBoundables().iterator();i.hasNext();){const e=i.next();e instanceof xe?this.boundablesAtLevel(t,e,s):(u.isTrue(e instanceof ye),-1===t&&s.add(e))}return null}}getRoot(){return this.build(),this._root}remove(){if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.remove(t,this._root,e)}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];let i=this.removeItem(e,s);if(i)return!0;let n=null;for(let r=e.getChildBoundables().iterator();r.hasNext();){const e=r.next();if(this.getIntersectsOp().intersects(e.getBounds(),t)&&(e instanceof xe&&(i=this.remove(t,e,s),i))){n=e;break}}return null!==n&&n.getChildBoundables().isEmpty()&&e.getChildBoundables().remove(n),i}}createHigherLevels(t,e){u.isTrue(!t.isEmpty());const s=this.createParentBoundables(t,e+1);return 1===s.size()?s.get(0):this.createHigherLevels(s,e+1)}depth(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this._root));if(1===arguments.length){let t=0;for(let e=arguments[0].getChildBoundables().iterator();e.hasNext();){const s=e.next();if(s instanceof xe){const e=this.depth(s);e>t&&(t=e)}}return t+1}}createParentBoundables(t,e){u.isTrue(!t.isEmpty());const s=new P;s.add(this.createNode(e));const i=new P(t);Ne.sort(i,this.getComparator());for(let t=i.iterator();t.hasNext();){const i=t.next();this.lastNode(s).getChildBoundables().size()===this.getNodeCapacity()&&s.add(this.createNode(e)),this.lastNode(s).addChildBoundable(i)}return s}isEmpty(){return this._built?this._root.isEmpty():this._itemBoundables.isEmpty()}getNodeCapacity(){return this._nodeCapacity}lastNode(t){return t.get(t.size()-1)}size(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this._root));if(1===arguments.length){let t=0;for(let e=arguments[0].getChildBoundables().iterator();e.hasNext();){const s=e.next();s instanceof xe?t+=this.size(s):s instanceof ye&&(t+=1)}return t}}removeItem(t,e){let s=null;for(let i=t.getChildBoundables().iterator();i.hasNext();){const t=i.next();t instanceof ye&&t.getItem()===e&&(s=t)}return null!==s&&(t.getChildBoundables().remove(s),!0)}itemsTree(){if(0===arguments.length){this.build();const t=this.itemsTree(this._root);return null===t?new P:t}if(1===arguments.length){const t=arguments[0],e=new P;for(let s=t.getChildBoundables().iterator();s.hasNext();){const t=s.next();if(t instanceof xe){const s=this.itemsTree(t);null!==s&&e.add(s)}else t instanceof ye?e.add(t.getItem()):u.shouldNeverReachHere()}return e.size()<=0?null:e}}query(){if(1===arguments.length){const t=arguments[0];this.build();const e=new P;return this.isEmpty()||this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.queryInternal(t,this._root,e),e}if(2===arguments.length){const t=arguments[0],e=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.queryInternal(t,this._root,e)}}build(){if(this._built)return null;this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1),this._itemBoundables=null,this._built=!0}get interfaces_(){return[r]}}Ce.IntersectsOp=function(){},Ce.DEFAULT_NODE_CAPACITY=10;class Se{distance(t,e){}}class we extends Ce{constructor(){super(),we.constructor_.apply(this,arguments)}static constructor_(){if(0===arguments.length)we.constructor_.call(this,we.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){const t=arguments[0];Ce.constructor_.call(this,t)}}static getItems(t){const e=new Array(t.size()).fill(null);let s=0;for(;!t.isEmpty();){const i=t.poll();e[s]=i.getBoundable(0).getItem(),s++}return e}static avg(t,e){return(t+e)/2}static centreY(t){return we.avg(t.getMinY(),t.getMaxY())}static centreX(t){return we.avg(t.getMinX(),t.getMaxX())}size(){return 0===arguments.length?super.size.call(this):super.size.apply(this,arguments)}insert(){if(!(2===arguments.length&&arguments[1]instanceof Object&&arguments[0]instanceof y))return super.insert.apply(this,arguments);{const t=arguments[0],e=arguments[1];if(t.isNull())return null;super.insert.call(this,t,e)}}getIntersectsOp(){return we.intersectsOp}verticalSlices(t,e){const s=Math.trunc(Math.ceil(t.size()/e)),i=new Array(e).fill(null),n=t.iterator();for(let t=0;t<e;t++){i[t]=new P;let e=0;for(;n.hasNext()&&e<s;){const s=n.next();i[t].add(s),e++}}return i}query(){if(1===arguments.length){const t=arguments[0];return super.query.call(this,t)}if(2===arguments.length){const t=arguments[0],e=arguments[1];super.query.call(this,t,e)}}getComparator(){return we.yComparator}createParentBoundablesFromVerticalSlice(t,e){return super.createParentBoundables.call(this,t,e)}remove(){if(2===arguments.length&&arguments[1]instanceof Object&&arguments[0]instanceof y){const t=arguments[0],e=arguments[1];return super.remove.call(this,t,e)}return super.remove.apply(this,arguments)}depth(){return 0===arguments.length?super.depth.call(this):super.depth.apply(this,arguments)}createParentBoundables(t,e){u.isTrue(!t.isEmpty());const s=Math.trunc(Math.ceil(t.size()/this.getNodeCapacity())),i=new P(t);Ne.sort(i,we.xComparator);const n=this.verticalSlices(i,Math.trunc(Math.ceil(Math.sqrt(s))));return this.createParentBoundablesFromVerticalSlices(n,e)}nearestNeighbour(){if(1===arguments.length){if(w(arguments[0],Se)){const t=arguments[0];if(this.isEmpty())return null;const e=new Re(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour(e)}if(arguments[0]instanceof Re){const t=arguments[0];let e=l.POSITIVE_INFINITY,s=null;const i=new Ie;for(i.add(t);!i.isEmpty()&&e>0;){const t=i.poll(),n=t.getDistance();if(n>=e)break;t.isLeaves()?(e=n,s=t):t.expandToQueue(i,e)}return null===s?null:[s.getBoundable(0).getItem(),s.getBoundable(1).getItem()]}}else{if(2===arguments.length){const t=arguments[0],e=arguments[1];if(this.isEmpty()||t.isEmpty())return null;const s=new Re(this.getRoot(),t.getRoot(),e);return this.nearestNeighbour(s)}if(3===arguments.length){const t=arguments[2],e=new ye(arguments[0],arguments[1]),s=new Re(this.getRoot(),e,t);return this.nearestNeighbour(s)[0]}if(4===arguments.length){const t=arguments[2],e=arguments[3],s=new ye(arguments[0],arguments[1]),i=new Re(this.getRoot(),s,t);return this.nearestNeighbourK(i,e)}}}isWithinDistance(){if(2===arguments.length){const t=arguments[0],e=arguments[1];let s=l.POSITIVE_INFINITY;const i=new Ie;for(i.add(t);!i.isEmpty();){const t=i.poll(),n=t.getDistance();if(n>e)return!1;if(t.maximumDistance()<=e)return!0;if(t.isLeaves()){if(s=n,s<=e)return!0}else t.expandToQueue(i,s)}return!1}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=new Re(this.getRoot(),t.getRoot(),e);return this.isWithinDistance(i,s)}}createParentBoundablesFromVerticalSlices(t,e){u.isTrue(t.length>0);const s=new P;for(let i=0;i<t.length;i++)s.addAll(this.createParentBoundablesFromVerticalSlice(t[i],e));return s}nearestNeighbourK(){if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.nearestNeighbourK(t,l.POSITIVE_INFINITY,e)}if(3===arguments.length){const t=arguments[0],e=arguments[2];let s=arguments[1];const i=new Ie;i.add(t);const n=new Ie;for(;!i.isEmpty()&&s>=0;){const t=i.poll(),r=t.getDistance();if(r>=s)break;if(t.isLeaves())if(n.size()<e)n.add(t);else{n.peek().getDistance()>r&&(n.poll(),n.add(t));s=n.peek().getDistance()}else t.expandToQueue(i,s)}return we.getItems(n)}}createNode(t){return new Oe(t)}get interfaces_(){return[Ee,r]}}class Oe extends xe{constructor(){super(),Oe.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0];xe.constructor_.call(this,t)}computeBounds(){let t=null;for(let e=this.getChildBoundables().iterator();e.hasNext();){const s=e.next();null===t?t=new y(s.getBounds()):t.expandToInclude(s.getBounds())}return t}}we.STRtreeNode=Oe,we.xComparator=new class{get interfaces_(){return[g]}compare(t,e){return Ce.compareDoubles(we.centreX(t.getBounds()),we.centreX(e.getBounds()))}},we.yComparator=new class{get interfaces_(){return[g]}compare(t,e){return Ce.compareDoubles(we.centreY(t.getBounds()),we.centreY(e.getBounds()))}},we.intersectsOp=new class{get interfaces_(){return[IntersectsOp]}intersects(t,e){return t.intersects(e)}},we.DEFAULT_NODE_CAPACITY=10;class be{constructor(){be.constructor_.apply(this,arguments)}static constructor_(){if(this.p0=null,this.p1=null,0===arguments.length)be.constructor_.call(this,new f,new f);else if(1===arguments.length){const t=arguments[0];be.constructor_.call(this,t.p0,t.p1)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.p0=t,this.p1=e}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];be.constructor_.call(this,new f(t,e),new f(s,i))}}static midPoint(t,e){return new f((t.x+e.x)/2,(t.y+e.y)/2)}minX(){return Math.min(this.p0.x,this.p1.x)}orientationIndex(){if(arguments[0]instanceof be){const t=arguments[0],e=At.index(this.p0,this.p1,t.p0),s=At.index(this.p0,this.p1,t.p1);return e>=0&&s>=0||e<=0&&s<=0?Math.max(e,s):0}if(arguments[0]instanceof f){const t=arguments[0];return At.index(this.p0,this.p1,t)}}toGeometry(t){return t.createLineString([this.p0,this.p1])}isVertical(){return this.p0.x===this.p1.x}minY(){return Math.min(this.p0.y,this.p1.y)}midPoint(){return be.midPoint(this.p0,this.p1)}maxY(){return Math.max(this.p0.y,this.p1.y)}pointAlongOffset(t,e){const s=this.p0.x+t*(this.p1.x-this.p0.x),i=this.p0.y+t*(this.p1.y-this.p0.y),n=this.p1.x-this.p0.x,r=this.p1.y-this.p0.y,o=Math.sqrt(n*n+r*r);let a=0,l=0;if(0!==e){if(o<=0)throw new Ct("Cannot compute offset from zero-length line segment");a=e*n/o,l=e*r/o}return new f(s-l,i+a)}setCoordinates(){if(1===arguments.length){const t=arguments[0];this.setCoordinates(t.p0,t.p1)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.p0.x=t.x,this.p0.y=t.y,this.p1.x=e.x,this.p1.y=e.y}}segmentFraction(t){let e=this.projectionFactor(t);return e<0?e=0:(e>1||l.isNaN(e))&&(e=1),e}toString(){return"LINESTRING( "+this.p0.x+" "+this.p0.y+", "+this.p1.x+" "+this.p1.y+")"}distance(){if(arguments[0]instanceof be){const t=arguments[0];return de.segmentToSegment(this.p0,this.p1,t.p0,t.p1)}if(arguments[0]instanceof f){const t=arguments[0];return de.pointToSegment(t,this.p0,this.p1)}}equals(t){if(!(t instanceof be))return!1;const e=t;return this.p0.equals(e.p0)&&this.p1.equals(e.p1)}intersection(t){const e=new pe;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null}project(){if(arguments[0]instanceof f){const t=arguments[0];if(t.equals(this.p0)||t.equals(this.p1))return new f(t);const e=this.projectionFactor(t),s=new f;return s.x=this.p0.x+e*(this.p1.x-this.p0.x),s.y=this.p0.y+e*(this.p1.y-this.p0.y),s}if(arguments[0]instanceof be){const t=arguments[0],e=this.projectionFactor(t.p0),s=this.projectionFactor(t.p1);if(e>=1&&s>=1)return null;if(e<=0&&s<=0)return null;let i=this.project(t.p0);e<0&&(i=this.p0),e>1&&(i=this.p1);let n=this.project(t.p1);return s<0&&(n=this.p0),s>1&&(n=this.p1),new be(i,n)}}normalize(){this.p1.compareTo(this.p0)<0&&this.reverse()}angle(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)}getCoordinate(t){return 0===t?this.p0:this.p1}distancePerpendicular(t){return de.pointToLinePerpendicular(t,this.p0,this.p1)}closestPoint(t){const e=this.projectionFactor(t);if(e>0&&e<1)return this.project(t);return this.p0.distance(t)<this.p1.distance(t)?this.p0:this.p1}projectionFactor(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;const e=this.p1.x-this.p0.x,s=this.p1.y-this.p0.y,i=e*e+s*s;if(i<=0)return l.NaN;return((t.x-this.p0.x)*e+(t.y-this.p0.y)*s)/i}closestPoints(t){const e=this.intersection(t);if(null!==e)return[e,e];const s=new Array(2).fill(null);let i=l.MAX_VALUE,n=null;const r=this.closestPoint(t.p0);i=r.distance(t.p0),s[0]=r,s[1]=t.p0;const o=this.closestPoint(t.p1);n=o.distance(t.p1),n<i&&(i=n,s[0]=o,s[1]=t.p1);const a=t.closestPoint(this.p0);n=a.distance(this.p0),n<i&&(i=n,s[0]=this.p0,s[1]=a);const h=t.closestPoint(this.p1);return n=h.distance(this.p1),n<i&&(i=n,s[0]=this.p1,s[1]=h),s}maxX(){return Math.max(this.p0.x,this.p1.x)}getLength(){return this.p0.distance(this.p1)}compareTo(t){const e=t,s=this.p0.compareTo(e.p0);return 0!==s?s:this.p1.compareTo(e.p1)}reverse(){const t=this.p0;this.p0=this.p1,this.p1=t}equalsTopo(t){return this.p0.equals(t.p0)&&this.p1.equals(t.p1)||this.p0.equals(t.p1)&&this.p1.equals(t.p0)}lineIntersection(t){return ge.intersection(this.p0,this.p1,t.p0,t.p1)}isHorizontal(){return this.p0.y===this.p1.y}reflect(t){const e=this.p1.getY()-this.p0.getY(),s=this.p0.getX()-this.p1.getX(),i=this.p0.getY()*(this.p1.getX()-this.p0.getX())-this.p0.getX()*(this.p1.getY()-this.p0.getY()),n=e*e+s*s,r=e*e-s*s,o=t.getX(),a=t.getY();return new f((-r*o-2*e*s*a-2*e*i)/n,(r*a-2*e*s*o-2*s*i)/n)}pointAlong(t){const e=new f;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e}hashCode(){let t=l.doubleToLongBits(this.p0.x);t^=31*l.doubleToLongBits(this.p0.y);const e=Math.trunc(t)^Math.trunc(t>>32);let s=l.doubleToLongBits(this.p1.x);s^=31*l.doubleToLongBits(this.p1.y);return e^(Math.trunc(s)^Math.trunc(s>>32))}get interfaces_(){return[i,r]}}class Pe{constructor(){Pe.constructor_.apply(this,arguments)}static constructor_(){this._overlapSeg1=new be,this._overlapSeg2=new be}overlap(){if(2===arguments.length);else if(4===arguments.length){const t=arguments[1],e=arguments[2],s=arguments[3];arguments[0].getLineSegment(t,this._overlapSeg1),e.getLineSegment(s,this._overlapSeg2),this.overlap(this._overlapSeg1,this._overlapSeg2)}}}class Ae{constructor(){Ae.constructor_.apply(this,arguments)}static constructor_(){this._pts=null,this._start=null,this._end=null,this._env=null,this._context=null,this._id=null;const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this._pts=t,this._start=e,this._end=s,this._context=i}computeOverlaps(){if(2===arguments.length){const t=arguments[0],e=arguments[1];this.computeOverlaps(this._start,this._end,t,t._start,t._end,e)}else if(6===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=arguments[4],r=arguments[5];if(e-t==1&&n-i==1)return r.overlap(this,t,s,i),null;if(!this.overlaps(t,e,s,i,n))return null;const o=Math.trunc((t+e)/2),a=Math.trunc((i+n)/2);t<o&&(i<a&&this.computeOverlaps(t,o,s,i,a,r),a<n&&this.computeOverlaps(t,o,s,a,n,r)),o<e&&(i<a&&this.computeOverlaps(o,e,s,i,a,r),a<n&&this.computeOverlaps(o,e,s,a,n,r))}}setId(t){this._id=t}select(t,e){this.computeSelect(t,this._start,this._end,e)}getEnvelope(){if(null===this._env){const t=this._pts[this._start],e=this._pts[this._end];this._env=new y(t,e)}return this._env}overlaps(t,e,s,i,n){return y.intersects(this._pts[t],this._pts[e],s._pts[i],s._pts[n])}getEndIndex(){return this._end}getStartIndex(){return this._start}getContext(){return this._context}getId(){return this._id}getLineSegment(t,e){e.p0=this._pts[t],e.p1=this._pts[t+1]}computeSelect(t,e,s,i){const n=this._pts[e],r=this._pts[s];if(s-e==1)return i.select(this,e),null;if(!t.intersects(n,r))return null;const o=Math.trunc((e+s)/2);e<o&&this.computeSelect(t,e,o,i),o<s&&this.computeSelect(t,o,s,i)}getCoordinates(){const t=new Array(this._end-this._start+1).fill(null);let e=0;for(let s=this._start;s<=this._end;s++)t[e++]=this._pts[s];return t}}class Me{static isNorthern(t){return t===Me.NE||t===Me.NW}static isOpposite(t,e){if(t===e)return!1;return 2===(t-e+4)%4}static commonHalfPlane(t,e){if(t===e)return t;if(2===(t-e+4)%4)return-1;const s=t<e?t:e;return 0===s&&3===(t>e?t:e)?3:s}static isInHalfPlane(t,e){return e===Me.SE?t===Me.SE||t===Me.SW:t===e||t===e+1}static quadrant(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],s=arguments[1];if(0===t&&0===s)throw new e("Cannot compute the quadrant for point ( "+t+", "+s+" )");return t>=0?s>=0?Me.NE:Me.SE:s>=0?Me.NW:Me.SW}if(arguments[0]instanceof f&&arguments[1]instanceof f){const t=arguments[0],s=arguments[1];if(s.x===t.x&&s.y===t.y)throw new e("Cannot compute the quadrant for two identical points "+t);return s.x>=t.x?s.y>=t.y?Me.NE:Me.SE:s.y>=t.y?Me.NW:Me.SW}}}Me.NE=0,Me.NW=1,Me.SW=2,Me.SE=3;class De{static findChainEnd(t,e){let s=e;for(;s<t.length-1&&t[s].equals2D(t[s+1]);)s++;if(s>=t.length-1)return t.length-1;const i=Me.quadrant(t[s],t[s+1]);let n=e+1;for(;n<t.length;){if(!t[n-1].equals2D(t[n])){if(Me.quadrant(t[n-1],t[n])!==i)break}n++}return n-1}static getChains(){if(1===arguments.length){const t=arguments[0];return De.getChains(t,null)}if(2===arguments.length){const t=arguments[0],e=arguments[1],s=new P;let i=0;do{const n=De.findChainEnd(t,i),r=new Ae(t,i,n,e);s.add(r),i=n}while(i<t.length-1);return s}}}class ve{constructor(){ve.constructor_.apply(this,arguments)}static constructor_(){if(this._segInt=null,0===arguments.length);else if(1===arguments.length){const t=arguments[0];this.setSegmentIntersector(t)}}setSegmentIntersector(t){this._segInt=t}get interfaces_(){return[he]}}class Fe extends ve{constructor(){super(),Fe.constructor_.apply(this,arguments)}static constructor_(){if(this._monoChains=new P,this._index=new we,this._idCounter=0,this._nodedSegStrings=null,this._nOverlaps=0,0===arguments.length);else if(1===arguments.length){const t=arguments[0];ve.constructor_.call(this,t)}}getMonotoneChains(){return this._monoChains}getNodedSubstrings(){return le.getNodedSubstrings(this._nodedSegStrings)}getIndex(){return this._index}add(t){for(let e=De.getChains(t.getCoordinates(),t).iterator();e.hasNext();){const t=e.next();t.setId(this._idCounter++),this._index.insert(t.getEnvelope(),t),this._monoChains.add(t)}}computeNodes(t){this._nodedSegStrings=t;for(let e=t.iterator();e.hasNext();)this.add(e.next());this.intersectChains()}intersectChains(){const t=new Ge(this._segInt);for(let e=this._monoChains.iterator();e.hasNext();){const s=e.next();for(let e=this._index.query(s.getEnvelope()).iterator();e.hasNext();){const i=e.next();if(i.getId()>s.getId()&&(s.computeOverlaps(i,t),this._nOverlaps++),this._segInt.isDone())return null}}}}class Ge extends Pe{constructor(){super(),Ge.constructor_.apply(this,arguments)}static constructor_(){this._si=null;const t=arguments[0];this._si=t}overlap(){if(4!==arguments.length)return super.overlap.apply(this,arguments);{const t=arguments[1],e=arguments[2],s=arguments[3],i=arguments[0].getContext(),n=e.getContext();this._si.processIntersections(i,t,n,s)}}}Fe.SegmentOverlapAction=Ge;class qe{constructor(){qe.constructor_.apply(this,arguments)}static constructor_(){this._li=null,this._pt=null,this._originalPt=null,this._ptScaled=null,this._p0Scaled=null,this._p1Scaled=null,this._scaleFactor=null,this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,this._corner=new Array(4).fill(null),this._safeEnv=null;const t=arguments[0],s=arguments[1],i=arguments[2];if(this._originalPt=t,this._pt=t,this._scaleFactor=s,this._li=i,s<=0)throw new e("Scale factor must be non-zero");1!==s&&(this._pt=new f(this.scale(t.x),this.scale(t.y)),this._p0Scaled=new f,this._p1Scaled=new f),this.initCorners(this._pt)}intersectsScaled(t,e){const s=Math.min(t.x,e.x),i=Math.max(t.x,e.x),n=Math.min(t.y,e.y),r=Math.max(t.y,e.y),o=this._maxx<s||this._minx>i||this._maxy<n||this._miny>r;if(o)return!1;const a=this.intersectsToleranceSquare(t,e);return u.isTrue(!(o&&a),"Found bad envelope test"),a}copyScaled(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y)}getSafeEnvelope(){if(null===this._safeEnv){const t=qe.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new y(this._originalPt.x-t,this._originalPt.x+t,this._originalPt.y-t,this._originalPt.y+t)}return this._safeEnv}intersectsPixelClosure(t,e){return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.hasIntersection())))}intersectsToleranceSquare(t,e){let s=!1,i=!1;return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.isProper()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.isProper()||(this._li.hasIntersection()&&(s=!0),this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.isProper()||(this._li.hasIntersection()&&(i=!0),this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.isProper()||(!(!s||!i)||(!!t.equals(this._pt)||!!e.equals(this._pt))))))}addSnappedNode(t,e){const s=t.getCoordinate(e),i=t.getCoordinate(e+1);return!!this.intersects(s,i)&&(t.addIntersection(this.getCoordinate(),e),!0)}initCorners(t){const e=.5;this._minx=t.x-e,this._maxx=t.x+e,this._miny=t.y-e,this._maxy=t.y+e,this._corner[0]=new f(this._maxx,this._maxy),this._corner[1]=new f(this._minx,this._maxy),this._corner[2]=new f(this._minx,this._miny),this._corner[3]=new f(this._maxx,this._miny)}intersects(t,e){return 1===this._scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this._p0Scaled),this.copyScaled(e,this._p1Scaled),this.intersectsScaled(this._p0Scaled,this._p1Scaled))}scale(t){return Math.round(t*this._scaleFactor)}getCoordinate(){return this._originalPt}}qe.SAFE_ENV_EXPANSION_FACTOR=.75;class Be{constructor(){Be.constructor_.apply(this,arguments)}static constructor_(){this.selectedSegment=new be}select(){if(1===arguments.length);else if(2===arguments.length){const t=arguments[1];arguments[0].getLineSegment(t,this.selectedSegment),this.select(this.selectedSegment)}}}class Ye{constructor(){Ye.constructor_.apply(this,arguments)}static constructor_(){this._index=null;const t=arguments[0];this._index=t}snap(){if(1===arguments.length){const t=arguments[0];return this.snap(t,null,-1)}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=t.getSafeEnvelope(),n=new ze(t,e,s);return this._index.query(i,new class{get interfaces_(){return[Le]}visitItem(t){t.select(i,n)}}),n.isNodeAdded()}}}class ze extends Be{constructor(){super(),ze.constructor_.apply(this,arguments)}static constructor_(){this._hotPixel=null,this._parentEdge=null,this._hotPixelVertexIndex=null,this._isNodeAdded=!1;const t=arguments[0],e=arguments[1],s=arguments[2];this._hotPixel=t,this._parentEdge=e,this._hotPixelVertexIndex=s}select(){if(!(2===arguments.length&&Number.isInteger(arguments[1])&&arguments[0]instanceof Ae))return super.select.apply(this,arguments);{const t=arguments[1],e=arguments[0].getContext();if(this._parentEdge===e&&(t===this._hotPixelVertexIndex||t+1===this._hotPixelVertexIndex))return null;this._isNodeAdded|=this._hotPixel.addSnappedNode(e,t)}}isNodeAdded(){return this._isNodeAdded}}Ye.HotPixelSnapAction=ze;class Ue{isDone(){}processIntersections(t,e,s,i){}}class Xe{constructor(){Xe.constructor_.apply(this,arguments)}static constructor_(){this._li=null,this._interiorIntersections=null;const t=arguments[0];this._li=t,this._interiorIntersections=new P}isDone(){return!1}processIntersections(t,e,s,i){if(t===s&&e===i)return null;const n=t.getCoordinates()[e],r=t.getCoordinates()[e+1],o=s.getCoordinates()[i],a=s.getCoordinates()[i+1];if(this._li.computeIntersection(n,r,o,a),this._li.hasIntersection()&&this._li.isInteriorIntersection()){for(let t=0;t<this._li.getIntersectionNum();t++)this._interiorIntersections.add(this._li.getIntersection(t));t.addIntersections(this._li,e,0),s.addIntersections(this._li,i,1)}}getInteriorIntersections(){return this._interiorIntersections}get interfaces_(){return[Ue]}}class Ve{constructor(){Ve.constructor_.apply(this,arguments)}static constructor_(){this._pm=null,this._li=null,this._scaleFactor=null,this._noder=null,this._pointSnapper=null,this._nodedSegStrings=null;const t=arguments[0];this._pm=t,this._li=new pe,this._li.setPrecisionModel(t),this._scaleFactor=t.getScale()}checkCorrectness(e){const s=le.getNodedSubstrings(e),i=new fe(s);try{i.checkValid()}catch(e){if(!(e instanceof t))throw e;e.printStackTrace()}}getNodedSubstrings(){return le.getNodedSubstrings(this._nodedSegStrings)}snapRound(t,e){const s=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(s),this.computeVertexSnaps(t)}findInteriorIntersections(t,e){const s=new Xe(e);return this._noder.setSegmentIntersector(s),this._noder.computeNodes(t),s.getInteriorIntersections()}computeVertexSnaps(){if(w(arguments[0],E)){for(let t=arguments[0].iterator();t.hasNext();){const e=t.next();this.computeVertexSnaps(e)}}else if(arguments[0]instanceof le){const t=arguments[0],e=t.getCoordinates();for(let s=0;s<e.length;s++){const i=new qe(e[s],this._scaleFactor,this._li);this._pointSnapper.snap(i,t,s)&&t.addIntersection(e[s],s)}}}computeNodes(t){this._nodedSegStrings=t,this._noder=new Fe,this._pointSnapper=new Ye(this._noder.getIndex()),this.snapRound(t,this._li)}computeIntersectionSnaps(t){for(let e=t.iterator();e.hasNext();){const t=e.next(),s=new qe(t,this._scaleFactor,this._li);this._pointSnapper.snap(s)}}get interfaces_(){return[he]}}class ke{static toLocationSymbol(t){switch(t){case ke.EXTERIOR:return"e";case ke.BOUNDARY:return"b";case ke.INTERIOR:return"i";case ke.NONE:return"-"}throw new e("Unknown location value: "+t)}}ke.INTERIOR=0,ke.BOUNDARY=1,ke.EXTERIOR=2,ke.NONE=-1;class He{static opposite(t){return t===He.LEFT?He.RIGHT:t===He.RIGHT?He.LEFT:t}}He.ON=0,He.LEFT=1,He.RIGHT=2;class Ze extends t{constructor(t){super(t),this.name=Object.keys({EmptyStackException:Ze})[0]}}class We extends b{constructor(){super(),this.array=[]}add(t){return this.array.push(t),!0}get(t){if(t<0||t>=this.size())throw new O;return this.array[t]}push(t){return this.array.push(t),t}pop(){if(0===this.array.length)throw new Ze;return this.array.pop()}peek(){if(0===this.array.length)throw new Ze;return this.array[this.array.length-1]}empty(){return 0===this.array.length}isEmpty(){return this.empty()}search(t){return this.array.indexOf(t)}size(){return this.array.length}toArray(){return this.array.slice()}}class je{constructor(){je.constructor_.apply(this,arguments)}static constructor_(){this._minIndex=-1,this._minCoord=null,this._minDe=null,this._orientedDe=null}getCoordinate(){return this._minCoord}getRightmostSide(t,e){let s=this.getRightmostSideOfSegment(t,e);return s<0&&(s=this.getRightmostSideOfSegment(t,e-1)),s<0&&(this._minCoord=null,this.checkForRightmostCoordinate(t)),s}findRightmostEdgeAtVertex(){const t=this._minDe.getEdge().getCoordinates();u.isTrue(this._minIndex>0&&this._minIndex<t.length,"rightmost point expected to be interior vertex of edge");const e=t[this._minIndex-1],s=t[this._minIndex+1],i=At.index(this._minCoord,s,e);let n=!1;(e.y<this._minCoord.y&&s.y<this._minCoord.y&&i===At.COUNTERCLOCKWISE||e.y>this._minCoord.y&&s.y>this._minCoord.y&&i===At.CLOCKWISE)&&(n=!0),n&&(this._minIndex=this._minIndex-1)}getRightmostSideOfSegment(t,e){const s=t.getEdge().getCoordinates();if(e<0||e+1>=s.length)return-1;if(s[e].y===s[e+1].y)return-1;let i=He.LEFT;return s[e].y<s[e+1].y&&(i=He.RIGHT),i}getEdge(){return this._orientedDe}checkForRightmostCoordinate(t){const e=t.getEdge().getCoordinates();for(let s=0;s<e.length-1;s++)(null===this._minCoord||e[s].x>this._minCoord.x)&&(this._minDe=t,this._minIndex=s,this._minCoord=e[s])}findRightmostEdgeAtNode(){const t=this._minDe.getNode().getEdges();this._minDe=t.getRightmostEdge(),this._minDe.isForward()||(this._minDe=this._minDe.getSym(),this._minIndex=this._minDe.getEdge().getCoordinates().length-1)}findEdge(t){for(let e=t.iterator();e.hasNext();){const t=e.next();t.isForward()&&this.checkForRightmostCoordinate(t)}u.isTrue(0!==this._minIndex||this._minCoord.equals(this._minDe.getCoordinate()),"inconsistency in rightmost processing"),0===this._minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this._orientedDe=this._minDe;this.getRightmostSide(this._minDe,this._minIndex)===He.LEFT&&(this._orientedDe=this._minDe.getSym())}}class Ke{constructor(){this.array=[]}addLast(t){this.array.push(t)}removeFirst(){return this.array.shift()}isEmpty(){return 0===this.array.length}}class Qe{constructor(){Qe.constructor_.apply(this,arguments)}static constructor_(){this._finder=null,this._dirEdgeList=new P,this._nodes=new P,this._rightMostCoord=null,this._env=null,this._finder=new je}clearVisitedEdges(){for(let t=this._dirEdgeList.iterator();t.hasNext();){t.next().setVisited(!1)}}compareTo(t){const e=t;return this._rightMostCoord.x<e._rightMostCoord.x?-1:this._rightMostCoord.x>e._rightMostCoord.x?1:0}getEnvelope(){if(null===this._env){const t=new y;for(let e=this._dirEdgeList.iterator();e.hasNext();){const s=e.next().getEdge().getCoordinates();for(let e=0;e<s.length-1;e++)t.expandToInclude(s[e])}this._env=t}return this._env}addReachable(t){const e=new We;for(e.add(t);!e.empty();){const t=e.pop();this.add(t,e)}}copySymDepths(t){const e=t.getSym();e.setDepth(He.LEFT,t.getDepth(He.RIGHT)),e.setDepth(He.RIGHT,t.getDepth(He.LEFT))}add(t,e){t.setVisited(!0),this._nodes.add(t);for(let s=t.getEdges().iterator();s.hasNext();){const t=s.next();this._dirEdgeList.add(t);const i=t.getSym().getNode();i.isVisited()||e.push(i)}}getRightmostCoordinate(){return this._rightMostCoord}computeNodeDepth(t){let e=null;for(let s=t.getEdges().iterator();s.hasNext();){const t=s.next();if(t.isVisited()||t.getSym().isVisited()){e=t;break}}if(null===e)throw new ue("unable to find edge to compute depths at "+t.getCoordinate());t.getEdges().computeDepths(e);for(let e=t.getEdges().iterator();e.hasNext();){const t=e.next();t.setVisited(!0),this.copySymDepths(t)}}computeDepth(t){this.clearVisitedEdges();const e=this._finder.getEdge();e.getNode(),e.getLabel(),e.setEdgeDepths(He.RIGHT,t),this.copySymDepths(e),this.computeDepths(e)}create(t){this.addReachable(t),this._finder.findEdge(this._dirEdgeList),this._rightMostCoord=this._finder.getCoordinate()}findResultEdges(){for(let t=this._dirEdgeList.iterator();t.hasNext();){const e=t.next();e.getDepth(He.RIGHT)>=1&&e.getDepth(He.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0)}}computeDepths(t){const e=new Y,s=new Ke,i=t.getNode();for(s.addLast(i),e.add(i),t.setVisited(!0);!s.isEmpty();){const t=s.removeFirst();e.add(t),this.computeNodeDepth(t);for(let i=t.getEdges().iterator();i.hasNext();){const t=i.next().getSym();if(t.isVisited())continue;const n=t.getNode();e.contains(n)||(s.addLast(n),e.add(n))}}}getNodes(){return this._nodes}getDirectedEdges(){return this._dirEdgeList}get interfaces_(){return[i]}}class Je{constructor(){Je.constructor_.apply(this,arguments)}static constructor_(){this._inputLine=null,this._distanceTol=null,this._isDeleted=null,this._angleOrientation=At.COUNTERCLOCKWISE;const t=arguments[0];this._inputLine=t}static simplify(t,e){return new Je(t).simplify(e)}isDeletable(t,e,s,i){const n=this._inputLine[t],r=this._inputLine[e],o=this._inputLine[s];return!!this.isConcave(n,r,o)&&(!!this.isShallow(n,r,o,i)&&this.isShallowSampled(n,r,t,s,i))}deleteShallowConcavities(){let t=1,e=this.findNextNonDeletedIndex(t),s=this.findNextNonDeletedIndex(e),i=!1;for(;s<this._inputLine.length;){let n=!1;this.isDeletable(t,e,s,this._distanceTol)&&(this._isDeleted[e]=Je.DELETE,n=!0,i=!0),t=n?s:e,e=this.findNextNonDeletedIndex(t),s=this.findNextNonDeletedIndex(e)}return i}isShallowConcavity(t,e,s,i){if(!(At.index(t,e,s)===this._angleOrientation))return!1;return de.pointToSegment(e,t,s)<i}isShallowSampled(t,e,s,i,n){let r=Math.trunc((i-s)/Je.NUM_PTS_TO_CHECK);r<=0&&(r=1);for(let o=s;o<i;o+=r)if(!this.isShallow(t,e,this._inputLine[o],n))return!1;return!0}isConcave(t,e,s){return At.index(t,e,s)===this._angleOrientation}simplify(t){this._distanceTol=Math.abs(t),t<0&&(this._angleOrientation=At.CLOCKWISE),this._isDeleted=new Array(this._inputLine.length).fill(null);let e=!1;do{e=this.deleteShallowConcavities()}while(e);return this.collapseLine()}findNextNonDeletedIndex(t){let e=t+1;for(;e<this._inputLine.length&&this._isDeleted[e]===Je.DELETE;)e++;return e}isShallow(t,e,s,i){return de.pointToSegment(e,t,s)<i}collapseLine(){const t=new M;for(let e=0;e<this._inputLine.length;e++)this._isDeleted[e]!==Je.DELETE&&t.add(this._inputLine[e]);return t.toCoordinateArray()}}Je.INIT=0,Je.DELETE=1,Je.KEEP=1,Je.NUM_PTS_TO_CHECK=10;class $e{constructor(){$e.constructor_.apply(this,arguments)}static constructor_(){this._ptList=null,this._precisionModel=null,this._minimimVertexDistance=0,this._ptList=new P}getCoordinates(){return this._ptList.toArray($e.COORDINATE_ARRAY_TYPE)}setPrecisionModel(t){this._precisionModel=t}addPt(t){const e=new f(t);if(this._precisionModel.makePrecise(e),this.isRedundant(e))return null;this._ptList.add(e)}reverse(){}addPts(t,e){if(e)for(let e=0;e<t.length;e++)this.addPt(t[e]);else for(let e=t.length-1;e>=0;e--)this.addPt(t[e])}isRedundant(t){if(this._ptList.size()<1)return!1;const e=this._ptList.get(this._ptList.size()-1);return t.distance(e)<this._minimimVertexDistance}toString(){return(new vt).createLineString(this.getCoordinates()).toString()}closeRing(){if(this._ptList.size()<1)return null;const t=new f(this._ptList.get(0)),e=this._ptList.get(this._ptList.size()-1);if(t.equals(e))return null;this._ptList.add(t)}setMinimumVertexDistance(t){this._minimimVertexDistance=t}}$e.COORDINATE_ARRAY_TYPE=new Array(0).fill(null);class ts{static toDegrees(t){return 180*t/Math.PI}static isAcute(t,e,s){const i=t.x-e.x,n=t.y-e.y;return i*(s.x-e.x)+n*(s.y-e.y)>0}static isObtuse(t,e,s){const i=t.x-e.x,n=t.y-e.y;return i*(s.x-e.x)+n*(s.y-e.y)<0}static interiorAngle(t,e,s){const i=ts.angle(e,t),n=ts.angle(e,s);return Math.abs(n-i)}static normalizePositive(t){if(t<0){for(;t<0;)t+=ts.PI_TIMES_2;t>=ts.PI_TIMES_2&&(t=0)}else{for(;t>=ts.PI_TIMES_2;)t-=ts.PI_TIMES_2;t<0&&(t=0)}return t}static angleBetween(t,e,s){const i=ts.angle(e,t),n=ts.angle(e,s);return ts.diff(i,n)}static diff(t,e){let s=null;return s=t<e?e-t:t-e,s>Math.PI&&(s=2*Math.PI-s),s}static toRadians(t){return t*Math.PI/180}static normalize(t){for(;t>Math.PI;)t-=ts.PI_TIMES_2;for(;t<=-Math.PI;)t+=ts.PI_TIMES_2;return t}static angle(){if(1===arguments.length){const t=arguments[0];return Math.atan2(t.y,t.x)}if(2===arguments.length){const t=arguments[0],e=arguments[1],s=e.x-t.x,i=e.y-t.y;return Math.atan2(i,s)}}static getTurn(t,e){const s=Math.sin(e-t);return s>0?ts.COUNTERCLOCKWISE:s<0?ts.CLOCKWISE:ts.NONE}static angleBetweenOriented(t,e,s){const i=ts.angle(e,t),n=ts.angle(e,s)-i;return n<=-Math.PI?n+ts.PI_TIMES_2:n>Math.PI?n-ts.PI_TIMES_2:n}}ts.PI_TIMES_2=2*Math.PI,ts.PI_OVER_2=Math.PI/2,ts.PI_OVER_4=Math.PI/4,ts.COUNTERCLOCKWISE=At.COUNTERCLOCKWISE,ts.CLOCKWISE=At.CLOCKWISE,ts.NONE=At.COLLINEAR;class es{constructor(){es.constructor_.apply(this,arguments)}static constructor_(){this._maxCurveSegmentError=0,this._filletAngleQuantum=null,this._closingSegLengthFactor=1,this._segList=null,this._distance=0,this._precisionModel=null,this._bufParams=null,this._li=null,this._s0=null,this._s1=null,this._s2=null,this._seg0=new be,this._seg1=new be,this._offset0=new be,this._offset1=new be,this._side=0,this._hasNarrowConcaveAngle=!1;const t=arguments[0],e=arguments[1],s=arguments[2];this._precisionModel=t,this._bufParams=e,this._li=new pe,this._filletAngleQuantum=Math.PI/2/e.getQuadrantSegments(),e.getQuadrantSegments()>=8&&e.getJoinStyle()===S.JOIN_ROUND&&(this._closingSegLengthFactor=es.MAX_CLOSING_SEG_LEN_FACTOR),this.init(s)}getCoordinates(){return this._segList.getCoordinates()}addMitreJoin(t,e,s,i){const n=ge.intersection(e.p0,e.p1,s.p0,s.p1);if(null!==n){if((i<=0?1:n.distance(t)/Math.abs(i))<=this._bufParams.getMitreLimit())return this._segList.addPt(n),null}this.addLimitedMitreJoin(e,s,i,this._bufParams.getMitreLimit())}addLastSegment(){this._segList.addPt(this._offset1.p1)}initSideSegments(t,e,s){this._s1=t,this._s2=e,this._side=s,this._seg1.setCoordinates(t,e),this.computeOffsetSegment(this._seg1,s,this._distance,this._offset1)}addLimitedMitreJoin(t,e,s,i){const n=this._seg0.p1,r=ts.angle(n,this._seg0.p0),o=ts.angleBetweenOriented(this._seg0.p0,n,this._seg1.p1)/2,a=ts.normalize(r+o),l=ts.normalize(a+Math.PI),h=i*s,c=s-h*Math.abs(Math.sin(o)),u=n.x+h*Math.cos(l),g=n.y+h*Math.sin(l),d=new f(u,g),_=new be(n,d),p=_.pointAlongOffset(1,c),m=_.pointAlongOffset(1,-c);this._side===He.LEFT?(this._segList.addPt(p),this._segList.addPt(m)):(this._segList.addPt(m),this._segList.addPt(p))}addDirectedFillet(t,e,s,i,n){const r=i===At.CLOCKWISE?-1:1,o=Math.abs(e-s),a=Math.trunc(o/this._filletAngleQuantum+.5);if(a<1)return null;const l=o/a,h=new f;for(let s=0;s<a;s++){const i=e+r*s*l;h.x=t.x+n*Math.cos(i),h.y=t.y+n*Math.sin(i),this._segList.addPt(h)}}computeOffsetSegment(t,e,s,i){const n=e===He.LEFT?1:-1,r=t.p1.x-t.p0.x,o=t.p1.y-t.p0.y,a=Math.sqrt(r*r+o*o),l=n*s*r/a,h=n*s*o/a;i.p0.x=t.p0.x-h,i.p0.y=t.p0.y+l,i.p1.x=t.p1.x-h,i.p1.y=t.p1.y+l}addInsideTurn(t,e){if(this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1),this._li.hasIntersection())this._segList.addPt(this._li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this._offset0.p1.distance(this._offset1.p0)<this._distance*es.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this._segList.addPt(this._offset0.p1);else{if(this._segList.addPt(this._offset0.p1),this._closingSegLengthFactor>0){const t=new f((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(t);const e=new f((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(e)}else this._segList.addPt(this._s1);this._segList.addPt(this._offset1.p0)}}createCircle(t){const e=new f(t.x+this._distance,t.y);this._segList.addPt(e),this.addDirectedFillet(t,0,2*Math.PI,-1,this._distance),this._segList.closeRing()}addBevelJoin(t,e){this._segList.addPt(t.p1),this._segList.addPt(e.p0)}init(t){this._distance=t,this._maxCurveSegmentError=t*(1-Math.cos(this._filletAngleQuantum/2)),this._segList=new $e,this._segList.setPrecisionModel(this._precisionModel),this._segList.setMinimumVertexDistance(t*es.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)}addCollinear(t){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2);this._li.getIntersectionNum()>=2&&(this._bufParams.getJoinStyle()===S.JOIN_BEVEL||this._bufParams.getJoinStyle()===S.JOIN_MITRE?(t&&this._segList.addPt(this._offset0.p1),this._segList.addPt(this._offset1.p0)):this.addCornerFillet(this._s1,this._offset0.p1,this._offset1.p0,At.CLOCKWISE,this._distance))}addNextSegment(t,e){if(this._s0=this._s1,this._s1=this._s2,this._s2=t,this._seg0.setCoordinates(this._s0,this._s1),this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0),this._seg1.setCoordinates(this._s1,this._s2),this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1),this._s1.equals(this._s2))return null;const s=At.index(this._s0,this._s1,this._s2),i=s===At.CLOCKWISE&&this._side===He.LEFT||s===At.COUNTERCLOCKWISE&&this._side===He.RIGHT;0===s?this.addCollinear(e):i?this.addOutsideTurn(s,e):this.addInsideTurn(s,e)}addLineEndCap(t,e){const s=new be(t,e),i=new be;this.computeOffsetSegment(s,He.LEFT,this._distance,i);const n=new be;this.computeOffsetSegment(s,He.RIGHT,this._distance,n);const r=e.x-t.x,o=e.y-t.y,a=Math.atan2(o,r);switch(this._bufParams.getEndCapStyle()){case S.CAP_ROUND:this._segList.addPt(i.p1),this.addDirectedFillet(e,a+Math.PI/2,a-Math.PI/2,At.CLOCKWISE,this._distance),this._segList.addPt(n.p1);break;case S.CAP_FLAT:this._segList.addPt(i.p1),this._segList.addPt(n.p1);break;case S.CAP_SQUARE:const t=new f;t.x=Math.abs(this._distance)*Math.cos(a),t.y=Math.abs(this._distance)*Math.sin(a);const s=new f(i.p1.x+t.x,i.p1.y+t.y),r=new f(n.p1.x+t.x,n.p1.y+t.y);this._segList.addPt(s),this._segList.addPt(r)}}addOutsideTurn(t,e){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*es.OFFSET_SEGMENT_SEPARATION_FACTOR)return this._segList.addPt(this._offset0.p1),null;this._bufParams.getJoinStyle()===S.JOIN_MITRE?this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance):this._bufParams.getJoinStyle()===S.JOIN_BEVEL?this.addBevelJoin(this._offset0,this._offset1):(e&&this._segList.addPt(this._offset0.p1),this.addCornerFillet(this._s1,this._offset0.p1,this._offset1.p0,t,this._distance),this._segList.addPt(this._offset1.p0))}createSquare(t){this._segList.addPt(new f(t.x+this._distance,t.y+this._distance)),this._segList.addPt(new f(t.x+this._distance,t.y-this._distance)),this._segList.addPt(new f(t.x-this._distance,t.y-this._distance)),this._segList.addPt(new f(t.x-this._distance,t.y+this._distance)),this._segList.closeRing()}addSegments(t,e){this._segList.addPts(t,e)}addFirstSegment(){this._segList.addPt(this._offset1.p0)}addCornerFillet(t,e,s,i,n){const r=e.x-t.x,o=e.y-t.y;let a=Math.atan2(o,r);const l=s.x-t.x,h=s.y-t.y,c=Math.atan2(h,l);i===At.CLOCKWISE?a<=c&&(a+=2*Math.PI):a>=c&&(a-=2*Math.PI),this._segList.addPt(e),this.addDirectedFillet(t,a,c,i,n),this._segList.addPt(s)}closeRing(){this._segList.closeRing()}hasNarrowConcaveAngle(){return this._hasNarrowConcaveAngle}}es.OFFSET_SEGMENT_SEPARATION_FACTOR=.001,es.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=.001,es.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1e-6,es.MAX_CLOSING_SEG_LEN_FACTOR=80;class ss{constructor(){ss.constructor_.apply(this,arguments)}static constructor_(){this._distance=0,this._precisionModel=null,this._bufParams=null;const t=arguments[0],e=arguments[1];this._precisionModel=t,this._bufParams=e}static copyCoordinates(t){const e=new Array(t.length).fill(null);for(let s=0;s<e.length;s++)e[s]=new f(t[s]);return e}getOffsetCurve(t,e){if(this._distance=e,0===e)return null;const s=e<0,i=Math.abs(e),n=this.getSegGen(i);t.length<=1?this.computePointCurve(t[0],n):this.computeOffsetCurve(t,s,n);const r=n.getCoordinates();return s&&st.reverse(r),r}computeSingleSidedBufferCurve(t,e,s){const i=this.simplifyTolerance(this._distance);if(e){s.addSegments(t,!0);const e=Je.simplify(t,-i),n=e.length-1;s.initSideSegments(e[n],e[n-1],He.LEFT),s.addFirstSegment();for(let t=n-2;t>=0;t--)s.addNextSegment(e[t],!0)}else{s.addSegments(t,!1);const e=Je.simplify(t,i),n=e.length-1;s.initSideSegments(e[0],e[1],He.LEFT),s.addFirstSegment();for(let t=2;t<=n;t++)s.addNextSegment(e[t],!0)}s.addLastSegment(),s.closeRing()}computeRingBufferCurve(t,e,s){let i=this.simplifyTolerance(this._distance);e===He.RIGHT&&(i=-i);const n=Je.simplify(t,i),r=n.length-1;s.initSideSegments(n[r-1],n[0],e);for(let t=1;t<=r;t++){const e=1!==t;s.addNextSegment(n[t],e)}s.closeRing()}computeLineBufferCurve(t,e){const s=this.simplifyTolerance(this._distance),i=Je.simplify(t,s),n=i.length-1;e.initSideSegments(i[0],i[1],He.LEFT);for(let t=2;t<=n;t++)e.addNextSegment(i[t],!0);e.addLastSegment(),e.addLineEndCap(i[n-1],i[n]);const r=Je.simplify(t,-s),o=r.length-1;e.initSideSegments(r[o],r[o-1],He.LEFT);for(let t=o-2;t>=0;t--)e.addNextSegment(r[t],!0);e.addLastSegment(),e.addLineEndCap(r[1],r[0]),e.closeRing()}computePointCurve(t,e){switch(this._bufParams.getEndCapStyle()){case S.CAP_ROUND:e.createCircle(t);break;case S.CAP_SQUARE:e.createSquare(t)}}getLineCurve(t,e){if(this._distance=e,this.isLineOffsetEmpty(e))return null;const s=Math.abs(e),i=this.getSegGen(s);if(t.length<=1)this.computePointCurve(t[0],i);else if(this._bufParams.isSingleSided()){const s=e<0;this.computeSingleSidedBufferCurve(t,s,i)}else this.computeLineBufferCurve(t,i);return i.getCoordinates()}getBufferParameters(){return this._bufParams}simplifyTolerance(t){return t*this._bufParams.getSimplifyFactor()}getRingCurve(t,e,s){if(this._distance=s,t.length<=2)return this.getLineCurve(t,s);if(0===s)return ss.copyCoordinates(t);const i=this.getSegGen(s);return this.computeRingBufferCurve(t,e,i),i.getCoordinates()}computeOffsetCurve(t,e,s){const i=this.simplifyTolerance(this._distance);if(e){const e=Je.simplify(t,-i),n=e.length-1;s.initSideSegments(e[n],e[n-1],He.LEFT),s.addFirstSegment();for(let t=n-2;t>=0;t--)s.addNextSegment(e[t],!0)}else{const e=Je.simplify(t,i),n=e.length-1;s.initSideSegments(e[0],e[1],He.LEFT),s.addFirstSegment();for(let t=2;t<=n;t++)s.addNextSegment(e[t],!0)}s.addLastSegment()}isLineOffsetEmpty(t){return 0===t||t<0&&!this._bufParams.isSingleSided()}getSegGen(t){return new es(this._precisionModel,this._bufParams,t)}}class is{constructor(){is.constructor_.apply(this,arguments)}static constructor_(){if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){const t=arguments[0];this.init(t.length)}else if(Number.isInteger(arguments[0])){const t=arguments[0];this.init(1),this.location[He.ON]=t}else if(arguments[0]instanceof is){const t=arguments[0];if(this.init(t.location.length),null!==t)for(let e=0;e<this.location.length;e++)this.location[e]=t.location[e]}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.init(3),this.location[He.ON]=t,this.location[He.LEFT]=e,this.location[He.RIGHT]=s}}setAllLocations(t){for(let e=0;e<this.location.length;e++)this.location[e]=t}isNull(){for(let t=0;t<this.location.length;t++)if(this.location[t]!==ke.NONE)return!1;return!0}setAllLocationsIfNull(t){for(let e=0;e<this.location.length;e++)this.location[e]===ke.NONE&&(this.location[e]=t)}isLine(){return 1===this.location.length}merge(t){if(t.location.length>this.location.length){const t=new Array(3).fill(null);t[He.ON]=this.location[He.ON],t[He.LEFT]=ke.NONE,t[He.RIGHT]=ke.NONE,this.location=t}for(let e=0;e<this.location.length;e++)this.location[e]===ke.NONE&&e<t.location.length&&(this.location[e]=t.location[e])}getLocations(){return this.location}flip(){if(this.location.length<=1)return null;const t=this.location[He.LEFT];this.location[He.LEFT]=this.location[He.RIGHT],this.location[He.RIGHT]=t}get(t){return t<this.location.length?this.location[t]:ke.NONE}isEqualOnSide(t,e){return this.location[e]===t.location[e]}allPositionsEqual(t){for(let e=0;e<this.location.length;e++)if(this.location[e]!==t)return!1;return!0}toString(){const t=new Ot;return this.location.length>1&&t.append(ke.toLocationSymbol(this.location[He.LEFT])),t.append(ke.toLocationSymbol(this.location[He.ON])),this.location.length>1&&t.append(ke.toLocationSymbol(this.location[He.RIGHT])),t.toString()}setLocations(t,e,s){this.location[He.ON]=t,this.location[He.LEFT]=e,this.location[He.RIGHT]=s}isArea(){return this.location.length>1}isAnyNull(){for(let t=0;t<this.location.length;t++)if(this.location[t]===ke.NONE)return!0;return!1}setLocation(){if(1===arguments.length){const t=arguments[0];this.setLocation(He.ON,t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.location[t]=e}}init(t){this.location=new Array(t).fill(null),this.setAllLocations(ke.NONE)}}class ns{constructor(){ns.constructor_.apply(this,arguments)}static constructor_(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){const t=arguments[0];this.elt[0]=new is(t),this.elt[1]=new is(t)}else if(arguments[0]instanceof ns){const t=arguments[0];this.elt[0]=new is(t.elt[0]),this.elt[1]=new is(t.elt[1])}}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.elt[0]=new is(ke.NONE),this.elt[1]=new is(ke.NONE),this.elt[t].setLocation(e)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.elt[0]=new is(t,e,s),this.elt[1]=new is(t,e,s)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this.elt[0]=new is(ke.NONE,ke.NONE,ke.NONE),this.elt[1]=new is(ke.NONE,ke.NONE,ke.NONE),this.elt[t].setLocations(e,s,i)}}static toLineLabel(t){const e=new ns(ke.NONE);for(let s=0;s<2;s++)e.setLocation(s,t.getLocation(s));return e}getGeometryCount(){let t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t}setAllLocations(t,e){this.elt[t].setAllLocations(e)}isNull(t){return this.elt[t].isNull()}setAllLocationsIfNull(){if(1===arguments.length){const t=arguments[0];this.setAllLocationsIfNull(0,t),this.setAllLocationsIfNull(1,t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.elt[t].setAllLocationsIfNull(e)}}isLine(t){return this.elt[t].isLine()}merge(t){for(let e=0;e<2;e++)null===this.elt[e]&&null!==t.elt[e]?this.elt[e]=new is(t.elt[e]):this.elt[e].merge(t.elt[e])}flip(){this.elt[0].flip(),this.elt[1].flip()}getLocation(){if(1===arguments.length){const t=arguments[0];return this.elt[t].get(He.ON)}if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.elt[t].get(e)}}toString(){const t=new Ot;return null!==this.elt[0]&&(t.append("A:"),t.append(this.elt[0].toString())),null!==this.elt[1]&&(t.append(" B:"),t.append(this.elt[1].toString())),t.toString()}setLocation(){if(2===arguments.length){const t=arguments[0],e=arguments[1];this.elt[t].setLocation(He.ON,e)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.elt[t].setLocation(e,s)}}isEqualOnSide(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)}allPositionsEqual(t,e){return this.elt[t].allPositionsEqual(e)}toLine(t){this.elt[t].isArea()&&(this.elt[t]=new is(this.elt[t].location[0]))}isArea(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){const t=arguments[0];return this.elt[t].isArea()}}isAnyNull(t){return this.elt[t].isAnyNull()}}class rs{constructor(){rs.constructor_.apply(this,arguments)}static constructor_(){if(this._label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){const t=arguments[0];this._label=t}}setVisited(t){this._isVisited=t}setInResult(t){this._isInResult=t}setLabel(t){this._label=t}getLabel(){return this._label}setCovered(t){this._isCovered=t,this._isCoveredSet=!0}updateIM(t){u.isTrue(this._label.getGeometryCount()>=2,"found partial label"),this.computeIM(t)}isCovered(){return this._isCovered}isCoveredSet(){return this._isCoveredSet}isInResult(){return this._isInResult}isVisited(){return this._isVisited}}class os extends rs{constructor(){super(),os.constructor_.apply(this,arguments)}static constructor_(){this._coord=null,this._edges=null;const t=arguments[0],e=arguments[1];this._coord=t,this._edges=e,this._label=new ns(0,ke.NONE)}isIncidentEdgeInResult(){for(let t=this.getEdges().getEdges().iterator();t.hasNext();){if(t.next().getEdge().isInResult())return!0}return!1}isIsolated(){return 1===this._label.getGeometryCount()}getCoordinate(){return this._coord}computeMergedLocation(t,e){let s=ke.NONE;if(s=this._label.getLocation(e),!t.isNull(e)){const i=t.getLocation(e);s!==ke.BOUNDARY&&(s=i)}return s}setLabel(){if(2!==arguments.length||!Number.isInteger(arguments[1])||!Number.isInteger(arguments[0]))return super.setLabel.apply(this,arguments);{const t=arguments[0],e=arguments[1];null===this._label?this._label=new ns(t,e):this._label.setLocation(t,e)}}getEdges(){return this._edges}mergeLabel(){if(arguments[0]instanceof os){const t=arguments[0];this.mergeLabel(t._label)}else if(arguments[0]instanceof ns){const t=arguments[0];for(let e=0;e<2;e++){const s=this.computeMergedLocation(t,e);this._label.getLocation(e)===ke.NONE&&this._label.setLocation(e,s)}}}add(t){this._edges.insert(t),t.setNode(this)}setLabelBoundary(t){if(null===this._label)return null;let e=ke.NONE;null!==this._label&&(e=this._label.getLocation(t));let s=null;switch(e){case ke.BOUNDARY:s=ke.INTERIOR;break;case ke.INTERIOR:default:s=ke.BOUNDARY}this._label.setLocation(t,s)}print(t){t.println("node "+this._coord+" lbl: "+this._label)}computeIM(t){}}class as{constructor(){as.constructor_.apply(this,arguments)}static constructor_(){this.nodeMap=new Z,this.nodeFact=null;const t=arguments[0];this.nodeFact=t}print(t){for(let e=this.iterator();e.hasNext();){e.next().print(t)}}iterator(){return this.nodeMap.values().iterator()}values(){return this.nodeMap.values()}getBoundaryNodes(t){const e=new P;for(let s=this.iterator();s.hasNext();){const i=s.next();i.getLabel().getLocation(t)===ke.BOUNDARY&&e.add(i)}return e}add(t){const e=t.getCoordinate();this.addNode(e).add(t)}find(t){return this.nodeMap.get(t)}addNode(){if(arguments[0]instanceof f){const t=arguments[0];let e=this.nodeMap.get(t);return null===e&&(e=this.nodeFact.createNode(t),this.nodeMap.put(t,e)),e}if(arguments[0]instanceof os){const t=arguments[0],e=this.nodeMap.get(t.getCoordinate());return null===e?(this.nodeMap.put(t.getCoordinate(),t),t):(e.mergeLabel(t),e)}}}class ls{createNode(t){return new os(t,null)}}class hs{constructor(){hs.constructor_.apply(this,arguments)}static constructor_(){if(this._edge=null,this._label=null,this._node=null,this._p0=null,this._p1=null,this._dx=null,this._dy=null,this._quadrant=null,1===arguments.length){const t=arguments[0];this._edge=t}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];hs.constructor_.call(this,t,e,s,null)}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];hs.constructor_.call(this,t),this.init(e,s),this._label=i}}compareDirection(t){return this._dx===t._dx&&this._dy===t._dy?0:this._quadrant>t._quadrant?1:this._quadrant<t._quadrant?-1:At.index(t._p0,t._p1,this._p1)}getDy(){return this._dy}print(t){const e=Math.atan2(this._dy,this._dx),s=this.getClass().getName(),i=s.lastIndexOf("."),n=s.substring(i+1);t.print("  "+n+": "+this._p0+" - "+this._p1+" "+this._quadrant+":"+e+"   "+this._label)}getLabel(){return this._label}getEdge(){return this._edge}toString(){const t=Math.atan2(this._dy,this._dx),e=this.getClass().getName(),s=e.lastIndexOf(".");return"  "+e.substring(s+1)+": "+this._p0+" - "+this._p1+" "+this._quadrant+":"+t+"   "+this._label}computeLabel(t){}init(t,e){this._p0=t,this._p1=e,this._dx=e.x-t.x,this._dy=e.y-t.y,this._quadrant=Me.quadrant(this._dx,this._dy),u.isTrue(!(0===this._dx&&0===this._dy),"EdgeEnd with identical endpoints found")}getCoordinate(){return this._p0}setNode(t){this._node=t}compareTo(t){const e=t;return this.compareDirection(e)}getDirectedCoordinate(){return this._p1}getDx(){return this._dx}getQuadrant(){return this._quadrant}getNode(){return this._node}get interfaces_(){return[i]}}class cs extends hs{constructor(){super(),cs.constructor_.apply(this,arguments)}static constructor_(){this._isForward=null,this._isInResult=!1,this._isVisited=!1,this._sym=null,this._next=null,this._nextMin=null,this._edgeRing=null,this._minEdgeRing=null,this._depth=[0,-999,-999];const t=arguments[0],e=arguments[1];if(hs.constructor_.call(this,t),this._isForward=e,e)this.init(t.getCoordinate(0),t.getCoordinate(1));else{const e=t.getNumPoints()-1;this.init(t.getCoordinate(e),t.getCoordinate(e-1))}this.computeDirectedLabel()}static depthFactor(t,e){return t===ke.EXTERIOR&&e===ke.INTERIOR?1:t===ke.INTERIOR&&e===ke.EXTERIOR?-1:0}setVisited(t){this._isVisited=t}setDepth(t,e){if(-999!==this._depth[t]&&this._depth[t]!==e)throw new ue("assigned depths do not match",this.getCoordinate());this._depth[t]=e}isInteriorAreaEdge(){let t=!0;for(let e=0;e<2;e++)this._label.isArea(e)&&this._label.getLocation(e,He.LEFT)===ke.INTERIOR&&this._label.getLocation(e,He.RIGHT)===ke.INTERIOR||(t=!1);return t}setNextMin(t){this._nextMin=t}print(t){super.print.call(this,t),t.print(" "+this._depth[He.LEFT]+"/"+this._depth[He.RIGHT]),t.print(" ("+this.getDepthDelta()+")"),this._isInResult&&t.print(" inResult")}setMinEdgeRing(t){this._minEdgeRing=t}getSym(){return this._sym}isForward(){return this._isForward}setSym(t){this._sym=t}setVisitedEdge(t){this.setVisited(t),this._sym.setVisited(t)}getNextMin(){return this._nextMin}getDepth(t){return this._depth[t]}computeDirectedLabel(){this._label=new ns(this._edge.getLabel()),this._isForward||this._label.flip()}getNext(){return this._next}isLineEdge(){const t=this._label.isLine(0)||this._label.isLine(1),e=!this._label.isArea(0)||this._label.allPositionsEqual(0,ke.EXTERIOR),s=!this._label.isArea(1)||this._label.allPositionsEqual(1,ke.EXTERIOR);return t&&e&&s}setEdgeRing(t){this._edgeRing=t}getMinEdgeRing(){return this._minEdgeRing}getDepthDelta(){let t=this._edge.getDepthDelta();return this._isForward||(t=-t),t}setInResult(t){this._isInResult=t}getEdge(){return this._edge}printEdge(t){this.print(t),t.print(" "),this._isForward?this._edge.print(t):this._edge.printReverse(t)}setEdgeDepths(t,e){let s=this.getEdge().getDepthDelta();this._isForward||(s=-s);let i=1;t===He.LEFT&&(i=-1);const n=He.opposite(t),r=e+s*i;this.setDepth(t,e),this.setDepth(n,r)}getEdgeRing(){return this._edgeRing}isInResult(){return this._isInResult}setNext(t){this._next=t}isVisited(){return this._isVisited}}class us{constructor(){us.constructor_.apply(this,arguments)}static constructor_(){if(this._edges=new P,this._nodes=null,this._edgeEndList=new P,0===arguments.length)this._nodes=new as(new ls);else if(1===arguments.length){const t=arguments[0];this._nodes=new as(t)}}static linkResultDirectedEdges(t){for(let e=t.iterator();e.hasNext();){e.next().getEdges().linkResultDirectedEdges()}}printEdges(t){t.println("Edges:");for(let e=0;e<this._edges.size();e++){t.println("edge "+e+":");const s=this._edges.get(e);s.print(t),s.eiList.print(t)}}debugPrintln(t){et.out.println(t)}isBoundaryNode(t,e){const s=this._nodes.find(e);if(null===s)return!1;const i=s.getLabel();return null!==i&&i.getLocation(t)===ke.BOUNDARY}linkAllDirectedEdges(){for(let t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkAllDirectedEdges()}}debugPrint(t){et.out.print(t)}findEdgeEnd(t){for(let e=this.getEdgeEnds().iterator();e.hasNext();){const s=e.next();if(s.getEdge()===t)return s}return null}getNodes(){return this._nodes.values()}findEdge(t,e){for(let s=0;s<this._edges.size();s++){const i=this._edges.get(s),n=i.getCoordinates();if(t.equals(n[0])&&e.equals(n[1]))return i}return null}find(t){return this._nodes.find(t)}addNode(){if(arguments[0]instanceof os){const t=arguments[0];return this._nodes.addNode(t)}if(arguments[0]instanceof f){const t=arguments[0];return this._nodes.addNode(t)}}getNodeIterator(){return this._nodes.iterator()}linkResultDirectedEdges(){for(let t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkResultDirectedEdges()}}matchInSameDirection(t,e,s,i){return!!t.equals(s)&&(At.index(t,e,i)===At.COLLINEAR&&Me.quadrant(t,e)===Me.quadrant(s,i))}getEdgeEnds(){return this._edgeEndList}getEdgeIterator(){return this._edges.iterator()}findEdgeInSameDirection(t,e){for(let s=0;s<this._edges.size();s++){const i=this._edges.get(s),n=i.getCoordinates();if(this.matchInSameDirection(t,e,n[0],n[1]))return i;if(this.matchInSameDirection(t,e,n[n.length-1],n[n.length-2]))return i}return null}insertEdge(t){this._edges.add(t)}addEdges(t){for(let e=t.iterator();e.hasNext();){const t=e.next();this._edges.add(t);const s=new cs(t,!0),i=new cs(t,!1);s.setSym(i),i.setSym(s),this.add(s),this.add(i)}}add(t){this._nodes.add(t),this._edgeEndList.add(t)}}class gs{constructor(){gs.constructor_.apply(this,arguments)}static constructor_(){this._p=null,this._crossingCount=0,this._isPointOnSegment=!1;const t=arguments[0];this._p=t}static locatePointInRing(){if(arguments[0]instanceof f&&w(arguments[1],at)){const t=arguments[1],e=new gs(arguments[0]),s=new f,i=new f;for(let n=1;n<t.size();n++)if(t.getCoordinate(n,s),t.getCoordinate(n-1,i),e.countSegment(s,i),e.isOnSegment())return e.getLocation();return e.getLocation()}if(arguments[0]instanceof f&&arguments[1]instanceof Array){const t=arguments[1],e=new gs(arguments[0]);for(let s=1;s<t.length;s++){const i=t[s],n=t[s-1];if(e.countSegment(i,n),e.isOnSegment())return e.getLocation()}return e.getLocation()}}getLocation(){return this._isPointOnSegment?ke.BOUNDARY:this._crossingCount%2==1?ke.INTERIOR:ke.EXTERIOR}isPointInPolygon(){return this.getLocation()!==ke.EXTERIOR}isOnSegment(){return this._isPointOnSegment}countSegment(t,e){if(t.x<this._p.x&&e.x<this._p.x)return null;if(this._p.x===e.x&&this._p.y===e.y)return this._isPointOnSegment=!0,null;if(t.y===this._p.y&&e.y===this._p.y){let s=t.x,i=e.x;return s>i&&(s=e.x,i=t.x),this._p.x>=s&&this._p.x<=i&&(this._isPointOnSegment=!0),null}if(t.y>this._p.y&&e.y<=this._p.y||e.y>this._p.y&&t.y<=this._p.y){let s=At.index(t,e,this._p);if(s===At.COLLINEAR)return this._isPointOnSegment=!0,null;e.y<t.y&&(s=-s),s===At.LEFT&&this._crossingCount++}}}class ds{static isInRing(t,e){return ds.locateInRing(t,e)!==ke.EXTERIOR}static locateInRing(t,e){return gs.locatePointInRing(t,e)}static isOnLine(){if(arguments[0]instanceof f&&w(arguments[1],at)){const t=arguments[0],e=arguments[1],s=new pe,i=new f,n=new f,r=e.size();for(let o=1;o<r;o++)if(e.getCoordinate(o-1,i),e.getCoordinate(o,n),s.computeIntersection(t,i,n),s.hasIntersection())return!0;return!1}if(arguments[0]instanceof f&&arguments[1]instanceof Array){const t=arguments[0],e=arguments[1],s=new pe;for(let i=1;i<e.length;i++){const n=e[i-1],r=e[i];if(s.computeIntersection(t,n,r),s.hasIntersection())return!0}return!1}}}class _s{constructor(){_s.constructor_.apply(this,arguments)}static constructor_(){if(this._startDe=null,this._maxNodeDegree=-1,this._edges=new P,this._pts=new P,this._label=new ns(ke.NONE),this._ring=null,this._isHole=null,this._shell=null,this._holes=new P,this._geometryFactory=null,0===arguments.length);else if(2===arguments.length){const t=arguments[0],e=arguments[1];this._geometryFactory=e,this.computePoints(t),this.computeRing()}}computeRing(){if(null!==this._ring)return null;const t=new Array(this._pts.size()).fill(null);for(let e=0;e<this._pts.size();e++)t[e]=this._pts.get(e);this._ring=this._geometryFactory.createLinearRing(t),this._isHole=At.isCCW(this._ring.getCoordinates())}isIsolated(){return 1===this._label.getGeometryCount()}computePoints(t){this._startDe=t;let e=t,s=!0;do{if(null===e)throw new ue("Found null DirectedEdge");if(e.getEdgeRing()===this)throw new ue("Directed Edge visited twice during ring-building at "+e.getCoordinate());this._edges.add(e);const t=e.getLabel();u.isTrue(t.isArea()),this.mergeLabel(t),this.addPoints(e.getEdge(),e.isForward(),s),s=!1,this.setEdgeRing(e,this),e=this.getNext(e)}while(e!==this._startDe)}getLinearRing(){return this._ring}getCoordinate(t){return this._pts.get(t)}computeMaxNodeDegree(){this._maxNodeDegree=0;let t=this._startDe;do{const e=t.getNode().getEdges().getOutgoingDegree(this);e>this._maxNodeDegree&&(this._maxNodeDegree=e),t=this.getNext(t)}while(t!==this._startDe);this._maxNodeDegree*=2}addPoints(t,e,s){const i=t.getCoordinates();if(e){let t=1;s&&(t=0);for(let e=t;e<i.length;e++)this._pts.add(i[e])}else{let t=i.length-2;s&&(t=i.length-1);for(let e=t;e>=0;e--)this._pts.add(i[e])}}containsPoint(t){const e=this.getLinearRing();if(!e.getEnvelopeInternal().contains(t))return!1;if(!ds.isInRing(t,e.getCoordinates()))return!1;for(let e=this._holes.iterator();e.hasNext();){if(e.next().containsPoint(t))return!1}return!0}getMaxNodeDegree(){return this._maxNodeDegree<0&&this.computeMaxNodeDegree(),this._maxNodeDegree}setShell(t){this._shell=t,null!==t&&t.addHole(this)}toPolygon(t){const e=new Array(this._holes.size()).fill(null);for(let t=0;t<this._holes.size();t++)e[t]=this._holes.get(t).getLinearRing();return t.createPolygon(this.getLinearRing(),e)}isHole(){return this._isHole}setInResult(){let t=this._startDe;do{t.getEdge().setInResult(!0),t=t.getNext()}while(t!==this._startDe)}addHole(t){this._holes.add(t)}isShell(){return null===this._shell}getLabel(){return this._label}getEdges(){return this._edges}getShell(){return this._shell}mergeLabel(){if(1===arguments.length){const t=arguments[0];this.mergeLabel(t,0),this.mergeLabel(t,1)}else if(2===arguments.length){const t=arguments[1],e=arguments[0].getLocation(t,He.RIGHT);if(e===ke.NONE)return null;if(this._label.getLocation(t)===ke.NONE)return this._label.setLocation(t,e),null}}}class ps extends _s{constructor(){super(),ps.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];_s.constructor_.call(this,t,e)}getNext(t){return t.getNextMin()}setEdgeRing(t,e){t.setMinEdgeRing(e)}}class fs extends _s{constructor(){super(),fs.constructor_.apply(this,arguments)}static constructor_(){const t=arguments[0],e=arguments[1];_s.constructor_.call(this,t,e)}linkDirectedEdgesForMinimalEdgeRings(){let t=this._startDe;do{t.getNode().getEdges().linkMinimalDirectedEdges(this),t=t.getNext()}while(t!==this._startDe)}buildMinimalRings(){const t=new P;let e=this._startDe;do{if(null===e.getMinEdgeRing()){const s=new ps(e,this._geometryFactory);t.add(s)}e=e.getNext()}while(e!==this._startDe);return t}getNext(t){return t.getNext()}setEdgeRing(t,e){t.setEdgeRing(e)}}class ms{constructor(){ms.constructor_.apply(this,arguments)}static constructor_(){this._geometryFactory=null,this._shellList=new P;const t=arguments[0];this._geometryFactory=t}static findEdgeRingContaining(t,e){const s=t.getLinearRing(),i=s.getEnvelopeInternal();let n=s.getCoordinateN(0),r=null,o=null;for(let t=e.iterator();t.hasNext();){const e=t.next(),a=e.getLinearRing(),l=a.getEnvelopeInternal();if(l.equals(i))continue;if(!l.contains(i))continue;n=st.ptNotInList(s.getCoordinates(),a.getCoordinates());let h=!1;ds.isInRing(n,a.getCoordinates())&&(h=!0),h&&(null===r||o.contains(l))&&(r=e,o=r.getLinearRing().getEnvelopeInternal())}return r}sortShellsAndHoles(t,e,s){for(let i=t.iterator();i.hasNext();){const t=i.next();t.isHole()?s.add(t):e.add(t)}}computePolygons(t){const e=new P;for(let s=t.iterator();s.hasNext();){const t=s.next().toPolygon(this._geometryFactory);e.add(t)}return e}placeFreeHoles(t,e){for(let s=e.iterator();s.hasNext();){const e=s.next();if(null===e.getShell()){const s=ms.findEdgeRingContaining(e,t);if(null===s)throw new ue("unable to assign hole to a shell",e.getCoordinate(0));e.setShell(s)}}}buildMinimalEdgeRings(t,e,s){const i=new P;for(let n=t.iterator();n.hasNext();){const t=n.next();if(t.getMaxNodeDegree()>2){t.linkDirectedEdgesForMinimalEdgeRings();const i=t.buildMinimalRings(),n=this.findShell(i);null!==n?(this.placePolygonHoles(n,i),e.add(n)):s.addAll(i)}else i.add(t)}return i}buildMaximalEdgeRings(t){const e=new P;for(let s=t.iterator();s.hasNext();){const t=s.next();if(t.isInResult()&&t.getLabel().isArea()&&null===t.getEdgeRing()){const s=new fs(t,this._geometryFactory);e.add(s),s.setInResult()}}return e}placePolygonHoles(t,e){for(let s=e.iterator();s.hasNext();){const e=s.next();e.isHole()&&e.setShell(t)}}getPolygons(){return this.computePolygons(this._shellList)}findShell(t){let e=0,s=null;for(let i=t.iterator();i.hasNext();){const t=i.next();t.isHole()||(s=t,e++)}return u.isTrue(e<=1,"found two shells in MinimalEdgeRing list"),s}add(){if(1===arguments.length){const t=arguments[0];this.add(t.getEdgeEnds(),t.getNodes())}else if(2===arguments.length){const t=arguments[0],e=arguments[1];us.linkResultDirectedEdges(e);const s=this.buildMaximalEdgeRings(t),i=new P,n=this.buildMinimalEdgeRings(s,this._shellList,i);this.sortShellsAndHoles(n,this._shellList,i),this.placeFreeHoles(this._shellList,i)}}}class ys{constructor(){ys.constructor_.apply(this,arguments)}static constructor_(){this._subgraphs=null,this._seg=new be;const t=arguments[0];this._subgraphs=t}findStabbedSegments(){if(1===arguments.length){const t=arguments[0],e=new P;for(let s=this._subgraphs.iterator();s.hasNext();){const i=s.next(),n=i.getEnvelope();t.y<n.getMinY()||t.y>n.getMaxY()||this.findStabbedSegments(t,i.getDirectedEdges(),e)}return e}if(3===arguments.length)if(w(arguments[2],b)&&arguments[0]instanceof f&&arguments[1]instanceof cs){const t=arguments[0],e=arguments[1],s=arguments[2],i=e.getEdge().getCoordinates();for(let n=0;n<i.length-1;n++){this._seg.p0=i[n],this._seg.p1=i[n+1],this._seg.p0.y>this._seg.p1.y&&this._seg.reverse();if(Math.max(this._seg.p0.x,this._seg.p1.x)<t.x)continue;if(this._seg.isHorizontal())continue;if(t.y<this._seg.p0.y||t.y>this._seg.p1.y)continue;if(At.index(this._seg.p0,this._seg.p1,t)===At.RIGHT)continue;let r=e.getDepth(He.LEFT);this._seg.p0.equals(i[n])||(r=e.getDepth(He.RIGHT));const o=new Is(this._seg,r);s.add(o)}}else if(w(arguments[2],b)&&arguments[0]instanceof f&&w(arguments[1],b)){const t=arguments[0],e=arguments[2];for(let s=arguments[1].iterator();s.hasNext();){const i=s.next();i.isForward()&&this.findStabbedSegments(t,i,e)}}}getDepth(t){const e=this.findStabbedSegments(t);if(0===e.size())return 0;return Ne.min(e)._leftDepth}}class Is{constructor(){Is.constructor_.apply(this,arguments)}static constructor_(){this._upwardSeg=null,this._leftDepth=null;const t=arguments[0],e=arguments[1];this._upwardSeg=new be(t),this._leftDepth=e}compareX(t,e){const s=t.p0.compareTo(e.p0);return 0!==s?s:t.p1.compareTo(e.p1)}toString(){return this._upwardSeg.toString()}compareTo(t){const e=t;if(this._upwardSeg.minX()>=e._upwardSeg.maxX())return 1;if(this._upwardSeg.maxX()<=e._upwardSeg.minX())return-1;let s=this._upwardSeg.orientationIndex(e._upwardSeg);return 0!==s?s:(s=-1*e._upwardSeg.orientationIndex(this._upwardSeg),0!==s?s:this._upwardSeg.compareTo(e._upwardSeg))}get interfaces_(){return[i]}}ys.DepthSegment=Is;class Es extends t{constructor(){super(),Es.constructor_.apply(this,arguments)}static constructor_(){t.constructor_.call(this,"Projective point not representable on the Cartesian plane.")}}class xs{constructor(){xs.constructor_.apply(this,arguments)}static constructor_(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){const t=arguments[0];this.x=t.x,this.y=t.y,this.w=1}else if(2===arguments.length){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1];this.x=t,this.y=e,this.w=1}else if(arguments[0]instanceof xs&&arguments[1]instanceof xs){const t=arguments[0],e=arguments[1];this.x=t.y*e.w-e.y*t.w,this.y=e.x*t.w-t.x*e.w,this.w=t.x*e.y-e.x*t.y}else if(arguments[0]instanceof f&&arguments[1]instanceof f){const t=arguments[0],e=arguments[1];this.x=t.y-e.y,this.y=e.x-t.x,this.w=t.x*e.y-e.x*t.y}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this.x=t,this.y=e,this.w=s}else if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=t.y-e.y,r=e.x-t.x,o=t.x*e.y-e.x*t.y,a=s.y-i.y,l=i.x-s.x,h=s.x*i.y-i.x*s.y;this.x=r*h-l*o,this.y=a*o-n*h,this.w=n*l-a*r}}getCoordinate(){const t=new f;return t.x=this.getX(),t.y=this.getY(),t}getX(){const t=this.x/this.w;if(l.isNaN(t)||l.isInfinite(t))throw new Es;return t}getY(){const t=this.y/this.w;if(l.isNaN(t)||l.isInfinite(t))throw new Es;return t}}class Ns{constructor(){Ns.constructor_.apply(this,arguments)}static constructor_(){this.p0=null,this.p1=null,this.p2=null;const t=arguments[0],e=arguments[1],s=arguments[2];this.p0=t,this.p1=e,this.p2=s}static isAcute(t,e,s){return!!ts.isAcute(t,e,s)&&(!!ts.isAcute(e,s,t)&&!!ts.isAcute(s,t,e))}static circumcentre(t,e,s){const i=s.x,n=s.y,r=t.x-i,o=t.y-n,a=e.x-i,l=e.y-n,h=2*Ns.det(r,o,a,l),c=Ns.det(o,r*r+o*o,l,a*a+l*l),u=Ns.det(r,r*r+o*o,a,a*a+l*l);return new f(i-c/h,n+u/h)}static perpendicularBisector(t,e){const s=e.x-t.x,i=e.y-t.y,n=new xs(t.x+s/2,t.y+i/2,1),r=new xs(t.x-i+s/2,t.y+s+i/2,1);return new xs(n,r)}static angleBisector(t,e,s){const i=e.distance(t),n=i/(i+e.distance(s)),r=s.x-t.x,o=s.y-t.y;return new f(t.x+n*r,t.y+n*o)}static inCentre(t,e,s){const i=e.distance(s),n=t.distance(s),r=t.distance(e),o=i+n+r,a=(i*t.x+n*e.x+r*s.x)/o,l=(i*t.y+n*e.y+r*s.y)/o;return new f(a,l)}static area(t,e,s){return Math.abs(((s.x-t.x)*(e.y-t.y)-(e.x-t.x)*(s.y-t.y))/2)}static signedArea(t,e,s){return((s.x-t.x)*(e.y-t.y)-(e.x-t.x)*(s.y-t.y))/2}static det(t,e,s,i){return t*i-e*s}static interpolateZ(t,e,s,i){const n=e.x,r=e.y,o=s.x-n,a=i.x-n,l=s.y-r,h=i.y-r,c=o*h-a*l,u=t.x-n,g=t.y-r,d=(h*u-a*g)/c,_=(-l*u+o*g)/c;return e.getZ()+d*(s.getZ()-e.getZ())+_*(i.getZ()-e.getZ())}static longestSideLength(t,e,s){const i=t.distance(e),n=e.distance(s),r=s.distance(t);let o=i;return n>o&&(o=n),r>o&&(o=r),o}static circumcentreDD(t,e,s){const i=bt.valueOf(t.x).subtract(s.x),n=bt.valueOf(t.y).subtract(s.y),r=bt.valueOf(e.x).subtract(s.x),o=bt.valueOf(e.y).subtract(s.y),a=bt.determinant(i,n,r,o).multiply(2),l=i.sqr().add(n.sqr()),h=r.sqr().add(o.sqr()),c=bt.determinant(n,l,o,h),u=bt.determinant(i,l,r,h),g=bt.valueOf(s.x).subtract(c.divide(a)).doubleValue(),d=bt.valueOf(s.y).add(u.divide(a)).doubleValue();return new f(g,d)}static area3D(t,e,s){const i=e.x-t.x,n=e.y-t.y,r=e.getZ()-t.getZ(),o=s.x-t.x,a=s.y-t.y,l=s.getZ()-t.getZ(),h=n*l-r*a,c=r*o-i*l,u=i*a-n*o,g=h*h+c*c+u*u;return Math.sqrt(g)/2}static centroid(t,e,s){const i=(t.x+e.x+s.x)/3,n=(t.y+e.y+s.y)/3;return new f(i,n)}interpolateZ(t){if(null===t)throw new e("Supplied point is null.");return Ns.interpolateZ(t,this.p0,this.p1,this.p2)}longestSideLength(){return Ns.longestSideLength(this.p0,this.p1,this.p2)}isAcute(){return Ns.isAcute(this.p0,this.p1,this.p2)}circumcentre(){return Ns.circumcentre(this.p0,this.p1,this.p2)}inCentre(){return Ns.inCentre(this.p0,this.p1,this.p2)}area(){return Ns.area(this.p0,this.p1,this.p2)}signedArea(){return Ns.signedArea(this.p0,this.p1,this.p2)}area3D(){return Ns.area3D(this.p0,this.p1,this.p2)}centroid(){return Ns.centroid(this.p0,this.p1,this.p2)}}class Ts{constructor(){Ts.constructor_.apply(this,arguments)}static constructor_(){this._inputGeom=null,this._distance=null,this._curveBuilder=null,this._curveList=new P;const t=arguments[0],e=arguments[1],s=arguments[2];this._inputGeom=t,this._distance=e,this._curveBuilder=s}addRingSide(t,e,s,i,n){if(0===e&&t.length<gt.MINIMUM_VALID_SIZE)return null;let r=i,o=n;t.length>=gt.MINIMUM_VALID_SIZE&&At.isCCW(t)&&(r=n,o=i,s=He.opposite(s));const a=this._curveBuilder.getRingCurve(t,s,e);this.addCurve(a,r,o)}addRingBothSides(t,e){this.addRingSide(t,e,He.LEFT,ke.EXTERIOR,ke.INTERIOR),this.addRingSide(t,e,He.RIGHT,ke.INTERIOR,ke.EXTERIOR)}addPoint(t){if(this._distance<=0)return null;const e=t.getCoordinates(),s=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(s,ke.EXTERIOR,ke.INTERIOR)}addPolygon(t){let e=this._distance,s=He.LEFT;this._distance<0&&(e=-this._distance,s=He.RIGHT);const i=t.getExteriorRing(),n=st.removeRepeatedPoints(i.getCoordinates());if(this._distance<0&&this.isErodedCompletely(i,this._distance))return null;if(this._distance<=0&&n.length<3)return null;this.addRingSide(n,e,s,ke.EXTERIOR,ke.INTERIOR);for(let i=0;i<t.getNumInteriorRing();i++){const n=t.getInteriorRingN(i),r=st.removeRepeatedPoints(n.getCoordinates());this._distance>0&&this.isErodedCompletely(n,-this._distance)||this.addRingSide(r,e,He.opposite(s),ke.INTERIOR,ke.EXTERIOR)}}isTriangleErodedCompletely(t,e){const s=new Ns(t[0],t[1],t[2]),i=s.inCentre();return de.pointToSegment(i,s.p0,s.p1)<Math.abs(e)}addLineString(t){if(this._curveBuilder.isLineOffsetEmpty(this._distance))return null;const e=st.removeRepeatedPoints(t.getCoordinates());if(st.isRing(e)&&!this._curveBuilder.getBufferParameters().isSingleSided())this.addRingBothSides(e,this._distance);else{const t=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(t,ke.EXTERIOR,ke.INTERIOR)}}add(t){if(t.isEmpty())return null;if(t instanceof Mt)this.addPolygon(t);else if(t instanceof ut)this.addLineString(t);else if(t instanceof St)this.addPoint(t);else if(t instanceof Dt)this.addCollection(t);else if(t instanceof Rt)this.addCollection(t);else if(t instanceof Et)this.addCollection(t);else{if(!(t instanceof yt))throw new N(t.getGeometryType());this.addCollection(t)}}addCurve(t,e,s){if(null===t||t.length<2)return null;const i=new le(t,new ns(0,ke.BOUNDARY,e,s));this._curveList.add(i)}getCurves(){return this.add(this._inputGeom),this._curveList}isErodedCompletely(t,e){const s=t.getCoordinates();if(s.length<4)return e<0;if(4===s.length)return this.isTriangleErodedCompletely(s,e);const i=t.getEnvelopeInternal(),n=Math.min(i.getHeight(),i.getWidth());return e<0&&2*Math.abs(e)>n}addCollection(t){for(let e=0;e<t.getNumGeometries();e++){const s=t.getGeometryN(e);this.add(s)}}}class Rs{locate(t){}}class Ls{constructor(){Ls.constructor_.apply(this,arguments)}static constructor_(){this._parent=null,this._atStart=null,this._max=null,this._index=null,this._subcollectionIterator=null;const t=arguments[0];this._parent=t,this._atStart=!0,this._index=0,this._max=t.getNumGeometries()}static isAtomic(t){return!(t instanceof yt)}next(){if(this._atStart)return this._atStart=!1,Ls.isAtomic(this._parent)&&this._index++,this._parent;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return this._subcollectionIterator.next();this._subcollectionIterator=null}if(this._index>=this._max)throw new x;const t=this._parent.getGeometryN(this._index++);return t instanceof yt?(this._subcollectionIterator=new Ls(t),this._subcollectionIterator.next()):t}hasNext(){if(this._atStart)return!0;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return!0;this._subcollectionIterator=null}return!(this._index>=this._max)}remove(){throw new N(this.getClass().getName())}get interfaces_(){return[F]}}class Cs{constructor(){Cs.constructor_.apply(this,arguments)}static constructor_(){this._geom=null;const t=arguments[0];this._geom=t}static locatePointInPolygon(t,e){if(e.isEmpty())return ke.EXTERIOR;const s=e.getExteriorRing(),i=Cs.locatePointInRing(t,s);if(i!==ke.INTERIOR)return i;for(let s=0;s<e.getNumInteriorRing();s++){const i=e.getInteriorRingN(s),n=Cs.locatePointInRing(t,i);if(n===ke.BOUNDARY)return ke.BOUNDARY;if(n===ke.INTERIOR)return ke.EXTERIOR}return ke.INTERIOR}static locatePointInRing(t,e){return e.getEnvelopeInternal().intersects(t)?ds.locateInRing(t,e.getCoordinates()):ke.EXTERIOR}static isContained(t,e){return ke.EXTERIOR!==Cs.locate(t,e)}static locate(t,e){return e.isEmpty()?ke.EXTERIOR:e.getEnvelopeInternal().intersects(t)?Cs.locateInGeometry(t,e):ke.EXTERIOR}static containsPointInPolygon(t,e){return ke.EXTERIOR!==Cs.locatePointInPolygon(t,e)}static locateInGeometry(t,e){if(e instanceof Mt)return Cs.locatePointInPolygon(t,e);if(e instanceof yt){const s=new Ls(e);for(;s.hasNext();){const i=s.next();if(i!==e){const e=Cs.locateInGeometry(t,i);if(e!==ke.EXTERIOR)return e}}}return ke.EXTERIOR}locate(t){return Cs.locate(t,this._geom)}get interfaces_(){return[Rs]}}class Ss{constructor(){Ss.constructor_.apply(this,arguments)}static constructor_(){this._edgeMap=new Z,this._edgeList=null,this._ptInAreaLocation=[ke.NONE,ke.NONE]}getNextCW(t){this.getEdges();const e=this._edgeList.indexOf(t);let s=e-1;return 0===e&&(s=this._edgeList.size()-1),this._edgeList.get(s)}propagateSideLabels(t){let e=ke.NONE;for(let s=this.iterator();s.hasNext();){const i=s.next().getLabel();i.isArea(t)&&i.getLocation(t,He.LEFT)!==ke.NONE&&(e=i.getLocation(t,He.LEFT))}if(e===ke.NONE)return null;let s=e;for(let e=this.iterator();e.hasNext();){const i=e.next(),n=i.getLabel();if(n.getLocation(t,He.ON)===ke.NONE&&n.setLocation(t,He.ON,s),n.isArea(t)){const e=n.getLocation(t,He.LEFT),r=n.getLocation(t,He.RIGHT);if(r!==ke.NONE){if(r!==s)throw new ue("side location conflict",i.getCoordinate());e===ke.NONE&&u.shouldNeverReachHere("found single null side (at "+i.getCoordinate()+")"),s=e}else u.isTrue(n.getLocation(t,He.LEFT)===ke.NONE,"found single null side"),n.setLocation(t,He.RIGHT,s),n.setLocation(t,He.LEFT,s)}}}getCoordinate(){const t=this.iterator();if(!t.hasNext())return null;return t.next().getCoordinate()}checkAreaLabelsConsistent(t){const e=this.getEdges();if(e.size()<=0)return!0;const s=e.size()-1,i=e.get(s).getLabel().getLocation(t,He.LEFT);u.isTrue(i!==ke.NONE,"Found unlabelled area edge");let n=i;for(let e=this.iterator();e.hasNext();){const s=e.next().getLabel();u.isTrue(s.isArea(t),"Found non-area edge");const i=s.getLocation(t,He.LEFT),r=s.getLocation(t,He.RIGHT);if(i===r)return!1;if(r!==n)return!1;n=i}return!0}findIndex(t){this.iterator();for(let e=0;e<this._edgeList.size();e++){if(this._edgeList.get(e)===t)return e}return-1}iterator(){return this.getEdges().iterator()}getEdges(){return null===this._edgeList&&(this._edgeList=new P(this._edgeMap.values())),this._edgeList}getLocation(t,e,s){return this._ptInAreaLocation[t]===ke.NONE&&(this._ptInAreaLocation[t]=Cs.locate(e,s[t].getGeometry())),this._ptInAreaLocation[t]}toString(){const t=new Ot;t.append("EdgeEndStar:   "+this.getCoordinate()),t.append("\n");for(let e=this.iterator();e.hasNext();){const s=e.next();t.append(s),t.append("\n")}return t.toString()}computeEdgeEndLabels(t){for(let e=this.iterator();e.hasNext();){e.next().computeLabel(t)}}computeLabelling(t){this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);const e=[!1,!1];for(let t=this.iterator();t.hasNext();){const s=t.next().getLabel();for(let t=0;t<2;t++)s.isLine(t)&&s.getLocation(t)===ke.BOUNDARY&&(e[t]=!0)}for(let s=this.iterator();s.hasNext();){const i=s.next(),n=i.getLabel();for(let s=0;s<2;s++)if(n.isAnyNull(s)){let r=ke.NONE;if(e[s])r=ke.EXTERIOR;else{const e=i.getCoordinate();r=this.getLocation(s,e,t)}n.setAllLocationsIfNull(s,r)}}}getDegree(){return this._edgeMap.size()}insertEdgeEnd(t,e){this._edgeMap.put(t,e),this._edgeList=null}print(t){et.out.println("EdgeEndStar:   "+this.getCoordinate());for(let e=this.iterator();e.hasNext();){e.next().print(t)}}isAreaLabelsConsistent(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)}}class ws extends Ss{constructor(){super(),ws.constructor_.apply(this,arguments)}static constructor_(){this._resultAreaEdgeList=null,this._label=null,this._SCANNING_FOR_INCOMING=1,this._LINKING_TO_OUTGOING=2}linkResultDirectedEdges(){this.getResultAreaEdges();let t=null,e=null,s=this._SCANNING_FOR_INCOMING;for(let i=0;i<this._resultAreaEdgeList.size();i++){const n=this._resultAreaEdgeList.get(i),r=n.getSym();if(n.getLabel().isArea())switch(null===t&&n.isInResult()&&(t=n),s){case this._SCANNING_FOR_INCOMING:if(!r.isInResult())continue;e=r,s=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(!n.isInResult())continue;e.setNext(n),s=this._SCANNING_FOR_INCOMING}}if(s===this._LINKING_TO_OUTGOING){if(null===t)throw new ue("no outgoing dirEdge found",this.getCoordinate());u.isTrue(t.isInResult(),"unable to link last incoming dirEdge"),e.setNext(t)}}insert(t){const e=t;this.insertEdgeEnd(e,e)}getRightmostEdge(){const t=this.getEdges(),e=t.size();if(e<1)return null;const s=t.get(0);if(1===e)return s;const i=t.get(e-1),n=s.getQuadrant(),r=i.getQuadrant();return Me.isNorthern(n)&&Me.isNorthern(r)?s:Me.isNorthern(n)||Me.isNorthern(r)?0!==s.getDy()?s:0!==i.getDy()?i:(u.shouldNeverReachHere("found two horizontal edges incident on node"),null):i}updateLabelling(t){for(let e=this.iterator();e.hasNext();){const s=e.next().getLabel();s.setAllLocationsIfNull(0,t.getLocation(0)),s.setAllLocationsIfNull(1,t.getLocation(1))}}linkAllDirectedEdges(){this.getEdges();let t=null,e=null;for(let s=this._edgeList.size()-1;s>=0;s--){const i=this._edgeList.get(s),n=i.getSym();null===e&&(e=n),null!==t&&n.setNext(t),t=i}e.setNext(t)}computeDepths(){if(1===arguments.length){const t=arguments[0],e=this.findIndex(t),s=t.getDepth(He.LEFT),i=t.getDepth(He.RIGHT),n=this.computeDepths(e+1,this._edgeList.size(),s);if(this.computeDepths(0,e,n)!==i)throw new ue("depth mismatch at "+t.getCoordinate())}else if(3===arguments.length){const t=arguments[1];let e=arguments[2];for(let s=arguments[0];s<t;s++){const t=this._edgeList.get(s);t.setEdgeDepths(He.RIGHT,e),e=t.getDepth(He.LEFT)}return e}}mergeSymLabels(){for(let t=this.iterator();t.hasNext();){const e=t.next();e.getLabel().merge(e.getSym().getLabel())}}linkMinimalDirectedEdges(t){let e=null,s=null,i=this._SCANNING_FOR_INCOMING;for(let n=this._resultAreaEdgeList.size()-1;n>=0;n--){const r=this._resultAreaEdgeList.get(n),o=r.getSym();switch(null===e&&r.getEdgeRing()===t&&(e=r),i){case this._SCANNING_FOR_INCOMING:if(o.getEdgeRing()!==t)continue;s=o,i=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(r.getEdgeRing()!==t)continue;s.setNextMin(r),i=this._SCANNING_FOR_INCOMING}}i===this._LINKING_TO_OUTGOING&&(u.isTrue(null!==e,"found null for first outgoing dirEdge"),u.isTrue(e.getEdgeRing()===t,"unable to link last incoming dirEdge"),s.setNextMin(e))}getOutgoingDegree(){if(0===arguments.length){let t=0;for(let e=this.iterator();e.hasNext();){e.next().isInResult()&&t++}return t}if(1===arguments.length){const t=arguments[0];let e=0;for(let s=this.iterator();s.hasNext();){s.next().getEdgeRing()===t&&e++}return e}}getLabel(){return this._label}findCoveredLineEdges(){let t=ke.NONE;for(let e=this.iterator();e.hasNext();){const s=e.next(),i=s.getSym();if(!s.isLineEdge()){if(s.isInResult()){t=ke.INTERIOR;break}if(i.isInResult()){t=ke.EXTERIOR;break}}}if(t===ke.NONE)return null;let e=t;for(let t=this.iterator();t.hasNext();){const s=t.next(),i=s.getSym();s.isLineEdge()?s.getEdge().setCovered(e===ke.INTERIOR):(s.isInResult()&&(e=ke.EXTERIOR),i.isInResult()&&(e=ke.INTERIOR))}}computeLabelling(t){super.computeLabelling.call(this,t),this._label=new ns(ke.NONE);for(let t=this.iterator();t.hasNext();){const e=t.next().getEdge().getLabel();for(let t=0;t<2;t++){const s=e.getLocation(t);s!==ke.INTERIOR&&s!==ke.BOUNDARY||this._label.setLocation(t,ke.INTERIOR)}}}print(t){et.out.println("DirectedEdgeStar: "+this.getCoordinate());for(let e=this.iterator();e.hasNext();){const s=e.next();t.print("out "),s.print(t),t.println(),t.print("in "),s.getSym().print(t),t.println()}}getResultAreaEdges(){if(null!==this._resultAreaEdgeList)return this._resultAreaEdgeList;this._resultAreaEdgeList=new P;for(let t=this.iterator();t.hasNext();){const e=t.next();(e.isInResult()||e.getSym().isInResult())&&this._resultAreaEdgeList.add(e)}return this._resultAreaEdgeList}}class Os extends ls{constructor(){super()}createNode(t){return new os(t,new ws)}}class bs{constructor(){bs.constructor_.apply(this,arguments)}static constructor_(){this._pts=null,this._orientation=null;const t=arguments[0];this._pts=t,this._orientation=bs.orientation(t)}static orientation(t){return 1===st.increasingDirection(t)}static compareOriented(t,e,s,i){const n=e?1:-1,r=i?1:-1,o=e?t.length:-1,a=i?s.length:-1;let l=e?0:t.length-1,h=i?0:s.length-1;for(;;){const e=t[l].compareTo(s[h]);if(0!==e)return e;l+=n,h+=r;const i=l===o,c=h===a;if(i&&!c)return-1;if(!i&&c)return 1;if(i&&c)return 0}}compareTo(t){const e=t;return bs.compareOriented(this._pts,this._orientation,e._pts,e._orientation)}get interfaces_(){return[i]}}class Ps{constructor(){Ps.constructor_.apply(this,arguments)}static constructor_(){this._edges=new P,this._ocaMap=new Z}print(t){t.print("MULTILINESTRING ( ");for(let e=0;e<this._edges.size();e++){const s=this._edges.get(e);e>0&&t.print(","),t.print("(");const i=s.getCoordinates();for(let e=0;e<i.length;e++)e>0&&t.print(","),t.print(i[e].x+" "+i[e].y);t.println(")")}t.print(")  ")}addAll(t){for(let e=t.iterator();e.hasNext();)this.add(e.next())}findEdgeIndex(t){for(let e=0;e<this._edges.size();e++)if(this._edges.get(e).equals(t))return e;return-1}iterator(){return this._edges.iterator()}getEdges(){return this._edges}get(t){return this._edges.get(t)}findEqualEdge(t){const e=new bs(t.getCoordinates());return this._ocaMap.get(e)}add(t){this._edges.add(t);const e=new bs(t.getCoordinates());this._ocaMap.put(e,t)}}class As{constructor(){As.constructor_.apply(this,arguments)}static constructor_(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._hasInterior=!1,this._properIntersectionPoint=null,this._li=null,this._isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;const t=arguments[0];this._li=t}static isAdjacentSegments(t,e){return 1===Math.abs(t-e)}isTrivialIntersection(t,e,s,i){if(t===s&&1===this._li.getIntersectionNum()){if(As.isAdjacentSegments(e,i))return!0;if(t.isClosed()){const s=t.size()-1;if(0===e&&i===s||0===i&&e===s)return!0}}return!1}getProperIntersectionPoint(){return this._properIntersectionPoint}hasProperInteriorIntersection(){return this._hasProperInterior}getLineIntersector(){return this._li}hasProperIntersection(){return this._hasProper}processIntersections(t,e,s,i){if(t===s&&e===i)return null;this.numTests++;const n=t.getCoordinates()[e],r=t.getCoordinates()[e+1],o=s.getCoordinates()[i],a=s.getCoordinates()[i+1];this._li.computeIntersection(n,r,o,a),this._li.hasIntersection()&&(this.numIntersections++,this._li.isInteriorIntersection()&&(this.numInteriorIntersections++,this._hasInterior=!0),this.isTrivialIntersection(t,e,s,i)||(this._hasIntersection=!0,t.addIntersections(this._li,e,0),s.addIntersections(this._li,i,1),this._li.isProper()&&(this.numProperIntersections++,this._hasProper=!0,this._hasProperInterior=!0)))}hasIntersection(){return this._hasIntersection}isDone(){return!1}hasInteriorIntersection(){return this._hasInterior}get interfaces_(){return[Ue]}}class Ms{constructor(){Ms.constructor_.apply(this,arguments)}static constructor_(){this.coord=null,this.segmentIndex=null,this.dist=null;const t=arguments[0],e=arguments[1],s=arguments[2];this.coord=new f(t),this.segmentIndex=e,this.dist=s}getSegmentIndex(){return this.segmentIndex}getCoordinate(){return this.coord}print(t){t.print(this.coord),t.print(" seg # = "+this.segmentIndex),t.println(" dist = "+this.dist)}compareTo(t){const e=t;return this.compare(e.segmentIndex,e.dist)}isEndPoint(t){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===t}toString(){return this.coord+" seg # = "+this.segmentIndex+" dist = "+this.dist}getDistance(){return this.dist}compare(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0}get interfaces_(){return[i]}}class Ds{constructor(){Ds.constructor_.apply(this,arguments)}static constructor_(){this._nodeMap=new Z,this.edge=null;const t=arguments[0];this.edge=t}print(t){t.println("Intersections:");for(let e=this.iterator();e.hasNext();){e.next().print(t)}}addEndpoints(){const t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0)}createSplitEdge(t,e){let s=e.segmentIndex-t.segmentIndex+2;const i=this.edge.pts[e.segmentIndex],n=e.dist>0||!e.coord.equals2D(i);n||s--;const r=new Array(s).fill(null);let o=0;r[o++]=new f(t.coord);for(let s=t.segmentIndex+1;s<=e.segmentIndex;s++)r[o++]=this.edge.pts[s];return n&&(r[o]=e.coord),new Ys(r,new ns(this.edge._label))}add(t,e,s){const i=new Ms(t,e,s),n=this._nodeMap.get(i);return null!==n?n:(this._nodeMap.put(i,i),i)}isIntersection(t){for(let e=this.iterator();e.hasNext();){if(e.next().coord.equals(t))return!0}return!1}iterator(){return this._nodeMap.values().iterator()}addSplitEdges(t){this.addEndpoints();const e=this.iterator();let s=e.next();for(;e.hasNext();){const i=e.next(),n=this.createSplitEdge(s,i);t.add(n),s=i}}}class vs{constructor(){vs.constructor_.apply(this,arguments)}static constructor_(){if(this._matrix=null,0===arguments.length)this._matrix=Array(3).fill().map((()=>Array(3))),this.setAll(nt.FALSE);else if(1===arguments.length)if("string"==typeof arguments[0]){const t=arguments[0];vs.constructor_.call(this),this.set(t)}else if(arguments[0]instanceof vs){const t=arguments[0];vs.constructor_.call(this),this._matrix[ke.INTERIOR][ke.INTERIOR]=t._matrix[ke.INTERIOR][ke.INTERIOR],this._matrix[ke.INTERIOR][ke.BOUNDARY]=t._matrix[ke.INTERIOR][ke.BOUNDARY],this._matrix[ke.INTERIOR][ke.EXTERIOR]=t._matrix[ke.INTERIOR][ke.EXTERIOR],this._matrix[ke.BOUNDARY][ke.INTERIOR]=t._matrix[ke.BOUNDARY][ke.INTERIOR],this._matrix[ke.BOUNDARY][ke.BOUNDARY]=t._matrix[ke.BOUNDARY][ke.BOUNDARY],this._matrix[ke.BOUNDARY][ke.EXTERIOR]=t._matrix[ke.BOUNDARY][ke.EXTERIOR],this._matrix[ke.EXTERIOR][ke.INTERIOR]=t._matrix[ke.EXTERIOR][ke.INTERIOR],this._matrix[ke.EXTERIOR][ke.BOUNDARY]=t._matrix[ke.EXTERIOR][ke.BOUNDARY],this._matrix[ke.EXTERIOR][ke.EXTERIOR]=t._matrix[ke.EXTERIOR][ke.EXTERIOR]}}static isTrue(t){return t>=0||t===nt.TRUE}static matches(){if(Number.isInteger(arguments[0])&&"string"==typeof arguments[1]){const t=arguments[0],e=arguments[1];return e===nt.SYM_DONTCARE||(e===nt.SYM_TRUE&&(t>=0||t===nt.TRUE)||(e===nt.SYM_FALSE&&t===nt.FALSE||(e===nt.SYM_P&&t===nt.P||(e===nt.SYM_L&&t===nt.L||e===nt.SYM_A&&t===nt.A))))}if("string"==typeof arguments[0]&&"string"==typeof arguments[1]){const t=arguments[1];return new vs(arguments[0]).matches(t)}}isIntersects(){return!this.isDisjoint()}set(){if(1===arguments.length){const t=arguments[0];for(let e=0;e<t.length;e++){const s=Math.trunc(e/3),i=e%3;this._matrix[s][i]=nt.toDimensionValue(t.charAt(e))}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._matrix[t][e]=s}}isContains(){return vs.isTrue(this._matrix[ke.INTERIOR][ke.INTERIOR])&&this._matrix[ke.EXTERIOR][ke.INTERIOR]===nt.FALSE&&this._matrix[ke.EXTERIOR][ke.BOUNDARY]===nt.FALSE}isWithin(){return vs.isTrue(this._matrix[ke.INTERIOR][ke.INTERIOR])&&this._matrix[ke.INTERIOR][ke.EXTERIOR]===nt.FALSE&&this._matrix[ke.BOUNDARY][ke.EXTERIOR]===nt.FALSE}isTouches(t,e){return t>e?this.isTouches(e,t):(t===nt.A&&e===nt.A||t===nt.L&&e===nt.L||t===nt.L&&e===nt.A||t===nt.P&&e===nt.A||t===nt.P&&e===nt.L)&&(this._matrix[ke.INTERIOR][ke.INTERIOR]===nt.FALSE&&(vs.isTrue(this._matrix[ke.INTERIOR][ke.BOUNDARY])||vs.isTrue(this._matrix[ke.BOUNDARY][ke.INTERIOR])||vs.isTrue(this._matrix[ke.BOUNDARY][ke.BOUNDARY])))}isOverlaps(t,e){return t===nt.P&&e===nt.P||t===nt.A&&e===nt.A?vs.isTrue(this._matrix[ke.INTERIOR][ke.INTERIOR])&&vs.isTrue(this._matrix[ke.INTERIOR][ke.EXTERIOR])&&vs.isTrue(this._matrix[ke.EXTERIOR][ke.INTERIOR]):t===nt.L&&e===nt.L&&(1===this._matrix[ke.INTERIOR][ke.INTERIOR]&&vs.isTrue(this._matrix[ke.INTERIOR][ke.EXTERIOR])&&vs.isTrue(this._matrix[ke.EXTERIOR][ke.INTERIOR]))}isEquals(t,e){return t===e&&(vs.isTrue(this._matrix[ke.INTERIOR][ke.INTERIOR])&&this._matrix[ke.INTERIOR][ke.EXTERIOR]===nt.FALSE&&this._matrix[ke.BOUNDARY][ke.EXTERIOR]===nt.FALSE&&this._matrix[ke.EXTERIOR][ke.INTERIOR]===nt.FALSE&&this._matrix[ke.EXTERIOR][ke.BOUNDARY]===nt.FALSE)}matches(t){if(9!==t.length)throw new e("Should be length 9: "+t);for(let e=0;e<3;e++)for(let s=0;s<3;s++)if(!vs.matches(this._matrix[e][s],t.charAt(3*e+s)))return!1;return!0}add(t){for(let e=0;e<3;e++)for(let s=0;s<3;s++)this.setAtLeast(e,s,t.get(e,s))}isDisjoint(){return this._matrix[ke.INTERIOR][ke.INTERIOR]===nt.FALSE&&this._matrix[ke.INTERIOR][ke.BOUNDARY]===nt.FALSE&&this._matrix[ke.BOUNDARY][ke.INTERIOR]===nt.FALSE&&this._matrix[ke.BOUNDARY][ke.BOUNDARY]===nt.FALSE}isCrosses(t,e){return t===nt.P&&e===nt.L||t===nt.P&&e===nt.A||t===nt.L&&e===nt.A?vs.isTrue(this._matrix[ke.INTERIOR][ke.INTERIOR])&&vs.isTrue(this._matrix[ke.INTERIOR][ke.EXTERIOR]):t===nt.L&&e===nt.P||t===nt.A&&e===nt.P||t===nt.A&&e===nt.L?vs.isTrue(this._matrix[ke.INTERIOR][ke.INTERIOR])&&vs.isTrue(this._matrix[ke.EXTERIOR][ke.INTERIOR]):t===nt.L&&e===nt.L&&0===this._matrix[ke.INTERIOR][ke.INTERIOR]}isCovers(){return(vs.isTrue(this._matrix[ke.INTERIOR][ke.INTERIOR])||vs.isTrue(this._matrix[ke.INTERIOR][ke.BOUNDARY])||vs.isTrue(this._matrix[ke.BOUNDARY][ke.INTERIOR])||vs.isTrue(this._matrix[ke.BOUNDARY][ke.BOUNDARY]))&&this._matrix[ke.EXTERIOR][ke.INTERIOR]===nt.FALSE&&this._matrix[ke.EXTERIOR][ke.BOUNDARY]===nt.FALSE}isCoveredBy(){return(vs.isTrue(this._matrix[ke.INTERIOR][ke.INTERIOR])||vs.isTrue(this._matrix[ke.INTERIOR][ke.BOUNDARY])||vs.isTrue(this._matrix[ke.BOUNDARY][ke.INTERIOR])||vs.isTrue(this._matrix[ke.BOUNDARY][ke.BOUNDARY]))&&this._matrix[ke.INTERIOR][ke.EXTERIOR]===nt.FALSE&&this._matrix[ke.BOUNDARY][ke.EXTERIOR]===nt.FALSE}setAtLeast(){if(1===arguments.length){const t=arguments[0];for(let e=0;e<t.length;e++){const s=Math.trunc(e/3),i=e%3;this.setAtLeast(s,i,nt.toDimensionValue(t.charAt(e)))}}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._matrix[t][e]<s&&(this._matrix[t][e]=s)}}setAtLeastIfValid(t,e,s){t>=0&&e>=0&&this.setAtLeast(t,e,s)}toString(){const t=new _t("123456789");for(let e=0;e<3;e++)for(let s=0;s<3;s++)t.setCharAt(3*e+s,nt.toDimensionSymbol(this._matrix[e][s]));return t.toString()}setAll(t){for(let e=0;e<3;e++)for(let s=0;s<3;s++)this._matrix[e][s]=t}get(t,e){return this._matrix[t][e]}transpose(){let t=this._matrix[1][0];return this._matrix[1][0]=this._matrix[0][1],this._matrix[0][1]=t,t=this._matrix[2][0],this._matrix[2][0]=this._matrix[0][2],this._matrix[0][2]=t,t=this._matrix[2][1],this._matrix[2][1]=this._matrix[1][2],this._matrix[1][2]=t,this}get interfaces_(){return[n]}}class Fs{constructor(){Fs.constructor_.apply(this,arguments)}static constructor_(){this._depth=Array(2).fill().map((()=>Array(3)));for(let t=0;t<2;t++)for(let e=0;e<3;e++)this._depth[t][e]=Fs.NULL_VALUE}static depthAtLocation(t){return t===ke.EXTERIOR?0:t===ke.INTERIOR?1:Fs.NULL_VALUE}getDepth(t,e){return this._depth[t][e]}setDepth(t,e,s){this._depth[t][e]=s}isNull(){if(0===arguments.length){for(let t=0;t<2;t++)for(let e=0;e<3;e++)if(this._depth[t][e]!==Fs.NULL_VALUE)return!1;return!0}if(1===arguments.length){const t=arguments[0];return this._depth[t][1]===Fs.NULL_VALUE}if(2===arguments.length){const t=arguments[0],e=arguments[1];return this._depth[t][e]===Fs.NULL_VALUE}}normalize(){for(let t=0;t<2;t++)if(!this.isNull(t)){let e=this._depth[t][1];this._depth[t][2]<e&&(e=this._depth[t][2]),e<0&&(e=0);for(let s=1;s<3;s++){let i=0;this._depth[t][s]>e&&(i=1),this._depth[t][s]=i}}}getDelta(t){return this._depth[t][He.RIGHT]-this._depth[t][He.LEFT]}getLocation(t,e){return this._depth[t][e]<=0?ke.EXTERIOR:ke.INTERIOR}toString(){return"A: "+this._depth[0][1]+","+this._depth[0][2]+" B: "+this._depth[1][1]+","+this._depth[1][2]}add(){if(1===arguments.length){const t=arguments[0];for(let e=0;e<2;e++)for(let s=1;s<3;s++){const i=t.getLocation(e,s);i!==ke.EXTERIOR&&i!==ke.INTERIOR||(this.isNull(e,s)?this._depth[e][s]=Fs.depthAtLocation(i):this._depth[e][s]+=Fs.depthAtLocation(i))}}else if(3===arguments.length){const t=arguments[0],e=arguments[1];arguments[2]===ke.INTERIOR&&this._depth[t][e]++}}}Fs.NULL_VALUE=-1;class Gs{constructor(){Gs.constructor_.apply(this,arguments)}static constructor_(){if(this._data=null,this._size=0,0===arguments.length)Gs.constructor_.call(this,10);else if(1===arguments.length){const t=arguments[0];this._data=new Array(t).fill(null)}}size(){return this._size}addAll(t){return null===t||0===t.length?null:(this.ensureCapacity(this._size+t.length),et.arraycopy(t,0,this._data,this._size,t.length),void(this._size+=t.length))}ensureCapacity(t){if(t<=this._data.length)return null;const e=Math.max(t,2*this._data.length);this._data=mt.copyOf(this._data,e)}toArray(){const t=new Array(this._size).fill(null);return et.arraycopy(this._data,0,t,0,this._size),t}add(t){this.ensureCapacity(this._size+1),this._data[this._size]=t,++this._size}}class qs{static toIntArray(t){const e=new Array(t.size()).fill(null);for(let s=0;s<e.length;s++)e[s]=t.get(s).intValue();return e}findChainEnd(t,e){const s=Me.quadrant(t[e],t[e+1]);let i=e+1;for(;i<t.length;){if(Me.quadrant(t[i-1],t[i])!==s)break;i++}return i-1}OLDgetChainStartIndices(t){let e=0;const s=new P;s.add(e);do{const i=this.findChainEnd(t,e);s.add(i),e=i}while(e<t.length-1);return qs.toIntArray(s)}getChainStartIndices(t){let e=0;const s=new Gs(Math.trunc(t.length/2));s.add(e);do{const i=this.findChainEnd(t,e);s.add(i),e=i}while(e<t.length-1);return s.toArray()}}class Bs{constructor(){Bs.constructor_.apply(this,arguments)}static constructor_(){this.e=null,this.pts=null,this.startIndex=null;const t=arguments[0];this.e=t,this.pts=t.getCoordinates();const e=new qs;this.startIndex=e.getChainStartIndices(this.pts)}getCoordinates(){return this.pts}getMaxX(t){const e=this.pts[this.startIndex[t]].x,s=this.pts[this.startIndex[t+1]].x;return e>s?e:s}getMinX(t){const e=this.pts[this.startIndex[t]].x,s=this.pts[this.startIndex[t+1]].x;return e<s?e:s}computeIntersectsForChain(){if(4===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3];this.computeIntersectsForChain(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[s],e.startIndex[s+1],i)}else if(6===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=arguments[4],r=arguments[5];if(e-t==1&&n-i==1)return r.addIntersections(this.e,t,s.e,i),null;if(!this.overlaps(t,e,s,i,n))return null;const o=Math.trunc((t+e)/2),a=Math.trunc((i+n)/2);t<o&&(i<a&&this.computeIntersectsForChain(t,o,s,i,a,r),a<n&&this.computeIntersectsForChain(t,o,s,a,n,r)),o<e&&(i<a&&this.computeIntersectsForChain(o,e,s,i,a,r),a<n&&this.computeIntersectsForChain(o,e,s,a,n,r))}}overlaps(t,e,s,i,n){return y.intersects(this.pts[t],this.pts[e],s.pts[i],s.pts[n])}getStartIndexes(){return this.startIndex}computeIntersects(t,e){for(let s=0;s<this.startIndex.length-1;s++)for(let i=0;i<t.startIndex.length-1;i++)this.computeIntersectsForChain(s,t,i,e)}}class Ys extends rs{constructor(){super(),Ys.constructor_.apply(this,arguments)}static constructor_(){if(this.pts=null,this._env=null,this.eiList=new Ds(this),this._name=null,this._mce=null,this._isIsolated=!0,this._depth=new Fs,this._depthDelta=0,1===arguments.length){const t=arguments[0];Ys.constructor_.call(this,t,null)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this.pts=t,this._label=e}}static updateIM(){if(!(2===arguments.length&&arguments[1]instanceof vs&&arguments[0]instanceof ns))return super.updateIM.apply(this,arguments);{const t=arguments[0],e=arguments[1];e.setAtLeastIfValid(t.getLocation(0,He.ON),t.getLocation(1,He.ON),1),t.isArea()&&(e.setAtLeastIfValid(t.getLocation(0,He.LEFT),t.getLocation(1,He.LEFT),2),e.setAtLeastIfValid(t.getLocation(0,He.RIGHT),t.getLocation(1,He.RIGHT),2))}}getDepth(){return this._depth}getCollapsedEdge(){const t=new Array(2).fill(null);t[0]=this.pts[0],t[1]=this.pts[1];return new Ys(t,ns.toLineLabel(this._label))}setIsolated(t){this._isIsolated=t}setName(t){this._name=t}equals(t){if(!(t instanceof Ys))return!1;const e=t;if(this.pts.length!==e.pts.length)return!1;let s=!0,i=!0,n=this.pts.length;for(let t=0;t<this.pts.length;t++)if(this.pts[t].equals2D(e.pts[t])||(s=!1),this.pts[t].equals2D(e.pts[--n])||(i=!1),!s&&!i)return!1;return!0}getCoordinate(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){const t=arguments[0];return this.pts[t]}}isClosed(){return this.pts[0].equals(this.pts[this.pts.length-1])}getMaximumSegmentIndex(){return this.pts.length-1}setDepthDelta(t){this._depthDelta=t}getEdgeIntersectionList(){return this.eiList}addIntersections(t,e,s){for(let i=0;i<t.getIntersectionNum();i++)this.addIntersection(t,e,s,i)}isIsolated(){return this._isIsolated}getCoordinates(){return this.pts}print(t){t.print("edge "+this._name+": "),t.print("LINESTRING (");for(let e=0;e<this.pts.length;e++)e>0&&t.print(","),t.print(this.pts[e].x+" "+this.pts[e].y);t.print(")  "+this._label+" "+this._depthDelta)}computeIM(t){Ys.updateIM(this._label,t)}isCollapsed(){return!!this._label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))}getDepthDelta(){return this._depthDelta}getNumPoints(){return this.pts.length}printReverse(t){t.print("edge "+this._name+": ");for(let e=this.pts.length-1;e>=0;e--)t.print(this.pts[e]+" ");t.println("")}getMonotoneChainEdge(){return null===this._mce&&(this._mce=new Bs(this)),this._mce}getEnvelope(){if(null===this._env){this._env=new y;for(let t=0;t<this.pts.length;t++)this._env.expandToInclude(this.pts[t])}return this._env}addIntersection(t,e,s,i){const n=new f(t.getIntersection(i));let r=e,o=t.getEdgeDistance(s,i);const a=r+1;if(a<this.pts.length){const t=this.pts[a];n.equals2D(t)&&(r=a,o=0)}this.eiList.add(n,r,o)}toString(){const t=new _t;t.append("edge "+this._name+": "),t.append("LINESTRING (");for(let e=0;e<this.pts.length;e++)e>0&&t.append(","),t.append(this.pts[e].x+" "+this.pts[e].y);return t.append(")  "+this._label+" "+this._depthDelta),t.toString()}isPointwiseEqual(t){if(this.pts.length!==t.pts.length)return!1;for(let e=0;e<this.pts.length;e++)if(!this.pts[e].equals2D(t.pts[e]))return!1;return!0}}class zs{constructor(){zs.constructor_.apply(this,arguments)}static constructor_(){this._bufParams=null,this._workingPrecisionModel=null,this._workingNoder=null,this._geomFact=null,this._graph=null,this._edgeList=new Ps;const t=arguments[0];this._bufParams=t}static convertSegStrings(t){const e=new vt,s=new P;for(;t.hasNext();){const i=t.next(),n=e.createLineString(i.getCoordinates());s.add(n)}return e.buildGeometry(s)}static depthDelta(t){const e=t.getLocation(0,He.LEFT),s=t.getLocation(0,He.RIGHT);return e===ke.INTERIOR&&s===ke.EXTERIOR?1:e===ke.EXTERIOR&&s===ke.INTERIOR?-1:0}createEmptyResultGeometry(){return this._geomFact.createPolygon()}getNoder(t){if(null!==this._workingNoder)return this._workingNoder;const e=new Fe,s=new pe;return s.setPrecisionModel(t),e.setSegmentIntersector(new As(s)),e}buffer(t,e){let s=this._workingPrecisionModel;null===s&&(s=t.getPrecisionModel()),this._geomFact=t.getFactory();const i=new ss(s,this._bufParams),n=new Ts(t,e,i).getCurves();if(n.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(n,s),this._graph=new us(new Os),this._graph.addEdges(this._edgeList.getEdges());const r=this.createSubgraphs(this._graph),o=new ms(this._geomFact);this.buildSubgraphs(r,o);const a=o.getPolygons();if(a.size()<=0)return this.createEmptyResultGeometry();return this._geomFact.buildGeometry(a)}computeNodedEdges(t,e){const s=this.getNoder(e);s.computeNodes(t);for(let t=s.getNodedSubstrings().iterator();t.hasNext();){const e=t.next(),s=e.getCoordinates();if(2===s.length&&s[0].equals2D(s[1]))continue;const i=e.getData(),n=new Ys(e.getCoordinates(),new ns(i));this.insertUniqueEdge(n)}}setNoder(t){this._workingNoder=t}setWorkingPrecisionModel(t){this._workingPrecisionModel=t}insertUniqueEdge(t){const e=this._edgeList.findEqualEdge(t);if(null!==e){const s=e.getLabel();let i=t.getLabel();e.isPointwiseEqual(t)||(i=new ns(t.getLabel()),i.flip()),s.merge(i);const n=zs.depthDelta(i),r=e.getDepthDelta()+n;e.setDepthDelta(r)}else this._edgeList.add(t),t.setDepthDelta(zs.depthDelta(t.getLabel()))}buildSubgraphs(t,e){const s=new P;for(let i=t.iterator();i.hasNext();){const t=i.next(),n=t.getRightmostCoordinate(),r=new ys(s).getDepth(n);t.computeDepth(r),t.findResultEdges(),s.add(t),e.add(t.getDirectedEdges(),t.getNodes())}}createSubgraphs(t){const e=new P;for(let s=t.getNodes().iterator();s.hasNext();){const t=s.next();if(!t.isVisited()){const s=new Qe;s.create(t),e.add(s)}}return Ne.sort(e,Ne.reverseOrder()),e}}class Us{constructor(){Us.constructor_.apply(this,arguments)}static constructor_(){if(this._argGeom=null,this._distance=null,this._bufParams=new S,this._resultGeometry=null,this._saveException=null,1===arguments.length){const t=arguments[0];this._argGeom=t}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this._argGeom=t,this._bufParams=e}}static bufferOp(){if(2===arguments.length){const t=arguments[1];return new Us(arguments[0]).getResultGeometry(t)}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof I&&"number"==typeof arguments[1]){const t=arguments[1],e=arguments[2],s=new Us(arguments[0]);s.setQuadrantSegments(e);return s.getResultGeometry(t)}if(arguments[2]instanceof S&&arguments[0]instanceof I&&"number"==typeof arguments[1]){const t=arguments[1];return new Us(arguments[0],arguments[2]).getResultGeometry(t)}}else if(4===arguments.length){const t=arguments[1],e=arguments[2],s=arguments[3],i=new Us(arguments[0]);i.setQuadrantSegments(e),i.setEndCapStyle(s);return i.getResultGeometry(t)}}static precisionScaleFactor(t,e,s){const i=t.getEnvelopeInternal(),n=tt.max(Math.abs(i.getMaxX()),Math.abs(i.getMaxY()),Math.abs(i.getMinX()),Math.abs(i.getMinY()))+2*(e>0?e:0),r=s-Math.trunc(Math.log(n)/Math.log(10)+1);return Math.pow(10,r)}bufferFixedPrecision(t){const e=new ce(new Ve(new Nt(1)),t.getScale()),s=new zs(this._bufParams);s.setWorkingPrecisionModel(t),s.setNoder(e),this._resultGeometry=s.buffer(this._argGeom,this._distance)}bufferReducedPrecision(){if(0===arguments.length){for(let t=Us.MAX_PRECISION_DIGITS;t>=0;t--){try{this.bufferReducedPrecision(t)}catch(t){if(!(t instanceof ue))throw t;this._saveException=t}if(null!==this._resultGeometry)return null}throw this._saveException}if(1===arguments.length){const t=arguments[0],e=Us.precisionScaleFactor(this._argGeom,this._distance,t),s=new Nt(e);this.bufferFixedPrecision(s)}}bufferOriginalPrecision(){try{const t=new zs(this._bufParams);this._resultGeometry=t.buffer(this._argGeom,this._distance)}catch(t){if(!(t instanceof h))throw t;this._saveException=t}}getResultGeometry(t){return this._distance=t,this.computeGeometry(),this._resultGeometry}setEndCapStyle(t){this._bufParams.setEndCapStyle(t)}computeGeometry(){if(this.bufferOriginalPrecision(),null!==this._resultGeometry)return null;const t=this._argGeom.getFactory().getPrecisionModel();t.getType()===Nt.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision()}setQuadrantSegments(t){this._bufParams.setQuadrantSegments(t)}}Us.CAP_ROUND=S.CAP_ROUND,Us.CAP_BUTT=S.CAP_FLAT,Us.CAP_FLAT=S.CAP_FLAT,Us.CAP_SQUARE=S.CAP_SQUARE,Us.MAX_PRECISION_DIGITS=12;class Xs{constructor(){Xs.constructor_.apply(this,arguments)}static constructor_(){if(this._snapTolerance=0,this._srcPts=null,this._seg=new be,this._allowSnappingToSourceVertices=!1,this._isClosed=!1,arguments[0]instanceof ut&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1];Xs.constructor_.call(this,t.getCoordinates(),e)}else if(arguments[0]instanceof Array&&"number"==typeof arguments[1]){const t=arguments[0],e=arguments[1];this._srcPts=t,this._isClosed=Xs.isClosed(t),this._snapTolerance=e}}static isClosed(t){return!(t.length<=1)&&t[0].equals2D(t[t.length-1])}snapVertices(t,e){const s=this._isClosed?t.size()-1:t.size();for(let i=0;i<s;i++){const s=t.get(i),n=this.findSnapForVertex(s,e);null!==n&&(t.set(i,new f(n)),0===i&&this._isClosed&&t.set(t.size()-1,new f(n)))}}findSnapForVertex(t,e){for(let s=0;s<e.length;s++){if(t.equals2D(e[s]))return null;if(t.distance(e[s])<this._snapTolerance)return e[s]}return null}snapTo(t){const e=new M(this._srcPts);this.snapVertices(e,t),this.snapSegments(e,t);return e.toCoordinateArray()}snapSegments(t,e){if(0===e.length)return null;let s=e.length;e[0].equals2D(e[e.length-1])&&(s=e.length-1);for(let i=0;i<s;i++){const s=e[i],n=this.findSegmentIndexToSnap(s,t);n>=0&&t.add(n+1,new f(s),!1)}}findSegmentIndexToSnap(t,e){let s=l.MAX_VALUE,i=-1;for(let n=0;n<e.size()-1;n++){if(this._seg.p0=e.get(n),this._seg.p1=e.get(n+1),this._seg.p0.equals2D(t)||this._seg.p1.equals2D(t)){if(this._allowSnappingToSourceVertices)continue;return-1}const r=this._seg.distance(t);r<this._snapTolerance&&r<s&&(s=r,i=n)}return i}setAllowSnappingToSourceVertices(t){this._allowSnappingToSourceVertices=t}}class Vs{constructor(){Vs.constructor_.apply(this,arguments)}static constructor_(){this._inputGeom=null,this._factory=null,this._pruneEmptyGeometry=!0,this._preserveGeometryCollectionType=!0,this._preserveCollections=!1,this._preserveType=!1}transformPoint(t,e){return this._factory.createPoint(this.transformCoordinates(t.getCoordinateSequence(),t))}transformPolygon(t,e){let s=!0;const i=this.transformLinearRing(t.getExteriorRing(),t);null!==i&&i instanceof gt&&!i.isEmpty()||(s=!1);const n=new P;for(let e=0;e<t.getNumInteriorRing();e++){const i=this.transformLinearRing(t.getInteriorRingN(e),t);null===i||i.isEmpty()||(i instanceof gt||(s=!1),n.add(i))}if(s)return this._factory.createPolygon(i,n.toArray([]));{const t=new P;return null!==i&&t.add(i),t.addAll(n),this._factory.buildGeometry(t)}}createCoordinateSequence(t){return this._factory.getCoordinateSequenceFactory().create(t)}getInputGeometry(){return this._inputGeom}transformMultiLineString(t,e){const s=new P;for(let e=0;e<t.getNumGeometries();e++){const i=this.transformLineString(t.getGeometryN(e),t);null!==i&&(i.isEmpty()||s.add(i))}return this._factory.buildGeometry(s)}transformCoordinates(t,e){return this.copy(t)}transformLineString(t,e){return this._factory.createLineString(this.transformCoordinates(t.getCoordinateSequence(),t))}transformMultiPoint(t,e){const s=new P;for(let e=0;e<t.getNumGeometries();e++){const i=this.transformPoint(t.getGeometryN(e),t);null!==i&&(i.isEmpty()||s.add(i))}return this._factory.buildGeometry(s)}transformMultiPolygon(t,e){const s=new P;for(let e=0;e<t.getNumGeometries();e++){const i=this.transformPolygon(t.getGeometryN(e),t);null!==i&&(i.isEmpty()||s.add(i))}return this._factory.buildGeometry(s)}copy(t){return t.copy()}transformLinearRing(t,e){const s=this.transformCoordinates(t.getCoordinateSequence(),t);if(null===s)return this._factory.createLinearRing(null);const i=s.size();return i>0&&i<4&&!this._preserveType?this._factory.createLineString(s):this._factory.createLinearRing(s)}transformGeometryCollection(t,e){const s=new P;for(let e=0;e<t.getNumGeometries();e++){const i=this.transform(t.getGeometryN(e));null!==i&&(this._pruneEmptyGeometry&&i.isEmpty()||s.add(i))}return this._preserveGeometryCollectionType?this._factory.createGeometryCollection(vt.toGeometryArray(s)):this._factory.buildGeometry(s)}transform(t){if(this._inputGeom=t,this._factory=t.getFactory(),t instanceof St)return this.transformPoint(t,null);if(t instanceof Dt)return this.transformMultiPoint(t,null);if(t instanceof gt)return this.transformLinearRing(t,null);if(t instanceof ut)return this.transformLineString(t,null);if(t instanceof Rt)return this.transformMultiLineString(t,null);if(t instanceof Mt)return this.transformPolygon(t,null);if(t instanceof Et)return this.transformMultiPolygon(t,null);if(t instanceof yt)return this.transformGeometryCollection(t,null);throw new e("Unknown Geometry subtype: "+t.getGeometryType())}}class ks{constructor(){ks.constructor_.apply(this,arguments)}static constructor_(){this._srcGeom=null;const t=arguments[0];this._srcGeom=t}static computeSizeBasedSnapTolerance(t){const e=t.getEnvelopeInternal();return Math.min(e.getHeight(),e.getWidth())*ks.SNAP_PRECISION_FACTOR}static computeOverlaySnapTolerance(){if(1===arguments.length){const t=arguments[0];let e=ks.computeSizeBasedSnapTolerance(t);const s=t.getPrecisionModel();if(s.getType()===Nt.FIXED){const t=1/s.getScale()*2/1.415;t>e&&(e=t)}return e}if(2===arguments.length){const t=arguments[0],e=arguments[1];return Math.min(ks.computeOverlaySnapTolerance(t),ks.computeOverlaySnapTolerance(e))}}static snapToSelf(t,e,s){return new ks(t).snapToSelf(e,s)}static snap(t,e,s){const i=new Array(2).fill(null),n=new ks(t);i[0]=n.snapTo(e,s);const r=new ks(e);return i[1]=r.snapTo(i[0],s),i}computeSnapTolerance(t){return this.computeMinimumSegmentLength(t)/10}snapTo(t,e){const s=this.extractTargetCoordinates(t);return new Hs(e,s).transform(this._srcGeom)}snapToSelf(t,e){const s=this.extractTargetCoordinates(this._srcGeom),i=new Hs(t,s,!0).transform(this._srcGeom);let n=i;return e&&w(n,It)&&(n=Us.bufferOp(i,0)),n}extractTargetCoordinates(t){const e=new L,s=t.getCoordinates();for(let t=0;t<s.length;t++)e.add(s[t]);return e.toArray(new Array(0).fill(null))}computeMinimumSegmentLength(t){let e=l.MAX_VALUE;for(let s=0;s<t.length-1;s++){const i=t[s].distance(t[s+1]);i<e&&(e=i)}return e}}ks.SNAP_PRECISION_FACTOR=1e-9;class Hs extends Vs{constructor(){super(),Hs.constructor_.apply(this,arguments)}static constructor_(){if(this._snapTolerance=null,this._snapPts=null,this._isSelfSnap=!1,2===arguments.length){const t=arguments[0],e=arguments[1];this._snapTolerance=t,this._snapPts=e}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._snapTolerance=t,this._snapPts=e,this._isSelfSnap=s}}transformCoordinates(t,e){const s=t.toCoordinateArray(),i=this.snapLine(s,this._snapPts);return this._factory.getCoordinateSequenceFactory().create(i)}snapLine(t,e){const s=new Xs(t,this._snapTolerance);return s.setAllowSnappingToSourceVertices(this._isSelfSnap),s.snapTo(e)}}class Zs{constructor(){this._isFirst=!0,this._commonMantissaBitsCount=53,this._commonBits=new a,this._commonSignExp=null}getCommon(){return l.longBitsToDouble(this._commonBits)}add(t){const e=l.doubleToLongBits(t);if(this._isFirst)return this._commonBits=e,this._commonSignExp=Zs.signExpBits(this._commonBits),this._isFirst=!1,null;if(Zs.signExpBits(e)!==this._commonSignExp)return this._commonBits.high=0,this._commonBits.low=0,null;this._commonMantissaBitsCount=Zs.numCommonMostSigMantissaBits(this._commonBits,e),this._commonBits=Zs.zeroLowerBits(this._commonBits,64-(12+this._commonMantissaBitsCount))}toString(){if(1===arguments.length){const t=arguments[0],e=l.longBitsToDouble(t),s="0000000000000000000000000000000000000000000000000000000000000000"+a.toBinaryString(t),i=s.substring(s.length-64);return i.substring(0,1)+"  "+i.substring(1,12)+"(exp) "+i.substring(12)+" [ "+e+" ]"}}getClass(){return Zs}get interfaces_(){return[]}static getBit(t,e){const s=1<<e%32;return e<32?0!=(t.low&s)?1:0:0!=(t.high&s)?1:0}static signExpBits(t){return t.high>>>20}static zeroLowerBits(t,e){let s="low";if(e>32&&(t.low=0,e%=32,s="high"),e>0){const i=e<32?~((1<<e)-1):0;t[s]&=i}return t}static numCommonMostSigMantissaBits(t,e){let s=0;for(let i=52;i>=0;i--){if(Zs.getBit(t,i)!==Zs.getBit(e,i))return s;s++}return 52}}class Ws{constructor(){Ws.constructor_.apply(this,arguments)}static constructor_(){this._commonCoord=null,this._ccFilter=new js}add(t){t.apply(this._ccFilter),this._commonCoord=this._ccFilter.getCommonCoordinate()}removeCommonBits(t){if(0===this._commonCoord.x&&0===this._commonCoord.y)return t;const e=new f(this._commonCoord);e.x=-e.x,e.y=-e.y;const s=new Ks(e);return t.apply(s),t.geometryChanged(),t}addCommonBits(t){const e=new Ks(this._commonCoord);t.apply(e),t.geometryChanged()}getCommonCoordinate(){return this._commonCoord}}class js{constructor(){js.constructor_.apply(this,arguments)}static constructor_(){this._commonBitsX=new Zs,this._commonBitsY=new Zs}filter(t){this._commonBitsX.add(t.x),this._commonBitsY.add(t.y)}getCommonCoordinate(){return new f(this._commonBitsX.getCommon(),this._commonBitsY.getCommon())}get interfaces_(){return[rt]}}class Ks{constructor(){Ks.constructor_.apply(this,arguments)}static constructor_(){this.trans=null;const t=arguments[0];this.trans=t}filter(t,e){const s=t.getOrdinate(e,0)+this.trans.x,i=t.getOrdinate(e,1)+this.trans.y;t.setOrdinate(e,0,s),t.setOrdinate(e,1,i)}isGeometryChanged(){return!0}isDone(){return!1}get interfaces_(){return[ct]}}Ws.CommonCoordinateFilter=js,Ws.Translater=Ks;class Qs{constructor(){Qs.constructor_.apply(this,arguments)}static constructor_(){this._op=null,this._geometryFactory=null,this._ptLocator=null,this._lineEdgesList=new P,this._resultLineList=new P;const t=arguments[0],e=arguments[1],s=arguments[2];this._op=t,this._geometryFactory=e,this._ptLocator=s}collectLines(t){for(let e=this._op.getGraph().getEdgeEnds().iterator();e.hasNext();){const s=e.next();this.collectLineEdge(s,t,this._lineEdgesList),this.collectBoundaryTouchEdge(s,t,this._lineEdgesList)}}labelIsolatedLine(t,e){const s=this._ptLocator.locate(t.getCoordinate(),this._op.getArgGeometry(e));t.getLabel().setLocation(e,s)}build(t){return this.findCoveredLineEdges(),this.collectLines(t),this.buildLines(t),this._resultLineList}collectLineEdge(t,e,s){const i=t.getLabel(),n=t.getEdge();t.isLineEdge()&&(t.isVisited()||!Ci.isResultOfOp(i,e)||n.isCovered()||(s.add(n),t.setVisitedEdge(!0)))}findCoveredLineEdges(){for(let t=this._op.getGraph().getNodes().iterator();t.hasNext();){t.next().getEdges().findCoveredLineEdges()}for(let t=this._op.getGraph().getEdgeEnds().iterator();t.hasNext();){const e=t.next(),s=e.getEdge();if(e.isLineEdge()&&!s.isCoveredSet()){const t=this._op.isCoveredByA(e.getCoordinate());s.setCovered(t)}}}labelIsolatedLines(t){for(let e=t.iterator();e.hasNext();){const t=e.next(),s=t.getLabel();t.isIsolated()&&(s.isNull(0)?this.labelIsolatedLine(t,0):this.labelIsolatedLine(t,1))}}buildLines(t){for(let t=this._lineEdgesList.iterator();t.hasNext();){const e=t.next(),s=this._geometryFactory.createLineString(e.getCoordinates());this._resultLineList.add(s),e.setInResult(!0)}}collectBoundaryTouchEdge(t,e,s){const i=t.getLabel();return t.isLineEdge()||t.isVisited()||t.isInteriorAreaEdge()||t.getEdge().isInResult()?null:(u.isTrue(!(t.isInResult()||t.getSym().isInResult())||!t.getEdge().isInResult()),void(Ci.isResultOfOp(i,e)&&e===Ci.INTERSECTION&&(s.add(t.getEdge()),t.setVisitedEdge(!0))))}}class Js{constructor(){Js.constructor_.apply(this,arguments)}static constructor_(){this._op=null,this._geometryFactory=null,this._resultPointList=new P;const t=arguments[0],e=arguments[1];this._op=t,this._geometryFactory=e}build(t){return this.extractNonCoveredResultNodes(t),this._resultPointList}extractNonCoveredResultNodes(t){for(let e=this._op.getGraph().getNodes().iterator();e.hasNext();){const s=e.next();if(!s.isInResult()&&(!s.isIncidentEdgeInResult()&&(0===s.getEdges().getDegree()||t===Ci.INTERSECTION))){const e=s.getLabel();Ci.isResultOfOp(e,t)&&this.filterCoveredNodeToPoint(s)}}}filterCoveredNodeToPoint(t){const e=t.getCoordinate();if(!this._op.isCoveredByLA(e)){const t=this._geometryFactory.createPoint(e);this._resultPointList.add(t)}}}class $s{isInBoundary(t){}}class ti{isInBoundary(t){return t%2==1}get interfaces_(){return[$s]}}class ei{isInBoundary(t){return t>0}get interfaces_(){return[$s]}}class si{isInBoundary(t){return t>1}get interfaces_(){return[$s]}}class ii{isInBoundary(t){return 1===t}get interfaces_(){return[$s]}}$s.Mod2BoundaryNodeRule=ti,$s.EndPointBoundaryNodeRule=ei,$s.MultiValentEndPointBoundaryNodeRule=si,$s.MonoValentEndPointBoundaryNodeRule=ii,$s.MOD2_BOUNDARY_RULE=new ti,$s.ENDPOINT_BOUNDARY_RULE=new ei,$s.MULTIVALENT_ENDPOINT_BOUNDARY_RULE=new si,$s.MONOVALENT_ENDPOINT_BOUNDARY_RULE=new ii,$s.OGC_SFS_BOUNDARY_RULE=$s.MOD2_BOUNDARY_RULE;class ni{constructor(){ni.constructor_.apply(this,arguments)}static constructor_(){if(this._boundaryRule=$s.OGC_SFS_BOUNDARY_RULE,this._isIn=null,this._numBoundaries=null,0===arguments.length);else if(1===arguments.length){const t=arguments[0];if(null===t)throw new e("Rule must be non-null");this._boundaryRule=t}}locateInPolygonRing(t,e){return e.getEnvelopeInternal().intersects(t)?ds.locateInRing(t,e.getCoordinates()):ke.EXTERIOR}intersects(t,e){return this.locate(t,e)!==ke.EXTERIOR}updateLocationInfo(t){t===ke.INTERIOR&&(this._isIn=!0),t===ke.BOUNDARY&&this._numBoundaries++}computeLocation(t,e){if(e instanceof St&&this.updateLocationInfo(this.locateOnPoint(t,e)),e instanceof ut)this.updateLocationInfo(this.locateOnLineString(t,e));else if(e instanceof Mt)this.updateLocationInfo(this.locateInPolygon(t,e));else if(e instanceof Rt){const s=e;for(let e=0;e<s.getNumGeometries();e++){const i=s.getGeometryN(e);this.updateLocationInfo(this.locateOnLineString(t,i))}}else if(e instanceof Et){const s=e;for(let e=0;e<s.getNumGeometries();e++){const i=s.getGeometryN(e);this.updateLocationInfo(this.locateInPolygon(t,i))}}else if(e instanceof yt){const s=new Ls(e);for(;s.hasNext();){const i=s.next();i!==e&&this.computeLocation(t,i)}}}locateOnPoint(t,e){return e.getCoordinate().equals2D(t)?ke.INTERIOR:ke.EXTERIOR}locateOnLineString(t,e){if(!e.getEnvelopeInternal().intersects(t))return ke.EXTERIOR;const s=e.getCoordinateSequence();return e.isClosed()||!t.equals(s.getCoordinate(0))&&!t.equals(s.getCoordinate(s.size()-1))?ds.isOnLine(t,s)?ke.INTERIOR:ke.EXTERIOR:ke.BOUNDARY}locateInPolygon(t,e){if(e.isEmpty())return ke.EXTERIOR;const s=e.getExteriorRing(),i=this.locateInPolygonRing(t,s);if(i===ke.EXTERIOR)return ke.EXTERIOR;if(i===ke.BOUNDARY)return ke.BOUNDARY;for(let s=0;s<e.getNumInteriorRing();s++){const i=e.getInteriorRingN(s),n=this.locateInPolygonRing(t,i);if(n===ke.INTERIOR)return ke.EXTERIOR;if(n===ke.BOUNDARY)return ke.BOUNDARY}return ke.INTERIOR}locate(t,e){return e.isEmpty()?ke.EXTERIOR:e instanceof ut?this.locateOnLineString(t,e):e instanceof Mt?this.locateInPolygon(t,e):(this._isIn=!1,this._numBoundaries=0,this.computeLocation(t,e),this._boundaryRule.isInBoundary(this._numBoundaries)?ke.BOUNDARY:this._numBoundaries>0||this._isIn?ke.INTERIOR:ke.EXTERIOR)}}class ri{constructor(){ri.constructor_.apply(this,arguments)}static constructor_(){this._pts=null,this._data=null;const t=arguments[0],e=arguments[1];this._pts=t,this._data=e}getCoordinates(){return this._pts}size(){return this._pts.length}getCoordinate(t){return this._pts[t]}isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1])}getSegmentOctant(t){return t===this._pts.length-1?-1:re.octant(this.getCoordinate(t),this.getCoordinate(t+1))}setData(t){this._data=t}getData(){return this._data}toString(){return ne.toLineString(new pt(this._pts))}get interfaces_(){return[oe]}}class oi{constructor(){oi.constructor_.apply(this,arguments)}static constructor_(){this._findAllIntersections=!1,this._isCheckEndSegmentsOnly=!1,this._keepIntersections=!0,this._isInteriorIntersectionsOnly=!1,this._li=null,this._interiorIntersection=null,this._intSegments=null,this._intersections=new P,this._intersectionCount=0;const t=arguments[0];this._li=t,this._interiorIntersection=null}static createAllIntersectionsFinder(t){const e=new oi(t);return e.setFindAllIntersections(!0),e}static isInteriorVertexIntersection(){if(4===arguments.length){const t=arguments[1];return(!arguments[2]||!arguments[3])&&!!arguments[0].equals2D(t)}if(8===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2],i=arguments[3],n=arguments[4],r=arguments[5],o=arguments[6],a=arguments[7];return!!oi.isInteriorVertexIntersection(t,s,n,o)||(!!oi.isInteriorVertexIntersection(t,i,n,a)||(!!oi.isInteriorVertexIntersection(e,s,r,o)||!!oi.isInteriorVertexIntersection(e,i,r,a)))}}static createInteriorIntersectionCounter(t){const e=new oi(t);return e.setInteriorIntersectionsOnly(!0),e.setFindAllIntersections(!0),e.setKeepIntersections(!1),e}static createIntersectionCounter(t){const e=new oi(t);return e.setFindAllIntersections(!0),e.setKeepIntersections(!1),e}static isEndSegment(t,e){return 0===e||e>=t.size()-2}static createAnyIntersectionFinder(t){return new oi(t)}static createInteriorIntersectionsFinder(t){const e=new oi(t);return e.setFindAllIntersections(!0),e.setInteriorIntersectionsOnly(!0),e}count(){return this._intersectionCount}getIntersections(){return this._intersections}setFindAllIntersections(t){this._findAllIntersections=t}setKeepIntersections(t){this._keepIntersections=t}getIntersection(){return this._interiorIntersection}processIntersections(t,e,s,i){if(!this._findAllIntersections&&this.hasIntersection())return null;const n=t===s;if(n&&e===i)return null;if(this._isCheckEndSegmentsOnly){if(!(oi.isEndSegment(t,e)||oi.isEndSegment(s,i)))return null}const r=t.getCoordinate(e),o=t.getCoordinate(e+1),a=s.getCoordinate(i),l=s.getCoordinate(i+1),h=0===e,c=e+2===t.size(),u=0===i,g=i+2===s.size();this._li.computeIntersection(r,o,a,l);const d=this._li.hasIntersection()&&this._li.isInteriorIntersection();let _=!1;if(!this._isInteriorIntersectionsOnly){_=!(n&&Math.abs(i-e)<=1)&&oi.isInteriorVertexIntersection(r,o,a,l,h,c,u,g)}(d||_)&&(this._intSegments=new Array(4).fill(null),this._intSegments[0]=r,this._intSegments[1]=o,this._intSegments[2]=a,this._intSegments[3]=l,this._interiorIntersection=this._li.getIntersection(0),this._keepIntersections&&this._intersections.add(this._interiorIntersection),this._intersectionCount++)}hasIntersection(){return null!==this._interiorIntersection}isDone(){return!this._findAllIntersections&&null!==this._interiorIntersection}setInteriorIntersectionsOnly(t){this._isInteriorIntersectionsOnly=t}setCheckEndSegmentsOnly(t){this._isCheckEndSegmentsOnly=t}getIntersectionSegments(){return this._intSegments}get interfaces_(){return[Ue]}}class ai{constructor(){ai.constructor_.apply(this,arguments)}static constructor_(){this._li=new pe,this._segStrings=null,this._findAllIntersections=!1,this._segInt=null,this._isValid=!0;const t=arguments[0];this._segStrings=t}static computeIntersections(t){const e=new ai(t);return e.setFindAllIntersections(!0),e.isValid(),e.getIntersections()}isValid(){return this.execute(),this._isValid}setFindAllIntersections(t){this._findAllIntersections=t}checkInteriorIntersections(){this._isValid=!0,this._segInt=new oi(this._li),this._segInt.setFindAllIntersections(this._findAllIntersections);const t=new Fe;if(t.setSegmentIntersector(this._segInt),t.computeNodes(this._segStrings),this._segInt.hasIntersection())return this._isValid=!1,null}checkValid(){if(this.execute(),!this._isValid)throw new ue(this.getErrorMessage(),this._segInt.getIntersection())}getErrorMessage(){if(this._isValid)return"no intersections found";const t=this._segInt.getIntersectionSegments();return"found non-noded intersection between "+ne.toLineString(t[0],t[1])+" and "+ne.toLineString(t[2],t[3])}execute(){if(null!==this._segInt)return null;this.checkInteriorIntersections()}getIntersections(){return this._segInt.getIntersections()}}class li{constructor(){li.constructor_.apply(this,arguments)}static constructor_(){this._nv=null;const t=arguments[0];this._nv=new ai(li.toSegmentStrings(t))}static toSegmentStrings(t){const e=new P;for(let s=t.iterator();s.hasNext();){const t=s.next();e.add(new ri(t.getCoordinates(),t))}return e}static checkValid(t){new li(t).checkValid()}checkValid(){this._nv.checkValid()}}class hi{constructor(){hi.constructor_.apply(this,arguments)}static constructor_(){this._mapOp=null;const t=arguments[0];this._mapOp=t}static map(t,e){return new hi(e).map(t)}map(t){const e=new P;for(let s=0;s<t.getNumGeometries();s++){const i=this._mapOp.map(t.getGeometryN(s));i.isEmpty()||e.add(i)}return t.getFactory().createGeometryCollection(vt.toGeometryArray(e))}}class ci{}class ui{constructor(){ui.constructor_.apply(this,arguments)}static constructor_(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._properIntersectionPoint=null,this._li=null,this._includeProper=null,this._recordIsolated=null,this._isSelfIntersection=null,this._numIntersections=0,this.numTests=0,this._bdyNodes=null,this._isDone=!1,this._isDoneWhenProperInt=!1;const t=arguments[0],e=arguments[1],s=arguments[2];this._li=t,this._includeProper=e,this._recordIsolated=s}static isAdjacentSegments(t,e){return 1===Math.abs(t-e)}isTrivialIntersection(t,e,s,i){if(t===s&&1===this._li.getIntersectionNum()){if(ui.isAdjacentSegments(e,i))return!0;if(t.isClosed()){const s=t.getNumPoints()-1;if(0===e&&i===s||0===i&&e===s)return!0}}return!1}hasProperInteriorIntersection(){return this._hasProperInterior}isBoundaryPointInternal(t,e){for(let s=e.iterator();s.hasNext();){const e=s.next().getCoordinate();if(t.isIntersection(e))return!0}return!1}hasProperIntersection(){return this._hasProper}hasIntersection(){return this._hasIntersection}isDone(){return this._isDone}isBoundaryPoint(t,e){return null!==e&&(!!this.isBoundaryPointInternal(t,e[0])||!!this.isBoundaryPointInternal(t,e[1]))}setBoundaryNodes(t,e){this._bdyNodes=new Array(2).fill(null),this._bdyNodes[0]=t,this._bdyNodes[1]=e}addIntersections(t,e,s,i){if(t===s&&e===i)return null;this.numTests++;const n=t.getCoordinates()[e],r=t.getCoordinates()[e+1],o=s.getCoordinates()[i],a=s.getCoordinates()[i+1];this._li.computeIntersection(n,r,o,a),this._li.hasIntersection()&&(this._recordIsolated&&(t.setIsolated(!1),s.setIsolated(!1)),this._numIntersections++,this.isTrivialIntersection(t,e,s,i)||(this._hasIntersection=!0,!this._includeProper&&this._li.isProper()||(t.addIntersections(this._li,e,0),s.addIntersections(this._li,i,1)),this._li.isProper()&&(this._properIntersectionPoint=this._li.getIntersection(0).copy(),this._hasProper=!0,this._isDoneWhenProperInt&&(this._isDone=!0),this.isBoundaryPoint(this._li,this._bdyNodes)||(this._hasProperInterior=!0))))}getProperIntersectionPoint(){return this._properIntersectionPoint}setIsDoneIfProperInt(t){this._isDoneWhenProperInt=t}}class gi{constructor(){gi.constructor_.apply(this,arguments)}static constructor_(){this.mce=null,this.chainIndex=null;const t=arguments[0],e=arguments[1];this.mce=t,this.chainIndex=e}computeIntersections(t,e){this.mce.computeIntersectsForChain(this.chainIndex,t.mce,t.chainIndex,e)}}class di{constructor(){di.constructor_.apply(this,arguments)}static constructor_(){if(this._label=null,this._xValue=null,this._eventType=null,this._insertEvent=null,this._deleteEventIndex=null,this._obj=null,2===arguments.length){const t=arguments[0],e=arguments[1];this._eventType=di.DELETE,this._xValue=t,this._insertEvent=e}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._eventType=di.INSERT,this._label=t,this._xValue=e,this._obj=s}}getObject(){return this._obj}getDeleteEventIndex(){return this._deleteEventIndex}isDelete(){return this._eventType===di.DELETE}setDeleteEventIndex(t){this._deleteEventIndex=t}compareTo(t){const e=t;return this._xValue<e._xValue?-1:this._xValue>e._xValue?1:this._eventType<e._eventType?-1:this._eventType>e._eventType?1:0}getInsertEvent(){return this._insertEvent}isInsert(){return this._eventType===di.INSERT}isSameLabel(t){return null!==this._label&&this._label===t._label}get interfaces_(){return[i]}}di.INSERT=1,di.DELETE=2;class _i extends ci{constructor(){super(),_i.constructor_.apply(this,arguments)}static constructor_(){this.events=new P,this.nOverlaps=null}prepareEvents(){Ne.sort(this.events);for(let t=0;t<this.events.size();t++){const e=this.events.get(t);e.isDelete()&&e.getInsertEvent().setDeleteEventIndex(t)}}computeIntersections(){if(1===arguments.length){const t=arguments[0];this.nOverlaps=0,this.prepareEvents();for(let e=0;e<this.events.size();e++){const s=this.events.get(e);if(s.isInsert()&&this.processOverlaps(e,s.getDeleteEventIndex(),s,t),t.isDone())break}}else if(3===arguments.length)if(arguments[2]instanceof ui&&w(arguments[0],b)&&w(arguments[1],b)){const t=arguments[0],e=arguments[1],s=arguments[2];this.addEdges(t,t),this.addEdges(e,e),this.computeIntersections(s)}else if("boolean"==typeof arguments[2]&&w(arguments[0],b)&&arguments[1]instanceof ui){const t=arguments[0],e=arguments[1];arguments[2]?this.addEdges(t,null):this.addEdges(t),this.computeIntersections(e)}}addEdge(t,e){const s=t.getMonotoneChainEdge(),i=s.getStartIndexes();for(let t=0;t<i.length-1;t++){const i=new gi(s,t),n=new di(e,s.getMinX(t),i);this.events.add(n),this.events.add(new di(s.getMaxX(t),n))}}processOverlaps(t,e,s,i){const n=s.getObject();for(let r=t;r<e;r++){const t=this.events.get(r);if(t.isInsert()){const e=t.getObject();s.isSameLabel(t)||(n.computeIntersections(e,i),this.nOverlaps++)}}}addEdges(){if(1===arguments.length){for(let t=arguments[0].iterator();t.hasNext();){const e=t.next();this.addEdge(e,e)}}else if(2===arguments.length){const t=arguments[1];for(let e=arguments[0].iterator();e.hasNext();){const s=e.next();this.addEdge(s,t)}}}}class pi{constructor(){pi.constructor_.apply(this,arguments)}static constructor_(){this._min=l.POSITIVE_INFINITY,this._max=l.NEGATIVE_INFINITY}getMin(){return this._min}intersects(t,e){return!(this._min>e||this._max<t)}getMax(){return this._max}toString(){return ne.toLineString(new f(this._min,0),new f(this._max,0))}}pi.NodeComparator=class{compare(t,e){const s=t,i=e,n=(s._min+s._max)/2,r=(i._min+i._max)/2;return n<r?-1:n>r?1:0}get interfaces_(){return[g]}};class fi extends pi{constructor(){super(),fi.constructor_.apply(this,arguments)}static constructor_(){this._item=null;const t=arguments[0],e=arguments[1],s=arguments[2];this._min=t,this._max=e,this._item=s}query(t,e,s){if(!this.intersects(t,e))return null;s.visitItem(this._item)}}class mi extends pi{constructor(){super(),mi.constructor_.apply(this,arguments)}static constructor_(){this._node1=null,this._node2=null;const t=arguments[0],e=arguments[1];this._node1=t,this._node2=e,this.buildExtent(this._node1,this._node2)}buildExtent(t,e){this._min=Math.min(t._min,e._min),this._max=Math.max(t._max,e._max)}query(t,e,s){if(!this.intersects(t,e))return null;null!==this._node1&&this._node1.query(t,e,s),null!==this._node2&&this._node2.query(t,e,s)}}class yi{constructor(){yi.constructor_.apply(this,arguments)}static constructor_(){this._leaves=new P,this._root=null,this._level=0}buildTree(){Ne.sort(this._leaves,new pi.NodeComparator);let t=this._leaves,e=null,s=new P;for(;;){if(this.buildLevel(t,s),1===s.size())return s.get(0);e=t,t=s,s=e}}insert(t,e,s){if(null!==this._root)throw new Ct("Index cannot be added to once it has been queried");this._leaves.add(new fi(t,e,s))}query(t,e,s){if(this.init(),null===this._root)return null;this._root.query(t,e,s)}buildRoot(){if(null!==this._root)return null;this._root=this.buildTree()}printNode(t){et.out.println(ne.toLineString(new f(t._min,this._level),new f(t._max,this._level)))}init(){return null!==this._root||0===this._leaves.size()?null:void this.buildRoot()}buildLevel(t,e){this._level++,e.clear();for(let s=0;s<t.size();s+=2){const i=t.get(s);if(null===(s+1<t.size()?t.get(s):null))e.add(i);else{const i=new mi(t.get(s),t.get(s+1));e.add(i)}}}}class Ii{constructor(){Ii.constructor_.apply(this,arguments)}static constructor_(){if(this._lines=null,this._isForcedToLineString=!1,1===arguments.length){const t=arguments[0];this._lines=t}else if(2===arguments.length){const t=arguments[0],e=arguments[1];this._lines=t,this._isForcedToLineString=e}}static getLines(){if(1===arguments.length){const t=arguments[0];return Ii.getLines(t,!1)}if(2===arguments.length){if(w(arguments[0],E)&&w(arguments[1],E)){const t=arguments[1];for(let e=arguments[0].iterator();e.hasNext();){const s=e.next();Ii.getLines(s,t)}return t}if(arguments[0]instanceof I&&"boolean"==typeof arguments[1]){const t=arguments[0],e=arguments[1],s=new P;return t.apply(new Ii(s,e)),s}if(arguments[0]instanceof I&&w(arguments[1],E)){const t=arguments[0],e=arguments[1];return t instanceof ut?e.add(t):t.apply(new Ii(e)),e}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&w(arguments[0],E)&&w(arguments[1],E)){const t=arguments[1],e=arguments[2];for(let s=arguments[0].iterator();s.hasNext();){const i=s.next();Ii.getLines(i,t,e)}return t}if("boolean"==typeof arguments[2]&&arguments[0]instanceof I&&w(arguments[1],E)){const t=arguments[1],e=arguments[2];return arguments[0].apply(new Ii(t,e)),t}}}static getGeometry(){if(1===arguments.length){const t=arguments[0];return t.getFactory().buildGeometry(Ii.getLines(t))}if(2===arguments.length){const t=arguments[0],e=arguments[1];return t.getFactory().buildGeometry(Ii.getLines(t,e))}}filter(t){if(this._isForcedToLineString&&t instanceof gt){const e=t.getFactory().createLineString(t.getCoordinateSequence());return this._lines.add(e),null}t instanceof ut&&this._lines.add(t)}setForceToLineString(t){this._isForcedToLineString=t}get interfaces_(){return[s]}}class Ei{constructor(){Ei.constructor_.apply(this,arguments)}static constructor_(){this._items=new P}getItems(){return this._items}visitItem(t){this._items.add(t)}get interfaces_(){return[Le]}}class xi{constructor(){xi.constructor_.apply(this,arguments)}static constructor_(){this._geom=null,this._index=null;const t=arguments[0];if(!(w(t,It)||t instanceof gt))throw new e("Argument must be Polygonal or LinearRing");this._geom=t}locate(t){null===this._index&&(this._index=new Ti(this._geom),this._geom=null);const e=new gs(t),s=new Ni(e);return this._index.query(t.y,t.y,s),e.getLocation()}get interfaces_(){return[Rs]}}class Ni{constructor(){Ni.constructor_.apply(this,arguments)}static constructor_(){this._counter=null;const t=arguments[0];this._counter=t}visitItem(t){const e=t;this._counter.countSegment(e.getCoordinate(0),e.getCoordinate(1))}get interfaces_(){return[Le]}}class Ti{constructor(){Ti.constructor_.apply(this,arguments)}static constructor_(){this._isEmpty=!1,this._index=new yi;const t=arguments[0];t.isEmpty()?this._isEmpty=!0:this.init(t)}init(t){for(let e=Ii.getLines(t).iterator();e.hasNext();){const t=e.next().getCoordinates();this.addLine(t)}}addLine(t){for(let e=1;e<t.length;e++){const s=new be(t[e-1],t[e]),i=Math.min(s.p0.y,s.p1.y),n=Math.max(s.p0.y,s.p1.y);this._index.insert(i,n,s)}}query(){if(2===arguments.length){const t=arguments[0],e=arguments[1];if(this._isEmpty)return new P;const s=new Ei;return this._index.query(t,e,s),s.getItems()}if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];if(this._isEmpty)return null;this._index.query(t,e,s)}}}xi.SegmentVisitor=Ni,xi.IntervalIndexedGeometry=Ti;class Ri extends us{constructor(){super(),Ri.constructor_.apply(this,arguments)}static constructor_(){if(this._parentGeom=null,this._lineEdgeMap=new xt,this._boundaryNodeRule=null,this._useBoundaryDeterminationRule=!0,this._argIndex=null,this._boundaryNodes=null,this._hasTooFewPoints=!1,this._invalidPoint=null,this._areaPtLocator=null,this._ptLocator=new ni,2===arguments.length){const t=arguments[0],e=arguments[1];Ri.constructor_.call(this,t,e,$s.OGC_SFS_BOUNDARY_RULE)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];this._argIndex=t,this._parentGeom=e,this._boundaryNodeRule=s,null!==e&&this.add(e)}}static determineBoundary(t,e){return t.isInBoundary(e)?ke.BOUNDARY:ke.INTERIOR}insertBoundaryPoint(t,e){const s=this._nodes.addNode(e).getLabel();let i=1,n=ke.NONE;n=s.getLocation(t,He.ON),n===ke.BOUNDARY&&i++;const r=Ri.determineBoundary(this._boundaryNodeRule,i);s.setLocation(t,r)}computeSelfNodes(){if(2===arguments.length){const t=arguments[0],e=arguments[1];return this.computeSelfNodes(t,e,!1)}if(3===arguments.length){const t=arguments[1],e=arguments[2],s=new ui(arguments[0],!0,!1);s.setIsDoneIfProperInt(e);const i=this.createEdgeSetIntersector(),n=this._parentGeom instanceof gt||this._parentGeom instanceof Mt||this._parentGeom instanceof Et,r=t||!n;return i.computeIntersections(this._edges,s,r),this.addSelfIntersectionNodes(this._argIndex),s}}addPolygon(t){this.addPolygonRing(t.getExteriorRing(),ke.EXTERIOR,ke.INTERIOR);for(let e=0;e<t.getNumInteriorRing();e++){const s=t.getInteriorRingN(e);this.addPolygonRing(s,ke.INTERIOR,ke.EXTERIOR)}}addEdge(t){this.insertEdge(t);const e=t.getCoordinates();this.insertPoint(this._argIndex,e[0],ke.BOUNDARY),this.insertPoint(this._argIndex,e[e.length-1],ke.BOUNDARY)}addLineString(t){const e=st.removeRepeatedPoints(t.getCoordinates());if(e.length<2)return this._hasTooFewPoints=!0,this._invalidPoint=e[0],null;const s=new Ys(e,new ns(this._argIndex,ke.INTERIOR));this._lineEdgeMap.put(t,s),this.insertEdge(s),u.isTrue(e.length>=2,"found LineString with single point"),this.insertBoundaryPoint(this._argIndex,e[0]),this.insertBoundaryPoint(this._argIndex,e[e.length-1])}getInvalidPoint(){return this._invalidPoint}getBoundaryPoints(){const t=this.getBoundaryNodes(),e=new Array(t.size()).fill(null);let s=0;for(let i=t.iterator();i.hasNext();){const t=i.next();e[s++]=t.getCoordinate().copy()}return e}addSelfIntersectionNodes(t){for(let e=this._edges.iterator();e.hasNext();){const s=e.next(),i=s.getLabel().getLocation(t);for(let e=s.eiList.iterator();e.hasNext();){const s=e.next();this.addSelfIntersectionNode(t,s.coord,i)}}}add(){if(!(1===arguments.length&&arguments[0]instanceof I))return super.add.apply(this,arguments);{const t=arguments[0];if(t.isEmpty())return null;if(t instanceof Et&&(this._useBoundaryDeterminationRule=!1),t instanceof Mt)this.addPolygon(t);else if(t instanceof ut)this.addLineString(t);else if(t instanceof St)this.addPoint(t);else if(t instanceof Dt)this.addCollection(t);else if(t instanceof Rt)this.addCollection(t);else if(t instanceof Et)this.addCollection(t);else{if(!(t instanceof yt))throw new N(t.getGeometryType());this.addCollection(t)}}}addCollection(t){for(let e=0;e<t.getNumGeometries();e++){const s=t.getGeometryN(e);this.add(s)}}locate(t){return w(this._parentGeom,It)&&this._parentGeom.getNumGeometries()>50?(null===this._areaPtLocator&&(this._areaPtLocator=new xi(this._parentGeom)),this._areaPtLocator.locate(t)):this._ptLocator.locate(t,this._parentGeom)}findEdge(){if(1===arguments.length&&arguments[0]instanceof ut){const t=arguments[0];return this._lineEdgeMap.get(t)}return super.findEdge.apply(this,arguments)}computeSplitEdges(t){for(let e=this._edges.iterator();e.hasNext();){e.next().eiList.addSplitEdges(t)}}computeEdgeIntersections(t,e,s){const i=new ui(e,s,!0);i.setBoundaryNodes(this.getBoundaryNodes(),t.getBoundaryNodes());return this.createEdgeSetIntersector().computeIntersections(this._edges,t._edges,i),i}getGeometry(){return this._parentGeom}getBoundaryNodeRule(){return this._boundaryNodeRule}hasTooFewPoints(){return this._hasTooFewPoints}addPoint(){if(arguments[0]instanceof St){const t=arguments[0].getCoordinate();this.insertPoint(this._argIndex,t,ke.INTERIOR)}else if(arguments[0]instanceof f){const t=arguments[0];this.insertPoint(this._argIndex,t,ke.INTERIOR)}}getBoundaryNodes(){return null===this._boundaryNodes&&(this._boundaryNodes=this._nodes.getBoundaryNodes(this._argIndex)),this._boundaryNodes}addSelfIntersectionNode(t,e,s){if(this.isBoundaryNode(t,e))return null;s===ke.BOUNDARY&&this._useBoundaryDeterminationRule?this.insertBoundaryPoint(t,e):this.insertPoint(t,e,s)}addPolygonRing(t,e,s){if(t.isEmpty())return null;const i=st.removeRepeatedPoints(t.getCoordinates());if(i.length<4)return this._hasTooFewPoints=!0,this._invalidPoint=i[0],null;let n=e,r=s;At.isCCW(i)&&(n=s,r=e);const o=new Ys(i,new ns(this._argIndex,ke.BOUNDARY,n,r));this._lineEdgeMap.put(t,o),this.insertEdge(o),this.insertPoint(this._argIndex,i[0],ke.BOUNDARY)}insertPoint(t,e,s){const i=this._nodes.addNode(e),n=i.getLabel();null===n?i._label=new ns(t,s):n.setLocation(t,s)}createEdgeSetIntersector(){return new _i}}class Li{constructor(){Li.constructor_.apply(this,arguments)}static constructor_(){if(this._li=new pe,this._resultPrecisionModel=null,this._arg=null,1===arguments.length){const t=arguments[0];this.setComputationPrecision(t.getPrecisionModel()),this._arg=new Array(1).fill(null),this._arg[0]=new Ri(0,t)}else if(2===arguments.length){const t=arguments[0],e=arguments[1];Li.constructor_.call(this,t,e,$s.OGC_SFS_BOUNDARY_RULE)}else if(3===arguments.length){const t=arguments[0],e=arguments[1],s=arguments[2];t.getPrecisionModel().compareTo(e.getPrecisionModel())>=0?this.setComputationPrecision(t.getPrecisionModel()):this.setComputationPrecision(e.getPrecisionModel()),this._arg=new Array(2).fill(null),this._arg[0]=new Ri(0,t,s),this._arg[1]=new Ri(1,e,s)}}setComputationPrecision(t){this._resultPrecisionModel=t,this._li.setPrecisionModel(this._resultPrecisionModel)}getArgGeometry(t){return this._arg[t].getGeometry()}}class Ci extends Li{constructor(){super(),Ci.constructor_.apply(this,arguments)}static constructor_(){this._ptLocator=new ni,this._geomFact=null,this._resultGeom=null,this._graph=null,this._edgeList=new Ps,this._resultPolyList=new P,this._resultLineList=new P,this._resultPointList=new P;const t=arguments[0],e=arguments[1];Li.constructor_.call(this,t,e),this._graph=new us(new Os),this._geomFact=t.getFactory()}static overlayOp(t,e,s){return new Ci(t,e).getResultGeometry(s)}static union(t,s){if(t.isEmpty()||s.isEmpty()){if(t.isEmpty()&&s.isEmpty())return Ci.createEmptyResult(Ci.UNION,t,s,t.getFactory());if(t.isEmpty())return s.copy();if(s.isEmpty())return t.copy()}if(t.isGeometryCollection()||s.isGeometryCollection())throw new e("This method does not support GeometryCollection arguments");return wi.overlayOp(t,s,Ci.UNION)}static intersection(t,e){if(t.isEmpty()||e.isEmpty())return Ci.createEmptyResult(Ci.INTERSECTION,t,e,t.getFactory());if(t.isGeometryCollection()){const s=e;return hi.map(t,new class{get interfaces_(){return[MapOp]}map(t){return Ci.intersection(t,s)}})}return wi.overlayOp(t,e,Ci.INTERSECTION)}static symDifference(t,s){if(t.isEmpty()||s.isEmpty()){if(t.isEmpty()&&s.isEmpty())return Ci.createEmptyResult(Ci.SYMDIFFERENCE,t,s,t.getFactory());if(t.isEmpty())return s.copy();if(s.isEmpty())return t.copy()}if(t.isGeometryCollection()||s.isGeometryCollection())throw new e("This method does not support GeometryCollection arguments");return wi.overlayOp(t,s,Ci.SYMDIFFERENCE)}static resultDimension(t,e,s){const i=e.getDimension(),n=s.getDimension();let r=-1;switch(t){case Ci.INTERSECTION:r=Math.min(i,n);break;case Ci.UNION:r=Math.max(i,n);break;case Ci.DIFFERENCE:r=i;break;case Ci.SYMDIFFERENCE:r=Math.max(i,n)}return r}static createEmptyResult(t,e,s,i){const n=Ci.resultDimension(t,e,s);return i.createEmpty(n)}static difference(t,s){if(t.isEmpty())return Ci.createEmptyResult(Ci.DIFFERENCE,t,s,t.getFactory());if(s.isEmpty())return t.copy();if(t.isGeometryCollection()||s.isGeometryCollection())throw new e("This method does not support GeometryCollection arguments");return wi.overlayOp(t,s,Ci.DIFFERENCE)}static isResultOfOp(){if(2===arguments.length){const t=arguments[0],e=arguments[1],s=t.getLocation(0),i=t.getLocation(1);return Ci.isResultOfOp(s,i,e)}if(3===arguments.length){let t=arguments[0],e=arguments[1],s=arguments[2];switch(t===ke.BOUNDARY&&(t=ke.INTERIOR),e===ke.BOUNDARY&&(e=ke.INTERIOR),s){case Ci.INTERSECTION:return t===ke.INTERIOR&&e===ke.INTERIOR;case Ci.UNION:return t===ke.INTERIOR||e===ke.INTERIOR;case Ci.DIFFERENCE:return t===ke.INTERIOR&&e!==ke.INTERIOR;case Ci.SYMDIFFERENCE:return t===ke.INTERIOR&&e!==ke.INTERIOR||t!==ke.INTERIOR&&e===ke.INTERIOR}return!1}}insertUniqueEdge(t){const e=this._edgeList.findEqualEdge(t);if(null!==e){const s=e.getLabel();let i=t.getLabel();e.isPointwiseEqual(t)||(i=new ns(t.getLabel()),i.flip());const n=e.getDepth();n.isNull()&&n.add(s),n.add(i),s.merge(i)}else this._edgeList.add(t)}getGraph(){return this._graph}cancelDuplicateResultEdges(){for(let t=this._graph.getEdgeEnds().iterator();t.hasNext();){const e=t.next(),s=e.getSym();e.isInResult()&&s.isInResult()&&(e.setInResult(!1),s.setInResult(!1))}}mergeSymLabels(){for(let t=this._graph.getNodes().iterator();t.hasNext();){t.next().getEdges().mergeSymLabels()}}computeOverlay(t){this.copyPoints(0),this.copyPoints(1),this._arg[0].computeSelfNodes(this._li,!1),this._arg[1].computeSelfNodes(this._li,!1),this._arg[0].computeEdgeIntersections(this._arg[1],this._li,!0);const e=new P;this._arg[0].computeSplitEdges(e),this._arg[1].computeSplitEdges(e),this.insertUniqueEdges(e),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),li.checkValid(this._edgeList.getEdges()),this._graph.addEdges(this._edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(t),this.cancelDuplicateResultEdges();const s=new ms(this._geomFact);s.add(this._graph),this._resultPolyList=s.getPolygons();const i=new Qs(this,this._geomFact,this._ptLocator);this._resultLineList=i.build(t);const n=new Js(this,this._geomFact,this._ptLocator);this._resultPointList=n.build(t),this._resultGeom=this.computeGeometry(this._resultPointList,this._resultLineList,this._resultPolyList,t)}findResultAreaEdges(t){for(let e=this._graph.getEdgeEnds().iterator();e.hasNext();){const s=e.next(),i=s.getLabel();i.isArea()&&!s.isInteriorAreaEdge()&&Ci.isResultOfOp(i.getLocation(0,He.RIGHT),i.getLocation(1,He.RIGHT),t)&&s.setInResult(!0)}}computeLabelsFromDepths(){for(let t=this._edgeList.iterator();t.hasNext();){const e=t.next(),s=e.getLabel(),i=e.getDepth();if(!i.isNull()){i.normalize();for(let t=0;t<2;t++)s.isNull(t)||!s.isArea()||i.isNull(t)||(0===i.getDelta(t)?s.toLine(t):(u.isTrue(!i.isNull(t,He.LEFT),"depth of LEFT side has not been initialized"),s.setLocation(t,He.LEFT,i.getLocation(t,He.LEFT)),u.isTrue(!i.isNull(t,He.RIGHT),"depth of RIGHT side has not been initialized"),s.setLocation(t,He.RIGHT,i.getLocation(t,He.RIGHT))))}}}isCoveredByA(t){return!!this.isCovered(t,this._resultPolyList)}isCoveredByLA(t){return!!this.isCovered(t,this._resultLineList)||!!this.isCovered(t,this._resultPolyList)}computeGeometry(t,e,s,i){const n=new P;return n.addAll(t),n.addAll(e),n.addAll(s),n.isEmpty()?Ci.createEmptyResult(i,this._arg[0].getGeometry(),this._arg[1].getGeometry(),this._geomFact):this._geomFact.buildGeometry(n)}isCovered(t,e){for(let s=e.iterator();s.hasNext();){const e=s.next();if(this._ptLocator.locate(t,e)!==ke.EXTERIOR)return!0}return!1}replaceCollapsedEdges(){const t=new P;for(let e=this._edgeList.iterator();e.hasNext();){const s=e.next();s.isCollapsed()&&(e.remove(),t.add(s.getCollapsedEdge()))}this._edgeList.addAll(t)}updateNodeLabelling(){for(let t=this._graph.getNodes().iterator();t.hasNext();){const e=t.next(),s=e.getEdges().getLabel();e.getLabel().merge(s)}}getResultGeometry(t){return this.computeOverlay(t),this._resultGeom}insertUniqueEdges(t){for(let e=t.iterator();e.hasNext();){const t=e.next();this.insertUniqueEdge(t)}}labelIncompleteNode(t,e){const s=this._ptLocator.locate(t.getCoordinate(),this._arg[e].getGeometry());t.getLabel().setLocation(e,s)}copyPoints(t){for(let e=this._arg[t].getNodeIterator();e.hasNext();){const s=e.next();this._graph.addNode(s.getCoordinate()).setLabel(t,s.getLabel().getLocation(t))}}computeLabelling(){for(let t=this._graph.getNodes().iterator();t.hasNext();){t.next().getEdges().computeLabelling(this._arg)}this.mergeSymLabels(),this.updateNodeLabelling()}labelIncompleteNodes(){for(let t=this._graph.getNodes().iterator();t.hasNext();){const e=t.next(),s=e.getLabel();e.isIsolated()&&(s.isNull(0)?this.labelIncompleteNode(e,0):this.labelIncompleteNode(e,1)),e.getEdges().updateLabelling(s)}}}Ci.INTERSECTION=1,Ci.UNION=2,Ci.DIFFERENCE=3,Ci.SYMDIFFERENCE=4;class Si{constructor(){Si.constructor_.apply(this,arguments)}static constructor_(){this._geom=new Array(2).fill(null),this._snapTolerance=null,this._cbr=null;const t=arguments[0],e=arguments[1];this._geom[0]=t,this._geom[1]=e,this.computeSnapTolerance()}static overlayOp(t,e,s){return new Si(t,e).getResultGeometry(s)}static union(t,e){return Si.overlayOp(t,e,Ci.UNION)}static intersection(t,e){return Si.overlayOp(t,e,Ci.INTERSECTION)}static symDifference(t,e){return Si.overlayOp(t,e,Ci.SYMDIFFERENCE)}static difference(t,e){return Si.overlayOp(t,e,Ci.DIFFERENCE)}selfSnap(t){return new ks(t).snapTo(t,this._snapTolerance)}removeCommonBits(t){this._cbr=new Ws,this._cbr.add(t[0]),this._cbr.add(t[1]);const e=new Array(2).fill(null);return e[0]=this._cbr.removeCommonBits(t[0].copy()),e[1]=this._cbr.removeCommonBits(t[1].copy()),e}prepareResult(t){return this._cbr.addCommonBits(t),t}getResultGeometry(t){const e=this.snap(this._geom),s=Ci.overlayOp(e[0],e[1],t);return this.prepareResult(s)}checkValid(t){t.isValid()||et.out.println("Snapped geometry is invalid")}computeSnapTolerance(){this._snapTolerance=ks.computeOverlaySnapTolerance(this._geom[0],this._geom[1])}snap(t){const e=this.removeCommonBits(t);return ks.snap(e[0],e[1],this._snapTolerance)}}class wi{constructor(){wi.constructor_.apply(this,arguments)}static constructor_(){this._geom=new Array(2).fill(null);const t=arguments[0],e=arguments[1];this._geom[0]=t,this._geom[1]=e}static overlayOp(t,e,s){return new wi(t,e).getResultGeometry(s)}static union(t,e){return wi.overlayOp(t,e,Ci.UNION)}static intersection(t,e){return wi.overlayOp(t,e,Ci.INTERSECTION)}static symDifference(t,e){return wi.overlayOp(t,e,Ci.SYMDIFFERENCE)}static difference(t,e){return wi.overlayOp(t,e,Ci.DIFFERENCE)}getResultGeometry(t){let e=null,s=!1,i=null;try{e=Ci.overlayOp(this._geom[0],this._geom[1],t);!0&&(s=!0)}catch(t){if(!(t instanceof h))throw t;i=t}if(!s)try{e=Si.overlayOp(this._geom[0],this._geom[1],t)}catch(t){throw t instanceof h?i:t}return e}}class Oi{static union(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return Ci.createEmptyResult(Ci.UNION,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return I.checkNotGeometryCollection(t),I.checkNotGeometryCollection(e),wi.overlayOp(t,e,Ci.UNION)}}export{Oi as default};
